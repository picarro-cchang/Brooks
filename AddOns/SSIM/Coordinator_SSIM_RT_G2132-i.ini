#Toggle Test Simulates a Direct Tank Connection with CAL.
#Toggle Test will continue until necessary parameters are reached or after the 15 minute time out.

[UserEditableParams]
num_disp_params = 0
0 = "maxTestDuration", "Maximum test duration (minutes)", "10.0"

[Mode]
inject_mode=automatic

[Files]
output = "C:\IsotopicData\SSIM"

[Output]
resultTime          = "Date/Time"                  , %15s
meanDelta           = "HR_Delta_iCH4_Raw Mean"     , %17.3f
stdDelta            = "HR_Delta_iCH4_Raw Std"      , %16.3f
mean12CH4           = "HR_12CH4 Mean"              , %17.3f
std12CH4            = "HR_12CH4 Std"               , %16.3f
meanDeltaHP         = "HP_Delta_iCH4_Raw Mean"     , %17.3f
stdDeltaHP          = "HP_Delta_iCH4_Raw Std"      , %16.3f
mean12CH4HP         = "HP_12CH4 Mean"              , %17.3f
std12CH4HP          = "HP_12CH4 Std"               , %16.3f
meanadjust24        = "adjust_24 Mean"             , %0.4e
meanadjust30        = "adjust_30 Mean"             , %0.4e
meanadjust5         = "adjust_5 Mean"              , %0.4e
meancavPress        = "Cavity Pressure Mean"       , %17.3f
meancavTemp         = "Cavity Temperature Mean"    , %17.3f
meanWBTemp          = "Warm Box Temperature Mean"  , %17.3f

[PostProcessing]
type = deltaCorr
output = C:\IsotopicData\Corrected\

[Setup]
initial = StateInitConfig
final = StateDone
error = StateError

[StateInitConfig]
action = """

maxTestDuration = float(editParamDict["maxTestDuration"])

# Set some initial flags
t = 0
initialMeet = False

timeFormat = "%m/%d/%y %H:%M:%S"

# Define pressure setpoints
regularPressure = 148
# Lowest pressure = 10.33

setMeasBuffer("analyze_FBDS", ["HR_Delta_iCH4_Raw", "HR_12CH4", "HP_Delta_iCH4_Raw",
"HP_12CH4", "adjust_24", "adjust_30", "adjust_5", "CavityPressure", "CavityTemp",
"WarmBoxTemp"], 50)
clearMeasBuffer()

GUI.setStatusText("")

skipPressureCheck()

disableInstMgrAutoRestartFlow()
# Definte the pressure and inlet valve characteristics
setMaxCavityPressureRate(10)
setInletValveMaxChange(500)
setInletValveGains(80, 1)
setValveMinDac("outlet", 0)
setValveMinDac("inlet", 0)
# Get inlet and outlet max DAC
inletValveMaxDac = getValveMinMaxDac("inlet")["max"]
outletValveMaxDac = getValveMinMaxDac("outlet")["max"]

# Close all the solenoid valves at the start-up

setValveMask(0)
logFunc("\nState Clean starts...\n")
NEXT = "StateClean"
"""

[StateClean]
action = """
# Alternate flow ZA through cavity & sample loop and pumping down sample loop
# Total time: 3 mins
setValveMask(8)
sleep(10)
setValveMask(5)
sleep(20)
setValveMask(8)
sleep(10)
setValveMask(5)
sleep(30)

logFunc("\nState Toggle starts...\n")
NEXT = "StateToggle"
"""

[StateToggle]
action = """
# Toggle valves 2 and 3 while valve 5 is open to imitate a direct tank CAL connection to analyzer
sleep(2)

sumsBuffer = {"HR_Delta_iCH4_Raw":[], "HR_12CH4":[], "HP_Delta_iCH4_Raw":[], "HP_12CH4":[],"adjust_24":[],
"adjust_30":[], "adjust_5":[], "CavityPressure":[], "CavityTemp":[], "WarmBoxTemp":[], "Time":[]}

clearMeasBuffer()

start = time.time()
dt = time.time()-start
while dt < (60.0 * maxTestDuration):
    setValveMask(22)
    sleep(.5)
    setValveMask(20)
    sleep(.5)
    results = measGetBufferFirst()
    if results:
        sumsBuffer["HR_Delta_iCH4_Raw"].append(results["HR_Delta_iCH4_Raw"])
        sumsBuffer["HR_12CH4"].append(results["HR_12CH4"])
        sumsBuffer["HP_Delta_iCH4_Raw"].append(results["HP_Delta_iCH4_Raw"])
        sumsBuffer["HP_12CH4"].append(results["HP_12CH4"])
        sumsBuffer["adjust_24"].append(results["adjust_24"])
        sumsBuffer["adjust_30"].append(results["adjust_30"])
        sumsBuffer["adjust_5"].append(results["adjust_5"])
        sumsBuffer["CavityPressure"].append(results["CavityPressure"])
        sumsBuffer["CavityTemp"].append(results["CavityTemp"])
        sumsBuffer["WarmBoxTemp"].append(results["WarmBoxTemp"])

        if int(dt) % 30 == 0:
            logFunc("\n30 second update...\n")
            row = {}
            row["resultTime"] = strftime(timeFormat, localtime())
            row["meanDelta"] = mean(sumsBuffer["HR_Delta_iCH4_Raw"])
            row["stdDelta"] = std(sumsBuffer["HR_Delta_iCH4_Raw"])
            row["mean12CH4"] = mean(sumsBuffer["HR_12CH4"])
            row["std12CH4"] = std(sumsBuffer["HR_12CH4"])
            row["meanDeltaHP"] = mean(sumsBuffer["HP_Delta_iCH4_Raw"])
            row["stdDeltaHP"] = std(sumsBuffer["HP_Delta_iCH4_Raw"])
            row["mean12CH4HP"] = mean(sumsBuffer["HP_12CH4"])
            row["std12CH4HP"] = std(sumsBuffer["HP_12CH4"])
            row["meanadjust24"] = mean(sumsBuffer["adjust_24"])
            row["meanadjust30"] = mean(sumsBuffer["adjust_30"])
            row["meanadjust5"] = mean(sumsBuffer["adjust_5"])
            row["meancavPress"] = mean(sumsBuffer["CavityPressure"])
            row["meancavTemp"] = mean(sumsBuffer["CavityTemp"])
            row["meanWBTemp"] = mean(sumsBuffer["WarmBoxTemp"])
            sumsBuffer["HR_Delta_iCH4_Raw"] = []
            sumsBuffer["HR_12CH4"] = []
            sumsBuffer["HP_Delta_iCH4_Raw"] = []
            sumsBuffer["HP_12CH4"] = []
            sumsBuffer["adjust_24"] = []
            sumsBuffer["adjust_30"] = []
            sumsBuffer["adjust_5"] = []
            sumsBuffer["CavityPressure"] = []
            sumsBuffer["CavityTemp"] = []
            sumsBuffer["WarmBoxTemp"] = []
            sumsBuffer["Time"] = []
            fileDataFunc(row)
            import math
            conditionsMet = (dt > 240 and row["meanc12pzt"] < 400 and row["meanc13pzt"] < 400 and
            math.fabs(row["meanadjust24"]) < 0.001 and math.fabs(row["meanadjust24"]) < 0.001 and
            math.fabs(row["meanadjust30"]) < 0.001 and math.fabs(row["meanadjust30"]) < 0.001 and
            math.fabs(row["meanadjust5"]) < 0.001 and math.fabs(row["meanadjust5"]) < 0.001 and
            (row["meancavPress"] >= 147.8 and row["meancavPress"] <= 148.2) and (row["meancavTemp"] >= 44.9
            and row["meancavTemp"] <= 45.1) and (row["meanWBTemp"] >= 49.9 and row["meanWBTemp"] <= 50.1))
            if conditionsMet and not initialMeet:
                initialMeet = True
            elif conditionsMet and initialMeet:
                NEXT = "StateEvacuateAtTheEnd"
                break
        dt = time.time() - start

NEXT = "StateEvacuateAtTheEnd"
"""

[StateEvacuateAtTheEnd]
action = """

# Evacuate the cavity
logFunc("\nEvacuating the cavity...\n")
currOutletDac = getValveDacValues()["outletDacValue"]
sleep(5)
NEXT = "StateDone"
"""

[StateDone]
action="""
setValveMask(0)
resumePressureCheck()
enableInstMgrAutoRestartFlow()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
