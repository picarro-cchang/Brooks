[StateTimeConfig]
action = """
# Define process time for each step
stepTime = 30
expandCarrierGasTime = 20
expandSampleTime = 60
stabilizeTime = 900
measurementTime = 30
evacuateTime = 240
prepareNextRunTime = 20
NEXT = "StateInitConfig" 
"""

[Mode]
inject_mode=automatic

[Files]
output = "C:\IsotopicData\IsotopicData"

[Output]
co2_conc_peak_sd   = "CO2_SD"          , %14.3f
resultDate    = "Date"            , %10s
resultTime    = "Time"            , %10s

[Setup]
initial = StateTimeConfig
final = StateDone
error = StateError

[StateInitConfig]
action = """
# Define pressure setpoints
regularPressure = 140
evacuatePressure = 10
carrierGasPressure = 40
# Lowest pressure = 10.33
# Initialize GC
#GC = GC()
#GC.open()
NEXT = "StateStart" 
"""

[StateStart]
action = """
setTriggerTime("analyze_isoCO2", measurementTime)
setValveMask(0)
skipPressureCheck()
enableCalScript()
setMaxCavityPressureRate(10)
setInletValveMaxChange(500)
setInletValveGains(80, 1)
setValveMinDac("outlet", 0)
setValveMinDac("inlet", 0)
# Get inlet and outlet max DAC
inletValveMaxDac = getValveMinMaxDac("inlet")["max"]
outletValveMaxDac = getValveMinMaxDac("outlet")["max"]
numStateARun = 0
t = 0
logFunc("\nState A starts...\n")
NEXT = "StateA"
"""

[StateA]
# Same as State C
action = """
currOutletDac = getValveDacValues()["outletDacValue"]
currInletDac = getValveDacValues()["inletDacValue"]
if currInletDac == inletValveMaxDac:
    startInletValveControl(regularPressure, currOutletDac - 2000)
elif currInletDac == 0:
    if (currOutletDac < 30000) or (currOutletDac > outletValveMaxDac - 1000):  
        startInletValveControl(regularPressure, 30000)
    else:    
        startInletValveControl(regularPressure, currOutletDac + 1000)
else:
    startInletValveControl(regularPressure)
logFunc("Check pressure...\n")
if waitPressureStabilize(setpoint=regularPressure, tolerance=0.01, timeout=6, checkInterval=5, lockCount=3):
    logFunc("Wait for %.1f seconds\n" % stepTime)
    sleep(stepTime)
    logFunc("\nMeasurement starts...\n")
    NEXT = "StateMeasurement"
else:
    sleep(2)
    NEXT = "StateA"
"""

[StateMeasurement]
# Measurement (pulse analysis) step
action = """
logFunc("Run pulse analyzer for %.1f seconds...\n" % measurementTime)
startTime = TimeStamp()
triggerPulseAnalyzerAll("analyze_CFADS")
runTime = TimeStamp()-startTime
printInterval = 10
while runTime < measurementTime:
    if runTime > printInterval:
        logFunc("Pulse analyzer has run for %.1f seconds...\n" % runTime)
    runTime = TimeStamp()-startTime
    sleep(printInterval)
result = getPulseResultDict("analyze_CFADS")
result.update({"resultDate": strftime("%Y-%m-%d", localtime()), 
               "resultTime": strftime("%H:%M:%S", localtime())
               })
fileDataFunc(result)

logFunc("\nState A starts...\n")
NEXT = "StateA"
"""

[StateDone]
action="""
GC.close()
setValveMask(0)
startInletValveControl(140, 30000)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""