[_Laser Selection]
laser1 = "1 - 1602 nm"
laser2 = "2 - 1651 nm"
#laser3 = "3 - 1567nm"
#laser4 = "4 - 1392nm"

[_Ripple Lines]
Line_1 = 0.25,0.05,0.35,0.05
Line_2 = 0.55,0.30,0.65,0.30
Line_3 = 0.75,0.35,0.85,0.35
Line_4 = 1.15,0.45,1.25,0.45

[_PZT Tuning Ranges]
Main1 = 425, 575
Saddle = 1075, 1225
Horizontal = 1525, 1675
Polarization = 2025, 2175
Focus = 2500, 2650
Vertical = 2975, 3125
Main2 = 3425, 3575

[_Current Tuning Ranges]
Main1 = 425, 575
Saddle = 925, 1075
Horizontal = 1500,1650
Polarization = 2025, 2175
Focus = 2475, 2625
Vertical = 2950,3100
Main2 = 3425, 3575

[_Macro Environment]
action = """
import time
import types

rda = self.rdAnalyzer
ma  = self.modeAnalyzer
FreqConverter.loadWarmBoxCal()
FreqConverter.loadHotBoxCal()
FreqConverter.centerTuner(32768)
rda.setRdThreshold(16350)
for i in range(8):
    vLaser = i+1
    Driver.wrDasReg("PZT_OFFSET_VIRTUAL_LASER%d" % vLaser,0)
rda.onRefresh()
Driver.startEngine()
graphType = None

sequenceNumbers = {'Wavelength Scan':       [3,4],
                   'Align Cavity':          [5,6],
                   'Sidemode Optimization': [5,6]}
laserTemp = {'Scope Explorer': [21.3, 17.9]}

                   
def currentLaserSelection():
    return 1 + self.combo_box_laser.GetCurrentSelection()

def stopAcquisition():
    Driver.wrDasReg("SPECT_CNTRL_STATE_REGISTER","SPECT_CNTRL_IdleState")
    time.sleep(0.5)

def startSequence(seqNum):
    SpectrumCollector.startSequence('%d' % seqNum)

def setLaserLocking(enable):
    setFPGAbits("FPGA_RDMAN","RDMAN_OPTIONS",[("LOCK_ENABLE",bool(enable))])
    
def setDither(enable):
    self.checkbox_dither_enable.SetValue(bool(enable))
    setFPGAbits("FPGA_RDMAN","RDMAN_OPTIONS",[("DITHER_ENABLE",bool(enable))])
    
def setActiveSlopes(up,down):
    setFPGAbits("FPGA_RDMAN","RDMAN_OPTIONS",[("UP_SLOPE_ENABLE",up)])
    setFPGAbits("FPGA_RDMAN","RDMAN_OPTIONS",[("DOWN_SLOPE_ENABLE",down)])

def setActiveLaser(laserNum):
    laserMask = 1<<(laserNum-1)
    setFPGAbits("FPGA_INJECT","INJECT_CONTROL",[("LASER_SELECT",laserNum-1)])
    setFPGAbits("FPGA_INJECT","INJECT_CONTROL",[("MODE",0)])
    setFPGAbits("FPGA_INJECT","INJECT_CONTROL",[("LASER_CURRENT_ENABLE",laserMask)])
    setFPGAbits("FPGA_INJECT","INJECT_CONTROL",[("MANUAL_LASER_ENABLE",laserMask)])

def turnOffLasers():
    setFPGAbits("FPGA_INJECT","INJECT_CONTROL",[("MODE",0)])
    for i in range(4):
        laserNum = i+1
        Driver.wrDasReg("LASER%d_CURRENT_CNTRL_STATE_REGISTER" % laserNum,"LASER_CURRENT_CNTRL_DisabledState")

def setLaserTemperature(laserNum,setpoint):
    Driver.wrDasReg("LASER%d_TEMP_CNTRL_STATE_REGISTER" % laserNum,"TEMP_CNTRL_EnabledState")
    Driver.wrDasReg("LASER%d_TEMP_CNTRL_USER_SETPOINT_REGISTER" % laserNum,setpoint)
    
def setTuner(rampParams=None,ditherParams=None,slopes=None):
    if rampParams is not None:
        sweepLow,winLow,winHigh,sweepHigh = rampParams
        Driver.wrDasReg("TUNER_SWEEP_RAMP_LOW_REGISTER", sweepLow)
        Driver.wrDasReg("TUNER_WINDOW_RAMP_LOW_REGISTER", winLow)
        Driver.wrDasReg("TUNER_WINDOW_RAMP_HIGH_REGISTER", winHigh)
        Driver.wrDasReg("TUNER_SWEEP_RAMP_HIGH_REGISTER", sweepHigh)
    if ditherParams is not None:
        sweepLow,winLow,winHigh,sweepHigh = ditherParams
        Driver.wrDasReg("TUNER_SWEEP_DITHER_LOW_OFFSET_REGISTER", sweepLow)
        Driver.wrDasReg("TUNER_WINDOW_DITHER_LOW_OFFSET_REGISTER", winLow)
        Driver.wrDasReg("TUNER_WINDOW_DITHER_HIGH_OFFSET_REGISTER", winHigh)
        Driver.wrDasReg("TUNER_SWEEP_DITHER_HIGH_OFFSET_REGISTER", sweepHigh)
    if slopes is not None:
        up,down = slopes
        Driver.wrFPGA("FPGA_TWGEN","TWGEN_SLOPE_UP",up)
        Driver.wrFPGA("FPGA_TWGEN","TWGEN_SLOPE_DOWN",down)
        
def waitForAcqStart():
    while Driver.rdDasReg("SPECT_CNTRL_STATE_REGISTER")!= _value("SPECT_CNTRL_RunningState"):
        time.sleep(0.5)
        
"""

[Lasers off]
action="""
self.panel_ringdown_inputs.Show(True)
self.panel_modeview_inputs.Show(False)
self.panel_ripple_inputs.Show(False)
self.panel_ringdown_outputs.Show(True)
self.notebook_setup([self.notebook_graphs_ringdowns])
ma.stop()
rda.start()
stopAcquisition()
time.sleep(1.0)
turnOffLasers()
"""

[Wavelength Scan]
action="""
self.panel_ringdown_inputs.Show(True)
self.panel_modeview_inputs.Show(False)
self.panel_ripple_inputs.Show(True)
self.panel_ringdown_outputs.Show(True)
self.notebook_setup([self.notebook_graphs_ringdowns,self.notebook_graphs_ripple_analysis])
ma.stop()
rda.start()
seqNum = sequenceNumbers["Wavelength Scan"][currentLaserSelection()-1]
stopAcquisition()
self.timer.Stop()
rda.clearBuffers()
rda.setGraphPoints(20000)
rda.graphAgainstWavenumber()
setLaserLocking(True)
setDither(True)
setActiveSlopes(True,False)
setTuner(rampParams = [500,1500,64000,65000], ditherParams=[2500,2000,2000,2500], slopes=[2200,25000])
rda.onRefresh()
if graphType != 'wavenumber':
    self.onClear()
    graphType = 'wavenumber'
startSequence(seqNum)
self.timer.Start(100)
waitForAcqStart()
"""

[Align Cavity]
action="""
self.panel_ringdown_inputs.Show(True)
self.panel_modeview_inputs.Show(False)
self.panel_ripple_inputs.Show(False)
self.panel_ringdown_outputs.Show(True)
self.notebook_setup([self.notebook_graphs_ringdowns])
ma.stop()
rda.start()
seqNum = sequenceNumbers["Align Cavity"][currentLaserSelection()-1]
stopAcquisition()
self.timer.Stop()
rda.clearBuffers()
rda.setGraphPoints(20000)
rda.graphAgainstTime()
setLaserLocking(True)
setDither(True)
setActiveSlopes(True,False)
setTuner(rampParams = [500,1500,64000,65000], ditherParams=[2500,2000,2000,2500], slopes=[2200,25000])
rda.onRefresh()
if graphType != 'time':
    self.onClear()
    graphType = 'time'
startSequence(seqNum)
self.timer.Start(100)
waitForAcqStart()
"""

[Scope Explorer]
action="""
self.panel_ringdown_inputs.Show(True)
self.panel_modeview_inputs.Show(False)
self.panel_ripple_inputs.Show(False)
self.panel_ringdown_outputs.Show(True)
self.notebook_setup([self.notebook_graphs_ringdowns])
ma.stop()
rda.start()
laserNum = currentLaserSelection()
setpoint = laserTemp["Scope Explorer"][laserNum-1]
stopAcquisition()
time.sleep(1.0)
self.timer.Stop()
rda.clearBuffers()
rda.setGraphPoints(20000)
rda.graphAgainstTime()
setActiveLaser(laserNum)
setLaserTemperature(laserNum,setpoint)
setLaserLocking(False)
setDither(False)
setActiveSlopes(False,False)
setTuner(rampParams = [500,1500,49000,50000], slopes=[1500,1500])
rda.onRefresh()
if graphType != 'time':
    self.onClear()
    graphType = 'time'
self.timer.Start(100)
"""

[Sidemode Optimization]
action="""
self.panel_ringdown_inputs.Show(True)
self.panel_modeview_inputs.Show(False)
self.panel_ripple_inputs.Show(False)
self.panel_ringdown_outputs.Show(True)
self.notebook_setup([self.notebook_graphs_ringdowns])
ma.stop()
rda.start()
seqNum = sequenceNumbers["Sidemode Optimization"][currentLaserSelection()-1]
stopAcquisition()
self.timer.Stop()
rda.clearBuffers()
rda.setGraphPoints(20000)
rda.graphAgainstRingdown()
setLaserLocking(True)
setDither(False)
setActiveSlopes(True,False)
setTuner(rampParams = [500,1500,49000,50000], slopes=[1500,1500])
rda.onRefresh()
if graphType != 'ringdown':
    self.onClear()
    graphType = 'ringdown'
startSequence(seqNum)
self.timer.Start(100)
waitForAcqStart()
"""

[Mode View]
action="""
self.panel_ringdown_inputs.Show(False)
self.panel_modeview_inputs.Show(True)
self.panel_ripple_inputs.Show(False)
self.panel_ringdown_outputs.Show(False)
self.notebook_setup([self.notebook_graphs_mode_scan,self.notebook_graphs_mode_amplitudes])
rda.stop()
ma.start('laserCurrent')
"""