from Builder import Builder, run_command
import json
import os
from pybuilder.errors import BuildFailedException
import shutil
import textwrap
import time

ISCC_WIN7 = 'c:/program files (x86)/Inno Setup 5/ISCC.exe'
INSTALLER_SCRIPTS_DIR = ('src', 'main', 'python', 'Tools', 'Release', 'InstallerScriptsWin7')
RELEASE_VERSION_FILE = ('src', 'main', 'python', 'AddOns', 'VaporizerCleaner', 'release_version.py')
INTERNAL_VERSION_FILE = ('src', 'main', 'python', 'AddOns', 'VaporizerCleaner', 'setup_version.py')
JSON_VERSION_FILE = ('src', 'main', 'python', 'AddOns', 'VaporizerCleaner', 'version.json')

class BuildVaporizerCleaner(Builder):
    def __init__(self, project, logger):
        super(BuildVaporizerCleaner, self).__init__(project, logger)
        logger.info("Instantiating BuildVaporizerCleaner")

    def initialize(self, product):
        project = self.project
        logger = self.logger
        assert product.lower() == "vaporizer_cleaner"
        project = self.project
        version_file = os.path.join(*JSON_VERSION_FILE)
        self.handle_version(version_file)
        logger.info("Distribution directory: %s" % project.get_property("dir_dist"))

    def publish(self):
        project = self.project
        logger = self.logger
        logger.info("Running py2exe in %s", project.expand_path("$dir_dist"))
        reports_dir = project.expand_path("$dir_reports")
        if not os.path.exists(reports_dir):
            os.mkdir(reports_dir)
        output_file_path = os.path.join(reports_dir, "build_vap_clean_exe")
        with open(output_file_path, "w") as output_file:
            cmd = "doit build_vap_clean_exe --build_dir %s" % project.expand_path("$dir_dist/AddOns/VaporizerCleaner")
            stdout, return_code = run_command(cmd, True)
            output_file.write(stdout)
            if return_code != 0:
                raise BuildFailedException("Error while executing run_py2exe/build_vap_clean_exe")
        shutil.move(project.expand_path("$dir_dist/AddOns/VaporizerCleaner/dist"), project.expand_path("$dir_dist/VaporizerCleanerExe"))

    def _remove_python_version_files(self):
        try:
            os.remove(os.path.join(*RELEASE_VERSION_FILE))
        except WindowsError:
            pass
        try:
            os.remove(os.path.join(*INTERNAL_VERSION_FILE))
        except WindowsError:
            pass

    def _make_python_version_files(self):
        project = self.project
        official = project.get_property("official")
        product = project.get_property("product")
        contents = textwrap.dedent("""\
        # autogenerated by PyBuilder, %s

        def versionString():
            return '%s'

        def versionNumString():
            return '%s'

        def buildType():
            # Empty string indicates official release
            return '%s'
        """)
        src_file = os.path.join(*JSON_VERSION_FILE)
        git_hash, _ = run_command("git.exe log -1 --pretty=format:%H")
        ver = {"git_hash":git_hash[:8]}

        target = os.path.join(*RELEASE_VERSION_FILE) if official else os.path.join(*INTERNAL_VERSION_FILE)
        with open(src_file,"r") as inp:
            ver.update(json.load(inp))
        with open(target,"w") as outp:
            outp.write(contents % (time.asctime(), self._verAsString(product, ver),
                                   self._verAsNumString(ver), '' if official else 'INTERNAL'))

    def after_prepare(self):
        logger = self.logger
        logger.info("Writing version files into source tree")
        self._remove_python_version_files()
        self._make_python_version_files()
