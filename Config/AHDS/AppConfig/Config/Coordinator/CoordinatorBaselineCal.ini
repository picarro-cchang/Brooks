# 2010-09-09 alex lee  This coordinator is used to run a baseline cal.

[UserEditableParams]
num_disp_params = 0
0 = "measTime", "Measurement time (minutes)", "60"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/Log/BaselineCal/BaselineCal"

[Output]


[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action="""
import shutil
#LOW_LOSS_VAR_THRES = 0.1
#LOSS_VAR_BUFFER_SIZE = 2
LOW_LOSS_VAR_THRES = 0.5
LOSS_VAR_BUFFER_SIZE = 1
GUI.popPause("Verify that Dry Nitrogen is hooked to the instrument Inlet and flowing", "Check Dry Nitrogen")
stopDataLog("BaselineCal")
measTime = float(editParamDict["measTime"])*60.0
concList = ["uLossMin", "uLossMax", "uLossVar"]
setMeasBuffer("analyze_baseline_cal", concList, 100)
outputDir = "/home/picarro/I2000/InstrConfig/Integration/BaselineCal"
toolDir = "/home/picarro/I2000/InstrConfig/Integration/BaselineTools"
rdfDir = os.path.join(outputDir, "RDF")
if not os.path.exists(outputDir): os.makedirs(outputDir)
if not os.path.exists(rdfDir): os.makedirs(rdfDir)
t = 0
sleepTime = 1.0
logFunc("Waiting for fitter to report concentrations")
NEXT = "StateWaitForFitterReporting"
"""

[StateWaitForFitterReporting]
action="""
meas = measGetBufferFirst()
if not meas:
    if t % 30 == 0: logFunc("\n%3.1f s " % (t*sleepTime))
    t += 1
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateWaitForFitterReporting"
else:
    logFunc("\n")
    clearMeasBuffer()
    uLossVarBuffer = []
    t = 0
    logFunc("Making sure inlet sample has low concentration\n")
    NEXT = "StateStartDryN2"
"""

[StateStartDryN2]
action="""
meas = measGetBufferFirst()
if not meas:
    if t % 30 == 0: logFunc("\n%3.1f s " % (t*sleepTime))
    t += 1
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateStartDryN2"
else:
    logFunc('\n')
    uLossVarBuffer.append(meas["uLossVar"])
    if len(uLossVarBuffer) >= LOSS_VAR_BUFFER_SIZE:
        uLossVarBuffer = uLossVarBuffer[-LOSS_VAR_BUFFER_SIZE:]
        uLossVarMean = mean(uLossVarBuffer)
        if uLossVarMean < LOW_LOSS_VAR_THRES:
            backupName = time.strftime("Backup_%Y%m%d_%H%M%S", time.localtime())
            backupDir = os.path.join(outputDir, backupName)
            
            for f in os.listdir(rdfDir):
                try:
                    os.remove(os.path.join(rdfDir, f))
                except:
                    pass
            for f in os.listdir(outputDir):
                if f.startswith("FitterConfig") or f.endswith(".png") or (f.startswith("RD") and f.endswith(".h5")):
                    try:
                        if not os.path.exists(backupDir): os.makedirs(backupDir)
                        sourcePath = os.path.join(outputDir, f)
                        destPath = os.path.join(backupDir, f)
                        os.rename(sourcePath, destPath)
                    except:
                        pass
            startDataLog("BaselineCal")
            endTime = time.time() + measTime
            logFunc("Start measuring...\n")
            NEXT = "StateWaitTillDone"
        else:
            NEXT="StateStartDryN2"
    else:
        NEXT="StateStartDryN2"
"""

[StateWaitTillDone]
action="""
if time.time() > endTime:
    logFunc("Run Time completed.\n")
    NEXT = "StatePostProcess"
else:
    sleep(sleepTime)
    NEXT = "StateWaitTillDone"
"""

[StatePostProcess]
action="""
h5FileList = []
for f in os.listdir(rdfDir):       
    try:
        sourcePath = os.path.join(rdfDir, f)
        destPath = os.path.join(outputDir, f)
        os.rename(sourcePath, destPath)
        h5FileList.append(destPath)
    except:
        pass
logFunc("%s\n" % h5FileList)
def runFitter():
    os.system("/home/picarro/I2000/Host/Fitter/Fitter.py -v -c %s" % os.path.join(toolDir, "FitteriCO2Baseline.ini"))
    #os.system("/home/picarro/I2000/Host/Fitter/Fitter.py -v -c %s" % os.path.join(toolDir, "FitteriH2OBaseline.ini"))
    
def runPostProcess():
    os.chdir(toolDir)
    os.system("postProcess.py")
    for f in os.listdir("."):                    
        if f.endswith(".png"):
            sourcePath = os.path.join(toolDir, f)
            destPath = os.path.join(outputDir, f)
            os.rename(sourcePath, destPath)
        elif f.startswith("FitterConfig"):
            sourcePath = os.path.join(toolDir, f)
            newf = "FitterConfig_Proposed.ini"
            destPath = os.path.join(outputDir, newf)
            os.rename(sourcePath, destPath)
            GUI.popPause("Replace \"/home/picarro/I2000/InstrConfig/Calibration/InstrCal/FitterConfig.ini\" with \"%s\" if fit results look OK.\n" \
                % destPath, "Update FitterConfig.ini")
        
import threading
thread1 = threading.Thread(target=runFitter)
thread1.setDaemon(True)
thread1.start()

sleep(10)
fitter = FitterRPC(50181)
fitter.setH5Files(h5FileList)
fitter.fitSpectrum()
sleep(30)
fitter.maximizeViewer()
sleep(5)
grabScreenshot(os.path.join(outputDir, "FitterOutput.png"))
sleep(5)
fitter.restoreViewer()
thread2 = threading.Thread(target=runPostProcess)
thread2.setDaemon(True)
thread2.start()
NEXT = "StateDone"
"""

[StateDone]
action="""
stopDataLog("BaselineCal")
GUI.popInfo("Baseline calibration completed after running %.2f minutes" % (measTime/60.0), "Baseline Calibration Completed")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
