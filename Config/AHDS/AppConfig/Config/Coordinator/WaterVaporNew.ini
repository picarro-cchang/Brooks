[Mode]
inject_mode=automatic

[ValveSequence]
step0=0xFF,0x00,4 #shut all valves for 1 sec
step1=0xFF,0x02,80 #80 pump out
#step1=0xFF,0x02,180 #pump out; vacuum leak test
step2=0xFF,0x01,40 #let dry gas in inlet
#step2=0xFF,0x04,5000 #connect DAS; vacuum leak test
#step3=0x00,0x00,0 #break; vacuum leak teast
step3=0xFF,0x02,40 #[was flow through to DAS]
step4=0xFF,0x02,120 #pump out
step5=0xFF,0x01,40 #40 let dry gas in inlet
step6=0xFF,0x04,40 #40 flow through to DAS
step7=0xFF,0x02,160 #160 pump out
step8=0xFF,0x01,40 #let dry gas in inlet
step9=0xFF,0x04,40 #flow through to DAS
step10=0xFF,0x02,240 #pump out
step11=0xFF,0x00,0 #preload with N2 before injection
step12=0xFF,0x00,0 #partial pump out to leave low pressure N2 preload
step13=0xFF,0x00,0 #all closed
step14=0x00,0x00,0 #break
step15=0xFF,0x00,240 #stay under vacuum after liquid injected
step16=0xFF,0x01,4 #pulse inlet for 1/4 sec
step17=0xFF,0x00,120 #wait for 30 sec
step18=0xFF,0x01,14 #[was pulse inlet for 1 sec]
step19=0xFF,0x01,4 #[was close inlet for 2 sec]
step20=0xFF,0x01,18 #open inlet for remainder of 6 sec total
step21=0xFF,0x00,300 #wait for 90 sec (2 min total wait)
step22=0xFF,0x04,840 #sample for 3.5 min
step23=0xFF,0x00,4 #all closed
step24=0x00,0x00,0 # break
step25=0xFF,0x02,65535 # keep pumping out
step26=0xFF,0x02,65535
step27=0xFF,0x02,65535

[Output]
column1=D_1816_mean
format1=%10.3f
title1=d(18_16)
column2=D_DH_mean
format2=%10.3f
title2=d(D_H)
column3=H2O_mean
format3=%10.0f
title3=H2O

[Setup]
initial=StateStart
final=StateDone
error=StateError
script=CoordinatorScripts.py

[StateStart]
action="""
analysisTimeout = 120   # Seconds to wait for pulse analysis
calLoopMax = 5          # Number of calibration samples
measurementTime = 21600 # Seconds for measurement (between calibrations)
setValveStep(-1)
sendValveSequence(config["ValveSequence"])
AUTOSAMPLER = Autosampler()
AUTOSAMPLER.open()
HOST = "localhost"
PORT = 51020
FITTER = Comms(HOST,PORT)
NEXT="StateAssertStartInit"
"""

[StateAssertStartInit]
action="""
if calLoopMax == 0:
    NEXT = "StateStartMeasurement"
else:
    logFunc("Asserting start, cleaning evaporator\n")
    AUTOSAMPLER.assertStart()
    setValveStep(0)
    calLoopIter = 0
    t = 0
    NEXT="StateWaitEvaporatorClean"
"""

[StateWaitEvaporatorClean]
action="""
if getValveStep() != 14:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    logFunc("\nEvaporatorClean completed\n")
    t = 0
    logFunc("\nFlushing fitter results buffer\n")
    NEXT="StateFlushFitResultsBuffer"
"""

[StateFlushFitResultsBuffer]
action="""
FITTER.measGetBufferFirst()
if FITTER.results:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateFlushFitResultsBuffer"
else:
    NEXT="StateAssertInject"
"""

[StateAssertInject]
action="""
logFunc("Asserting inject, waiting for injected\n")
AUTOSAMPLER.assertInject()
AUTOSAMPLER.flush()
NEXT="StateWaitForInjected"
"""

[StateWaitForInjected]
action="""
if not AUTOSAMPLER.getInjected():
    logFunc(".")
    sleep(0.2)
    NEXT="StateWaitForInjected"
else:
    logFunc("\nReceived injected\n")
    AUTOSAMPLER.deassertInject()
    AUTOSAMPLER.deassertStart()
    NEXT="StateGetAutosamplerLog"
"""

[StateGetAutosamplerLog]
action="""
logString = AUTOSAMPLER.getLog().split("\n")
logDate = logString[0].strip().split()[-2]
logTime = logString[0].strip().split()[-1]
sampleLineNum = -1
try:
    while True:
        injLine = logString[sampleLineNum].strip().split()
        if len(injLine) == 4:
            if injLine[1] == "Sample" and injLine[3]=="Injected":
                injTime = injLine[0]
                sampleNum = int(injLine[2])
                break
        sampleLineNum -= 1
except:
    sampleNum = 0
    injTime = logTime
dateTime  = calcInjectDateTime(logDate,logTime,injTime)
NEXT="StateSendValveSequence"
"""

[StateSendValveSequence]
action="""
logFunc("Start gas sample preparation\n")
setValveStep(15)
t = 0
NEXT="StateWaitForStartAnalysis"
"""

[StateWaitForStartAnalysis]
action="""
if getValveStep() != 22:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForStartAnalysis"
else:
    NEXT="StateStartBatchAnalysis"
"""

[StateStartBatchAnalysis]
action="""
logFunc("\nFlushing measurement buffer\n")
while True:
    FITTER.measGetBufferFirst()
    if not FITTER.results:
        break
logFunc("\nSending sample to analyzer\n")
t = 0
NEXT="StateCollectDataInPulse"
"""

[StateCollectDataInPulse]
action="""
if getValveStep() != 24:
    FITTER.measGetBufferFirst()
    if not FITTER.results:
        if t % 30 == 0: logFunc("\n%3d s " % t)
        t += 1
        logFunc(".")
        sleep(1.0)
        NEXT="StateCollectDataInPulse"
    else:
        fileDataFunc("%s%10d%10.3f%10.3f%10.0f\n" % (FITTER.results["date"], sampleNum,
            float(FITTER.results["D_1816"]),float(FITTER.results["D_DH"]),float(FITTER.results["H2O"])))
        NEXT="StateCollectDataInPulse"
else:
    logFunc("\nGas sampling complete\n")
    calLoopIter += 1
    if calLoopIter < calLoopMax:
        NEXT="StateAssertStart"
    else:
        t = 0
        waitSteps = 0
        NEXT="StateWaitForLastCalAnalysisDone"
"""

[StateAssertStart]
action="""
logFunc("Asserting start, cleaning evaporator, waiting for results\n")
AUTOSAMPLER.assertStart()
setValveStep(0)
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
"""

[StateWaitForAnalysisDone]
action = """
FITTER.measGetBufferFirst()
if not FITTER.results:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForAnalysisDone"
    else:
        fileDataFunc("%s%10d\n" % (dateTime, sampleNum))
        logFunc("\nAnalysis timeout\n")
        NEXT="StateWaitEvaporatorClean"
else:
    report = formatOutput(FITTER.results,config["Output"])
    fileDataFunc("%s%10d%s\n" % (dateTime, sampleNum, report))
    logFunc("\nAnalysis done\n")
    NEXT="StateWaitEvaporatorClean"
"""

[StateWaitForLastCalAnalysisDone]
action = """
FITTER.measGetBufferFirst()
if not FITTER.results:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForLastCalAnalysisDone"
    else:
        fileDataFunc("%s%10d\n" % (dateTime, sampleNum))
        logFunc("\nAnalysis timeout\n")
        NEXT="StateStartMeasurement"
else:
    report = formatOutput(FITTER.results,config["Output"])
    fileDataFunc("%s%10d%s\n" % (dateTime, sampleNum, report))
    logFunc("\nAnalysis done\n")
    NEXT="StateStartMeasurement"
"""

[StateStartMeasurement]
action = """
setValveStep(25)
startMeasTime = time.time()
stopMeasTime = startMeasTime + measurementTime
logFunc("Flushing measurement buffer\n")
while True:
    FITTER.measGetBufferFirst()
    if not FITTER.results:
        break
logFunc("Starting measurement of ambient air\n")
logFunc("Measurement will be complete at %s\n" % time.ctime(stopMeasTime))
NEXT="StateGetMeasurementResult"
"""

[StateGetMeasurementResult]
action = """
if time.time() > stopMeasTime:
    NEXT="StateAssertStartInit"
else:
    FITTER.measGetBufferFirst()
    if not FITTER.results:
        sleep(1.0)
        NEXT="StateGetMeasurementResult"
    else:
        fileDataFunc("%s%10s%10.3f%10.3f%10.0f\n" % (FITTER.results["date"], "Ambient",
            float(FITTER.results["D_1816"]),float(FITTER.results["D_DH"]),float(FITTER.results["H2O"])))
        NEXT="StateGetMeasurementResult"
"""

[StateDone]
action="""
AUTOSAMPLER.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
#@-node:stan.20080528133953.2:@thin Coordinator.ini
#@-leo
