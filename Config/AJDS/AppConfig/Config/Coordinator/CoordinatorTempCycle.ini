# 2010-05-13 sdavis     This coordinator is used to run a temp cycle.
# 2010-09-02 alex lee   Updated it with new procedure

[UserEditableParams]
num_disp_params = 0
0 = "sweepIncr", "Increment Sweep Temperature", "0.014"
1 = "numCycles", "Number of cycles", "2"
2 = "extraTime", "Extra time to run temperature cycling (minutes)", "0"
3 = "rmDataPer", "Data to be removed from the beginning of zoomed-in plots (%)", "10"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/TempCycle/TempCycle"

[Output]


[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action="""
sweepIncr = float(editParamDict["sweepIncr"])
numCycles = float(editParamDict["numCycles"])
extraTime = float(editParamDict["extraTime"])*60.0
rmDataPer = float(editParamDict["rmDataPer"])/100.0
origCutoffTemp = rdDasReg("HEATER_CUTOFF_REGISTER")
sweepMax = 65.0
sweepMin = 40.0
newCutoffTemp = 68.0
wrDasReg("HEATER_CUTOFF_REGISTER", newCutoffTemp)

logFunc("Old heater cutoff temperature = %.2f; new heater cutoff temperature = %.2f.\n" % (origCutoffTemp, newCutoffTemp))
        
# It takes 5 seconds for each temperature increment
runTime = extraTime + 5.0*((sweepMax - sweepMin)/sweepIncr)*2*(numCycles+0)
runTimeMin = runTime/60.0
stopDataLog("CavityTempCycle")
sleepTime = 1.0
logFunc("Minutes to run: %.2f\n" %(runTimeMin))
logFunc("Max Sweep Temperature: %s\n" %(sweepMax))
logFunc("Min Sweep Temperature: %s\n" %(sweepMin))
logFunc("Increment Sweep Temperature: %s\n" %(sweepIncr))
logFunc("Starting Temperature Cycle\n")
concList = ["CavityTemp", "uLossMean", "uLossShot2Shot", "CavityPressure", "tunerMean"]
tempCycleData = {"measTime":[]}
for conc in concList:
    tempCycleData[conc] = []
setMeasBuffer("analyze_cavity_temp_cycle", concList, 100)
t = 0
logFunc("Waiting for fitter to report concentrations")
NEXT = "StateWaitForFitterReporting"
"""

[StateWaitForFitterReporting]
action="""
meas = measGetBufferFirst()
if not meas:
    if t % 30 == 0: logFunc("\n%3.1f s " % (t*sleepTime))
    t += 1
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateWaitForFitterReporting"
else:
    logFunc("\n")
    clearMeasBuffer()
    NEXT = "StateStartTempCycle"
"""

[StateStartTempCycle]
action="""
origMax,origMin,origIncr,origState = setTempCycleRegisters(sweepMax, sweepMin, sweepIncr)
if origMax:
    endTime = time.time() + runTime
    logFunc("\nTemperature registers set for cavity temperature cycling\n")
    startDataLog("CavityTempCycle")
    NEXT = "StateWaitTillDone"
else:
    logFunc("\nCavity temperature cycling failed\n")
    GUI.popWarning("Cavity temperature cycling failed", "Cavity Temperature Cycling Failed")
    NEXT = "StateDone"
"""

[StateWaitTillDone]
action="""
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    NEXT="StateWaitTillDone"
else:
    for key in tempCycleData:
        tempCycleData[key].append(meas[key])
    if time.time() > endTime:
        logFunc("Run Time completed.\n")
        NEXT = "StateReport"
    else:
        NEXT = "StateWaitTillDone"
"""

[StateReport]
action="""
stopDataLog("CavityTempCycle")

endTime = time.strftime("_%Y%m%d_%H%M%S", time.localtime(tempCycleData["measTime"][-1]))
id = getAnalyzerId()
newTime, formatter = unixTimeArray2MatplotTimeArray(array(tempCycleData["measTime"]))

for figNum in range(2):
    fig = pyplot.figure(figNum)
    fig.subplots_adjust(hspace = 0.9)
    title = id + ("_CavityTempCycling_Figure%d_" % (figNum+1)) + endTime
    pyplot.title(title)
    for subplotNum in range(3):
        sp = fig.add_subplot(3,1,subplotNum+1)
        if subplotNum == 0:
            dataKey = concList[0]
        else:
            dataKey = concList[figNum*2+subplotNum]
        plotWithMatplotTime(sp, newTime, tempCycleData[dataKey], "Time", dataKey, formatter, 7)
    pyplot.savefig("/home/picarro/I2000/InstrConfig/Integration/CavityTempCycle/%s" % (title+".png"))

# Make another set of plots with the first 10% data removed
totalNumData = len(newTime)
rmNumData = int(rmDataPer*totalNumData)
for figNum in range(2):
    fig = pyplot.figure(figNum+2)
    fig.subplots_adjust(hspace = 0.9)
    title = id + ("_CavityTempCycling_Figure%d_ZOOMEDIN_" % (figNum+1)) + endTime
    pyplot.title(title)
    for subplotNum in range(3):
        sp = fig.add_subplot(3,1,subplotNum+1)
        if subplotNum == 0:
            dataKey = concList[0]
        else:
            dataKey = concList[figNum*2+subplotNum]
        plotWithMatplotTime(sp, newTime[rmNumData:], tempCycleData[dataKey][rmNumData:], "Time", dataKey, formatter, 7)
    pyplot.savefig("/home/picarro/I2000/InstrConfig/Integration/CavityTempCycle/%s" % (title+".png"))
    
GUI.popInfo("Cavity temperature cycling completed after running %.2f minutes" % runTimeMin, "Cavity Temperature Cycling Completed")
NEXT = "StateDone"
"""

[StateDone]
action="""
restoreTempCycleRegisters(origMax,origMin,origIncr,origState)
wrDasReg("HEATER_CUTOFF_REGISTER", origCutoffTemp)
logFunc("Set heater cutoff temperature back to %.2f.\n" % origCutoffTemp)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
