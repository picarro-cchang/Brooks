# 2010-05-10 alex  This coordinator is used to calibrate the analyzer 
# 2010-09-01 sze   Automated generation of calibration values
# 2010-09-03 greg  The pressure cal coordinator was copied over to use as a template for the etalonTempSensitivity Coordinator
[UserEditableParams]
num_disp_params = 0

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/InstrConfig/Integration/EtalonTempSensitivity/EtalonTempSensitivity"

[Output]
EtalonTemp="Etalon Temp",%10.3f
freqOffset="Freq. Offset",%10.4f
date_time="date_time",%12.1f
slope="slope",%10.6f
intercept="intercept",%10.4f
comment="comment",%32s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
import os
from numpy import min, max, polyfit, polyval
from os import makedirs
from os.path import exists, join 
from time import strftime, time
from pylab import plot, grid, xlabel, ylabel, title, savefig
from shutil import copy

GUI.popPause("Verify that the instrument is open to room air", "")

outputDir = "/home/picarro/SI2000/InstrConfig/Integration/EtalonTempSensitivity"
if not exists(outputDir): makedirs(outputDir)
timeStr = strftime("%Y%m%d_%H%M%S")
WBCalFName="/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/Beta2000_WarmBoxCal.ini"
WBCalNoTempCorrectionFName="/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/Beta2000_WarmBoxCal_NoTempCorrection.ini"
def protfit(x,y):
    if len(x)>0:
        xmin, xmax, xptp = min(x), max(x), ptp(x)
        ymin, ymax, yptp = min(y), max(y), ptp(y)
        win = (y>=ymin+0.1*yptp) & (y<=ymax-0.1*yptp) & (x>=xmin+0.1*xptp) & (x<=xmax-0.1*xptp)
        if sum(win)>0:
            return polyfit(x[win],y[win],1)
    return (0.0,0.0)

s='DEL /home/picarro/SI2000/InstrConfig/Calibration/InstrCal/Beta2000_WarmBoxCal_active.ini'
os.system(s)
s='DEL '+WBCalNoTempCorrectionFName
os.system(s)
copy(WBCalFName, join(outputDir,"SavedWarmBoxCal_" + timeStr + ".ini"))
copy(WBCalFName,WBCalNoTempCorrectionFName)

WBCfg=getConfig(WBCalFName)
WBCfgNTC=getConfig(WBCalNoTempCorrectionFName)

for i in range(8):
    secName = 'VIRTUAL_PARAMS_%d' % i
    if secName in WBCfg:
        WBCfgNTC[secName]['TEMP_SENSITIVITY']=0.0
WBCfgNTC.write()
loadWarmBoxCal(WBCalNoTempCorrectionFName)
print "After loadWarmBoxCal"

for i in range(8):
    secName = 'VIRTUAL_PARAMS_%d' % i
    if secName in WBCfg:
        fileDataFunc(dict(comment="Virtual Laser %d" % i))
        fileDataFunc(dict(comment="ANGLE_INCREMENT=%s"%WBCfg[secName]['ANGLE_INCREMENT']))
        fileDataFunc(dict(comment="LINEAR_MODEL_SLOPE=%s"%WBCfg[secName]['LINEAR_MODEL_SLOPE']))
        fileDataFunc(dict(comment="TEMP_SENSITIVITY=%s"%WBCfg[secName]['TEMP_SENSITIVITY']))

stopDataLog("EtalonTempSensitivity")
sleepTime = 10

setMeasBuffer("analyze_EtalonTempSensitivity", ['freq_offset','EtalonTemp'], 100)

clearMeasBuffer()
logFunc('Waiting for fitter to start\n')
NEXT = "StateWaitMeasuring"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
if not meas or ("freq_offset" not in meas):
    sleep(10.0)
    logFunc('.')
    NEXT="StateWaitMeasuring"
else:
    logFunc('Starting Etalon Temperature Sweep\n')
    NEXT = "StateStartSweep"
"""

[StateStartSweep]
action = """
tMax=45.35
tMin=44.65
tIncr=0.002
cycleTime=2*((tMax-tMin)/tIncr)*5    #Time per cycle in seconds
numCycles=2   #<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<
#numCycles=0.02
wrDasReg('WARM_BOX_TEMP_CNTRL_SWEEP_MAX_REGISTER',  tMax)
wrDasReg('WARM_BOX_TEMP_CNTRL_SWEEP_MIN_REGISTER', tMin)
wrDasReg('WARM_BOX_TEMP_CNTRL_SWEEP_INCR_REGISTER', tIncr)
wrDasReg('WARM_BOX_TEMP_CNTRL_STATE_REGISTER', 'TEMP_CNTRL_SweepingState')
sleep(5.0)
startDataLog("EtalonTempSensitivity")
freqOffsetBuf=[]
EtalonTempBuf=[]
slopeBuffer=[]
interceptBuffer=[]
startTime=time()
NEXT = "StateMeasureData"
"""

[StateMeasureData]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateMeasureData"
else:
    logFunc('.')
    freqOffsetBuf.append(meas["freq_offset"])
    EtalonTempBuf.append(meas["EtalonTemp"])
    fit = protfit(asarray(EtalonTempBuf),asarray(freqOffsetBuf))
    slopeBuffer.append(fit[0])
    interceptBuffer.append(fit[1])
    fileDataFunc(dict(EtalonTemp=EtalonTempBuf[-1],
                      freqOffset=freqOffsetBuf[-1],
                      date_time=meas["measTime"],
                      slope=slopeBuffer[-1],
                      intercept=interceptBuffer[-1]))
    if time()>(startTime+numCycles*cycleTime):
        NEXT="StateWriteResults"
    else:
        NEXT="StateMeasureData"
"""

[StateWriteResults]
action="""
for i in range(8):
    secName = 'VIRTUAL_PARAMS_%d' % i
    if secName in WBCfg:
        (dict(comment="Virtual Laser %d" % i))
        angleIncr=float(WBCfg[secName]['ANGLE_INCREMENT'])
        linearModelSlope=float(WBCfg[secName]['LINEAR_MODEL_SLOPE'])
        FCT=fit[0]
        TS=FCT*angleIncr/linearModelSlope
        WBCfg[secName]['TEMP_SENSITIVITY']="%10.8f"%TS
WBCfg.write()

copy(WBCalFName,join(outputDir,"calculatedWarmBoxCal_" + timeStr + ".ini"));

for i in range(8):
    secName = 'VIRTUAL_PARAMS_%d' % i
    if secName in WBCfg:
        fileDataFunc(dict(comment="Virtual Laser %d" % i))
        fileDataFunc(dict(comment="TEMP_SENSITIVITY=%s"%WBCfg[secName]['TEMP_SENSITIVITY']))


plot(EtalonTempBuf,freqOffsetBuf,'.',EtalonTempBuf,polyval(fit,EtalonTempBuf))

grid(True)
xlabel('Etalon Temp. C')
ylabel('freq. offset')
title('Slope = %.4f, Intercept = %.4f' % (fit[0],fit[1]))
savefig(join(outputDir,"EtalonTemperatureSensitivity" + timeStr + ".png"))
NEXT="StateDone"
"""

[StateDone]
action="""
wrDasReg('WARM_BOX_TEMP_CNTRL_STATE_REGISTER', 'TEMP_CNTRL_EnabledState')
stopDataLog("EtalonTempSensitivity")
sleep(1.0)
GUI.popInfo("Etalon Temperature Sensitivity Complete","Etalon Temperature Sensitivity Coordinator")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
