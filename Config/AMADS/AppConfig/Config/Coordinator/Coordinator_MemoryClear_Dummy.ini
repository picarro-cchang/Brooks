[Mode]
inject_mode=automatic

[Files]
output = "HBDS01_IsoWater"
sequence = "c:/windows/PicarroSeq.txt"
prefix = "P"

[ValveSequence]
steps="""
init:
    0xFF,0x00,12     #shut all valves for 1 sec
    0xFF,0x02,12    #evacuate remainder of last sample
afterWetFlush:
    0xFF,0x01,4    #flush with dry carrier
    0xFF,0x02,4   #evacuate carrier
    0xFF,0x01,4    #flush with dry carrier
    0xFF,0x04,4    #flow through to DAS
    0xFF,0x02,4   #evacuate carrier
    0xFF,0x01,4    #flush with dry carrier
    0xFF,0x04,4    #flow through to DAS
    0xFF,0x02,4   #evacuate carrier
    0xFF,0x00,4
breakForInjection:
    0x00,0x00,0     #break
samplePrep:
    0xFF,0x00,12   #equilibrate under vacuum after injection
    0xFF,0x01,12     #pulse carrier
    0xFF,0x00,12   #equilibrate at low pressure
    0xFF,0x01,12    #finish fill with carrier
equilibrate:
    0xFF,0x00,12   #equilibrate wet mixture
sample:
    0xFF,0x04,12   #sample to DAS
    0xFF,0x00,12     #all closed
done:
    0x00,0x00,0     #break
WFmeasure:
    0xFF,0x04,12   #measure flush to DAS
WFgap:
    0xFF,0x00,12   #gap between flush pulses
    0xFF,0x04,12   #enormous flush to DAS
WFmiddle:
    0x00,0x00,0     #break
WFend:    
    0xFF,0x00,12    #wait for DAS inlet valve to close
    0xFF,0x06,12   #evacuate vaporizer and DAS inlet
WFdone:
    0x00,0x00,0     #break
septumVent:
    0xFF,0x02,12   # pump out old sample
    0xFF,0x01,12    # vent with carrier gas
septumChange:
    0x00,0x00,0
"""
[Output]
line="Line",%6s
analysis="Analysis",%10s
timeCode="Time Code",%22s
port = "Port",%15s
measNum = "Meas Nr",%8d
D_1816_mean="d(18_16)Mean",%14.3f
D_DH_mean="d(D_H)Mean",%14.3f
H2O_mean="H2O_Mean",%14.0f
ignore="Ignore",%8d
Good="Good",%5d
Identifier 1="Identifier 1",%40s
Identifier 2="Identifier 2",%40s
gasConfig="Gas Configuration",%20s
DAYS_SINCE_JAN_mean="days_Mean",%14.5f
D_1816_std_dev="d(18_16)_SD",%14.3f
D_DH_std_dev="d(D_H)_SD",%14.3f
H2O_std_dev="H2O_SD",%14.0f
D_1816_slope="d(18_16)_Sl",%14.3f
D_DH_slope="d(D_H)_Sl",%14.3f
H2O_slope="H2O_Sl",%14.2f
trayName="Tray",%10s
sampleNum="Sample",%8s
jobNum="Job",%8d
methodName="Method",%10s

[Setup]
initial=StateStart
final=StateDone
error=StateError
# script=CoordinatorScripts.py

[Trays]
tray1=MT1-Frnt
tray2=MT1-Rear

[StateStart]
action="""
# This section is likely to be adjusted
# N = 2; M = 2
maxWetFlushIter = 2
maxWetFlushInject = 2
InletValveNom = 30000
InletValveLow = 10000
lowPressure = 17.5
nomPressure = 35
highPressure = 140

# Initial values
currentSampleNum = -1
currentTrayName  = ""
lineNum = 0
wetFlushIter = 1
wetFlushInject = 0
measNum = 0

# Timeout spec
analysisTimeout = 120

# Initial pressure and inlet valve position
setValveDacValue("inlet", InletValveNom)
setCavityPressureSetPoint(nomPressure)
    
sendValveSequence(config["ValveSequence"])
setValveStep("none")
AUTOSAMPLER = DummyAutosampler()
AUTOSAMPLER.open()
#HOST = "localhost"
#PORT = 51020
#FITTER = Comms(HOST,PORT)
#GUI.setStatusText("")
NEXT="StateAssertStartInit"
"""

[StateAssertStartInit]
action="""
logFunc("Asserting start, cleaning evaporator\n")
AUTOSAMPLER.assertStart()
setValveStep("init")
t = 0
NEXT="StateWaitEvaporatorClean"
"""

[StateWaitEvaporatorClean]
action="""
if not atValveStep("breakForInjection"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    t = 0
    logFunc("\nFlushing fitter results buffer\n")
    #FITTER.clearPulseBuffer()
    NEXT="StateFlushFitResultsBuffer"
"""

[StateFlushFitResultsBuffer]
action="""
NEXT="StateGoInject"
"""

[StateGoInject]
action="""
logFunc("\nWaiting for injected\n")
AUTOSAMPLER.assertInject()
AUTOSAMPLER.flush()
t = 0
NEXT="StateWaitForInjected"
"""

[StateWaitForInjected]
action="""
if not AUTOSAMPLER.getInjected():
    logFunc(".")
    sleep(0.2)
    NEXT="StateWaitForInjected"
else:
    logFunc("\nReceived injected\n")
    AUTOSAMPLER.deassertInject()
    AUTOSAMPLER.deassertStart()
    NEXT="StateCheckNewSample"
"""

[StateCheckNewSample]
action="""
logString = AUTOSAMPLER.getLog()
logDate, logTime, injTime, trayName, sampleNum, jobNum, methodName = parseAutosamplerLog(logString)
logFunc("sampleNum = %d, trayName = %s\n" %(sampleNum, trayName))
if currentSampleNum != sampleNum or currentTrayName != trayName:
    logFunc("New sample detected\n")
    incrAnalysisNumber()
    currentSampleNum = sampleNum
    currentTrayName  = trayName
    wetFlushIter = 1
    wetFlushInject = 0
    measNum = 0
    
updateASDict = True    
if wetFlushIter > maxWetFlushIter:
    NEXT="StateNormalMeasurement"
else:
    wetFlushInject += 1
    logFunc("wetFlushIter = %d, wetFlushInject = %d\n" %(wetFlushIter, wetFlushInject))
    if wetFlushInject >= maxWetFlushInject:
        wetFlushIter += 1
        wetFlushInject = 0
        NEXT="StateWFSamplePrep"
    else:
        updateASDict = False
        AUTOSAMPLER.assertStart()
        NEXT="StateGoInject"
        
if updateASDict:
    seqNum = getAnalysisNumber()
    analysis = "P-%d" % seqNum   
    lineNum += 1
    measNum += 1    
    date, time = calcInjectDateTime(logDate,logTime,injTime)
    timeCode = date + " " + time
    gasConfig = "H2O"
    autosampDict = dict(line=lineNum,analysis=analysis,timeCode=timeCode,gasConfig=gasConfig,measNum=measNum,
        date=date,time=time,trayName=trayName,sampleNum=sampleNum,jobNum=jobNum,methodName=methodName)        
"""
        
[StateWFSamplePrep]
action="""
setValveStep("samplePrep")    
NEXT="StateWFEquil"  
"""
    
[StateWFEquil]
action="""
if not atValveStep("equilibrate"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWFEquil"
else:
    logFunc("\nStarting WF gas equilibration\n")
    t = 0
    setValveDacValue("inlet", InletValveLow)
    setCavityPressureSetPoint(lowPressure)
    NEXT="StateWFMeasure"
""" 

[StateWFMeasure]
action="""
if not atValveStep("sample"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWFMeasure"
else:
    logFunc("\nStarting WF measurement\n")
    t = 0
    setValveStep("WFmeasure")
    NEXT="StateWFGap"
""" 

[StateWFGap]
action="""
if not atValveStep("WFgap"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWFGap"
else:
    logFunc("\nReaching WF gap\n")
    AUTOSAMPLER.assertStart()
    waitSteps = 0
    t = 0
    setValveDacValue("inlet", InletValveNom)
    setCavityPressureSetPoint(highPressure)
    NEXT="StateWaitForAnalysisDoneInGap"
""" 

[StateWaitForAnalysisDoneInGap]
action="""
results = {}
results["Good"] = True
results.update(autosampDict)
results["ignore"] = -2
fileDataFunc(results)
logFunc("\nWF Analysis done\n")
NEXT="StateWFMiddle"
"""

[StateWFMiddle]
action="""
if not atValveStep("WFmiddle"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWFMiddle"
else:
    logFunc("\nReaching WF middle\n")
    t = 0
    setValveDacValue("inlet", 0)
    setValveStep("WFend")
    NEXT="StateWFDone"
""" 

[StateWFDone]
action="""
if not atValveStep("WFdone"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWFDone"
else:
    logFunc("\nReaching WF done\n")
    t = 0
    setValveStep("afterWetFlush")
    NEXT="StateWaitEvaporatorClean"
""" 

[StateNormalMeasurement]
action ="""
setValveStep("samplePrep")    
NEXT="StateWaitForEquil" 
"""

[StateWaitForEquil]
action="""
if not atValveStep("equilibrate"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForEquil"
else:
    logFunc("\nStarting gas equilibration\n")
    t = 0
    setValveDacValue("inlet", InletValveNom)
    setCavityPressureSetPoint(nomPressure)
    NEXT="StateWaitForSample"
""" 

[StateWaitForSample]
action="""
if not atValveStep("sample"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForSample"
else:
    NEXT="StateStartBatchAnalysis"
"""

[StateStartBatchAnalysis]
action="""
logFunc("\nSending sample to analyzer\n")
t = 0
NEXT="StateWaitForGasSamplingDone"
"""

[StateWaitForGasSamplingDone]
action="""
if not atValveStep("done"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForGasSamplingDone"
else:
    logFunc("\nGas sampling complete\n")
    t = 0
    NEXT="StateCheckChangeSeptum"
"""

[StateCheckChangeSeptum]
action="""
if GUI.getChangeSeptumButtonState():
    NEXT="StateAssertStart"
else: # Change septum requested
    setValveStep("septumVent")
    NEXT = "StateChangeSeptum"
"""

[StateChangeSeptum]
action ="""
if not atValveStep("septumChange"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateChangeSeptum"
else:
    logFunc("\nReady to change septum\n")
    GUI.setChangeSeptumButtonText("Septum Changed")
    GUI.enableChangeSeptumButton()
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateNotifyChangeSeptum]
action="""
GUI.setStatusText(" CHANGE SEPTUM: Press 'Septum Changed' when complete.")
sleep(0.8)
NEXT="StateNotifyChangeSeptumFlash"
"""

[StateNotifyChangeSeptumFlash]
action="""
if not GUI.getChangeSeptumButtonState():
    NEXT="StateChangeSeptumDone"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateChangeSeptumDone]
action="""
GUI.setStatusText("")
GUI.setChangeSeptumButtonText("Change Septum")
GUI.enableChangeSeptumButton()
NEXT="StateAssertStart"
"""

[StateAssertStart]
action="""
logFunc("Asserting start, cleaning evaporator, waiting for results\n")
AUTOSAMPLER.assertStart()
setValveStep("init")
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
"""

[StateWaitForAnalysisDone]
action="""
results = {}
results["Good"] = True
results.update(autosampDict)
results["ignore"] = 0
fileDataFunc(results)
logFunc("\nAnalysis done\n")
NEXT="StateWaitEvaporatorClean"
"""

[StateDone]
action="""
AUTOSAMPLER.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
