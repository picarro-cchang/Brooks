# 2010-09-24 alex           Created
# 2011-02-08 alex/eric  onMask = 33 and offMask = 32 because for 4-species valve #6 must be on all the time to run this test. For other types of analyzer it doesn't matter is valve #6 is on.

[Mode]
inject_mode=automatic

[Files]
output = "/Picarro/G2000/InstrConfig/Integration/RiseFallTime"

[Output]
riseTime="Rise Time (sec)",%10.4f
fallTime="Fall Time (sec)",%10.4f
meanRiseTime="Mean Rise Time (sec)",%10.4f
meanFallTime="Mean Fall Time (sec)",%10.4f

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
from os import makedirs
from os.path import exists, join
from time import strftime

parentDir = "/Picarro/G2000/InstrConfig/Integration/RiseFallTime"
outputDir = strftime(parentDir + "/%Y%m%d_%H%M%S")
if not exists(outputDir): makedirs(outputDir)

setValveMask(32)
sleepTime = 1.0
stayPeakTime = 20.0
stableDataPoints = 30
stableThres = 0.2
firstRun = True
bufferSize = 100
riseTimeBuffer = []
fallTimeBuffer = []

analyzerType = getAnalyzerType()
if analyzerType in ["CBDS"]:
    analyzeScript = "analyze_iCO2"
    concLabel = "12CO2"
elif analyzerType in ["CHADS"]:
    analyzeScript = "analyze_CHADS"
    concLabel = "12CO2"
elif analyzerType in ["CFIDS", "CFJDS"]:
    analyzeScript = "analyze_FBDS"
    concLabel = "12CO2"
elif analyzerType in ["AEDS"]:
    analyzeScript = "analyze_NH3"
    concLabel = "NH3"
elif analyzerType in ["CKADS"]:
    analyzeScript = "analyze_CKADS"
    concLabel = "CO2"
elif analyzerType in ["CFADS", "CFDDS", "CFKADS", "CFKBDS", "CFHADS"]:
    analyzeScript = "analyze_CFADS"
    concLabel = "CO2"
else:
    logFunc("!!ERROR: INVALID ANALYZER TYPE!!\n")
    raise Exception, "Invalid analyzer type"
setMeasBuffer(analyzeScript, [concLabel], 500)
clearMeasBuffer()
logFunc('Waiting for fitter to start\n')
NEXT = "StateWaitMeasuring"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
if not meas or (concLabel not in meas):
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateWaitMeasuring"
else:
    logFunc('\n')
    clearMeasBuffer()
    CO2Buffer = []
    timeBuffer = []
    logFunc('Start measuring\n')
    NEXT = "StateMeasLowCO2"
"""

[StateMeasLowCO2]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateMeasLowCO2"
else:
    CO2Buffer.append(meas[concLabel])
    timeBuffer.append(meas["measTime"])
    if len(CO2Buffer) <= stableDataPoints:
        NEXT="StateMeasLowCO2"
    else:
        meanCO2 = mean(CO2Buffer[-stableDataPoints:])
        stdCO2 = std(CO2Buffer[-stableDataPoints:])
        logFunc("Stability index = %.3f\n" % (stdCO2/meanCO2))
        if stdCO2/meanCO2 < stableThres:
            if firstRun:
                firstRun = False
                sleep(stayPeakTime)
                CO2Buffer = []
                timeBuffer = []
                setValveMask(33)
                sleep(3)
                clearMeasBuffer()
                logFunc('Injecting CO2 to cavity\n')
                NEXT = "StateMeasHighCO2"
            else:
                startCO2 = CO2Buffer[0]
                endCO2 = CO2Buffer[-1]
                CO2Diff = startCO2 - endCO2
                per10Fall = startCO2 - 0.1 * CO2Diff
                per90Fall = startCO2 - 0.9 * CO2Diff
                per10Idx = [i for i in range(len(CO2Buffer)) if CO2Buffer[i] <= per10Fall][0]
                per90Idx = [i for i in range(len(CO2Buffer)) if CO2Buffer[i] >= per90Fall][-1]
                logFunc("\n\n10 percent value: %.3f, 90 percent value: %.3f\n\n" % (per10Fall, per90Fall))
                fallTime = timeBuffer[per90Idx] - timeBuffer[per10Idx]
                fallTimeBuffer.append(fallTime)
                fallTimeBuffer = fallTimeBuffer[-bufferSize:]
                meanFallTime = mean(fallTimeBuffer)
                fileDataFunc(dict(fallTime=fallTime, meanFallTime=meanFallTime))
                sleep(stayPeakTime)
                CO2Buffer = []
                timeBuffer = []
                setValveMask(33)
                sleep(3)
                clearMeasBuffer()
                logFunc('Injecting CO2 to cavity\n')
                NEXT = "StateMeasHighCO2"
        else:
            NEXT="StateMeasLowCO2"
"""

[StateMeasHighCO2]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateMeasHighCO2"
else:
    CO2Buffer.append(meas[concLabel])
    timeBuffer.append(meas["measTime"])
    if len(CO2Buffer) <= stableDataPoints:
        NEXT="StateMeasHighCO2"
    else:
        meanCO2 = mean(CO2Buffer[-stableDataPoints:])
        stdCO2 = std(CO2Buffer[-stableDataPoints:])
        logFunc("Stability index = %.3f\n" % (stdCO2/meanCO2))
        if stdCO2/meanCO2 < stableThres:
            startCO2 = CO2Buffer[0]
            endCO2 = CO2Buffer[-1]
            CO2Diff = endCO2 - startCO2
            per10Rise = startCO2 + 0.1 * CO2Diff
            per90Rise = startCO2 + 0.9 * CO2Diff
            per10Idx = [i for i in range(len(CO2Buffer)) if CO2Buffer[i] >= per10Rise][0]
            per90Idx = [i for i in range(len(CO2Buffer)) if CO2Buffer[i] <= per90Rise][-1]
            logFunc("\n\n10 percent value: %.3f, 90 percent value: %.3f\n\n" % (per10Rise, per90Rise))
            riseTime = timeBuffer[per90Idx] - timeBuffer[per10Idx]
            riseTimeBuffer.append(riseTime)
            riseTimeBuffer = riseTimeBuffer[-bufferSize:]
            meanRiseTime = mean(riseTimeBuffer)
            fileDataFunc(dict(riseTime=riseTime, meanRiseTime=meanRiseTime))
            sleep(stayPeakTime)
            CO2Buffer = []
            timeBuffer = []
            setValveMask(32)
            sleep(3)
            clearMeasBuffer()
            logFunc('Injecting N2 to cavity\n')
            NEXT = "StateMeasLowCO2"
        else:
            NEXT="StateMeasHighCO2"
"""

[StateDone]
action="""
setValveMask(32)
moveWildToDir(join(parentDir,"*.csv"),outputDir)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
