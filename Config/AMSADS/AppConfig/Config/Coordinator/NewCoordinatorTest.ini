[Mode]
inject_mode=automatic

[ValveSequence]
steps="""
init:
    0xFF,0x00,4     #shut all valves for 1 sec
    0xFF,0x02,120   #pump out
    # 0xFF,0x02,180 #pump out; vacuum leak test
    0xFF,0x00,0     #40 let dry gas in inlet
    # 0xFF,0x04,5000 #connect DAS; vacuum leak test
    # 0x00,0x00,0   #break; vacuum leak teast
    0xFF,0x00,0     #160 [was flow through to DAS]
break1:
    0x0,0x00,00     #break for wet flush
wetFlush:
    0xFF,0x01,40    #40 let dry gas in inlet
    0xFF,0x04,40    #40 flow through to DAS
    0xFF,0x02,120   #160 pump out
wetFlushDone:
    0x0,0x00,00     #end break for wet flush
lastClean:
    0xFF,0x01,40    #40 let dry gas in inlet
    0xFF,0x04,40    #40 flow through to DAS
    0xFF,0x02,240   #240 pump out
    # 0xFF,0x00,0   #preload with N2 before injection
    0xFF,0x00,0     #partial pump out to leave low pressure N2 preload
    0xFF,0x00,0     #all closed
lastCleanDone:
    0x00,0x00,0     #break
samplePrep:
    0xFF,0x00,200   #280 stay under vacuum after liquid injected
    0xFF,0x01,4     #pulse inlet for 1/4 sec
    0xFF,0x00,120   #wait for 30 sec
    0xFF,0x01,14    #[was pulse inlet for 1 sec]
    0xFF,0x01,4     #[was close inlet for 2 sec]
    0xFF,0x01,18    #open inlet for remainder of 6 sec total
    0xFF,0x00,240   #360 wait for 90 sec (2 min total wait)
sample:
    0xFF,0x04,1000  #1320 sample for 2.5 min
    0xFF,0x00,4     #all closed
done:
    0x00,0x00,0     #break
septumVent:
    0xFF,0x02,120   # pump out old sample
    0xFF,0x01,40    # vent with carrier gas
septumChange:
    0x00,0x00,0
"""
[Output]
date="Date",%10s
time="Time",%10s
trayName="Tray",%10s
sampleNum="Sample",%8s
jobNum="Job",%8d
methodName="Method",%10s
D_1816_mean="d(18_16)Mean",%14.3f
D_DH_mean="d(D_H)Mean",%14.3f
Good="Good",%14d
H2O_mean="H2O_Mean",%14.0f
DAYS_SINCE_JAN_mean="days_Mean",%14.5f
D_1816_std_dev="d(18_16)_SD",%14.3f
D_DH_std_dev="d(D_H)_SD",%14.3f
H2O_std_dev="H2O_SD",%14.0f
D_1816_slope="d(18_16)_Sl",%14.3f
D_DH_slope="d(D_H)_Sl",%14.3f
H2O_slope="H2O_Sl",%14.2f
dummy=" ",%2s
description="Description",%-40s

[Setup]
initial=StateStart
final=StateDone
error=StateError
# script=CoordinatorScripts.py

[Trays]
tray1=MT1-Frnt
tray2=MT1-Rear

[StateStart]
action="""
sendValveSequence(config["ValveSequence"])
setValveStep("none")
#AUTOSAMPLER = Autosampler()
#AUTOSAMPLER.open()
analysisTimeout = 120
maxWetFlushIter = 2
HOST = "localhost"
PORT = 51020
#FITTER = Comms(HOST,PORT)
GUI.setStatusText("")
NEXT="StateAssertStartInit"
"""

[StateAssertStartInit]
action="""
logFunc("Asserting start, cleaning evaporator\n")
#AUTOSAMPLER.assertStart()
setValveStep("init")
t = 0
NEXT="StateWaitEvaporatorClean"
"""

[StateWaitEvaporatorClean]
action="""
if not atValveStep("break1"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    logFunc("\nEvaporatorClean completed\n")
    t = 0
    logFunc("\nFlushing fitter results buffer\n")
            #FITTER.clearPulseBuffer()
    NEXT="StateFlushFitResultsBuffer"
"""

[StateFlushFitResultsBuffer]
action="""
#FITTER.getBufferFirst()
NEXT="StateStartWetFlushes"
"""

[StateStartWetFlushes]
action="""
logFunc("Starting wet flushes\n")
#setValveStep("init")
wetFlushIter=0
NEXT="StateWetFlushContinue"
"""

[StateWetFlushContinue]
action="""
if wetFlushIter<maxWetFlushIter:
    NEXT="StateWetFlushInject"
else:
    NEXT="StateLastCleaning"
"""

[StateWetFlushInject]
action="""
logFunc("Asserting inject for wet flush %d, waiting for injected\n" % (wetFlushIter+1,))
#AUTOSAMPLER.assertInject()
#AUTOSAMPLER.flush()
t = 0
NEXT="StateWaitForWetFlushInjected"
"""

[StateWaitForWetFlushInjected]
action="""
logFunc("\nReceived wet flush injected\n")
#AUTOSAMPLER.deassertInject()
setValveStep("wetFlush")
t = 0
NEXT="StateWaitEndFlushLoop"
"""

[StateWaitEndFlushLoop]
action="""
if not atValveStep("wetFlushDone"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEndFlushLoop"
else:
    setValveStep("break1")
    wetFlushIter=wetFlushIter+1
    logFunc("\nWetFlushLoop %d completed\n" % (wetFlushIter,))
    NEXT="StateWetFlushContinue"
"""

[StateLastCleaning]
action="""
logFunc("Performing last cleaning\n")
setValveStep("lastClean")
t = 0
NEXT="StateWaitForLastCleaning"
"""

[StateWaitForLastCleaning]
action="""
if not atValveStep("lastCleanDone"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForLastCleaning"
else:
    NEXT="StateAssertInject"
"""

[StateAssertInject]
action="""
logFunc("\nAsserting inject, waiting for injected\n")
#AUTOSAMPLER.assertInject()
#AUTOSAMPLER.flush()
NEXT="StateWaitForInjected"
"""

[StateWaitForInjected]
action="""
logFunc("\nReceived injected\n")
#AUTOSAMPLER.deassertInject()
#AUTOSAMPLER.deassertStart()
NEXT="StateGetAutosamplerLog"
"""

[StateGetAutosamplerLog]
action="""
#logString = AUTOSAMPLER.getLog()
#logDate, logTime, injTime, trayName, sampleNum, jobNum, methodName = parseAutosamplerLog(logString)
#date, time = calcInjectDateTime(logDate,logTime,injTime)
#autosampDict = dict(date=date,time=time,trayName=trayName,sampleNum=sampleNum,jobNum=jobNum,methodName=methodName)
NEXT="StateSendValveSequence"
"""

[StateSendValveSequence]
action="""
logFunc("Start gas sample preparation\n")
setValveStep("samplePrep")
t = 0
NEXT="StateWaitForStartAnalysis"
"""

[StateWaitForStartAnalysis]
action="""
if not atValveStep("sample"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForStartAnalysis"
else:
    NEXT="StateStartBatchAnalysis"
"""

[StateStartBatchAnalysis]
action="""
logFunc("\nSending sample to analyzer\n")
t = 0
NEXT="StateWaitForGasSamplingDone"
"""

[StateWaitForGasSamplingDone]
action = """
if not atValveStep("done"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForGasSamplingDone"
else:
    logFunc("\nGas sampling complete\n")
    t = 0
    NEXT="StateCheckChangeSeptum"
"""

[StateCheckChangeSeptum]
action="""
if GUI.getChangeSeptumButtonState():
    NEXT="StateAssertStart"
else: # Change septum requested
    setValveStep("septumVent")
    NEXT = "StateChangeSeptum"
"""

[StateChangeSeptum]
action = """
if not atValveStep("septumChange"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateChangeSeptum"
else:
    logFunc("\nReady to change septum\n")
    GUI.setChangeSeptumButtonText("Septum Changed")
    GUI.enableChangeSeptumButton()
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateNotifyChangeSeptum]
action="""
GUI.setStatusText(" CHANGE SEPTUM: Press 'Septum Changed' when complete.")
sleep(0.8)
NEXT="StateNotifyChangeSeptumFlash"
"""

[StateNotifyChangeSeptumFlash]
action="""
if not GUI.getChangeSeptumButtonState():
    NEXT="StateChangeSeptumDone"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateChangeSeptumDone]
action="""
GUI.setStatusText("")
GUI.setChangeSeptumButtonText("Change Septum")
GUI.enableChangeSeptumButton()
NEXT="StateAssertStart"
"""

[StateAssertStart]
action="""
logFunc("Asserting start, cleaning evaporator, waiting for results\n")
#AUTOSAMPLER.assertStart()
setValveStep("init")
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
"""

[StateWaitForAnalysisDone]
action = """
#FITTER.getBufferFirst()
#fileDataFunc(FITTER.results)
logFunc("\nAnalysis done\n")
NEXT="StateWaitEvaporatorClean"
"""

[StateDone]
action="""
#AUTOSAMPLER.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
