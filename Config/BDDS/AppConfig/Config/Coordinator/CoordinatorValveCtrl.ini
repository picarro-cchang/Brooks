[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/Log/IsotopicData/IsotopicData"

[UserEditableParams]
num_disp_params = 2
0 = "flushTime", "N2 Flush Time (seconds)", "30"
1 = "measTime", "Measurement Time (seconds)", "180"

[Output]
reportDate   = "Date"     , %10s
reportTime   = "Time"     , %10s
12CO2        = "12CO2"    , %14.3f
13CO2        = "13CO2"    , %14.3f
Delta        = "Delta"    , %14.3f
Ratio        = "Ratio"    , %14.4f
H2O          = "H2O"      , %14.4f
valPos       = "Position" , %-12s
status       = "Status"   , %-40s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
flushTime = float(editParamDict["flushTime"])
measTime = float(editParamDict["measTime"])
errorCodeMismatch = 64
errorCodeFailSend = 128
errorCodeFailGet = 256
checkPosTimeout = 9
checkPosInterval = 3
portCount = 1
status = ""
# Initialize serial interface for rotary valve
RotValve = SerIntrf(0)
RotValve.open()
# Define FITTER
HOST = "localhost"
PORT = 51020
FITTER = Comms(HOST,PORT)
GUI.setStatusText("")
setValveMask(0)
NEXT = "StateFlush"
"""

[StateFlush]
action = """
port = str(portCount)
logFunc("\nState %s flush starts...\n" % port)

if port == "1":
    setValveMask(3)
else:
    setValveMask(0)
NEXT = "StateValCtrl"
"""

[StateMeasurement]
action = """
if time.time() < stopMeasTime:
    FITTER.measGetBufferFirst(setFloat=True, instrType="iCO2")
    if not FITTER.results:
        sleep(1.0)
        NEXT="StateMeasurement"
    else:
        FITTER.results["reportDate"] = FITTER.results["date"].split()[0]    
        FITTER.results["reportTime"] = FITTER.results["date"].split()[1]
        FITTER.results["valPos"] = port
        FITTER.results["status"] = status
                      #for key in FITTER.results.keys():
                      #   logFunc("%s %s\n" % (key, FITTER.results[key]))
        fileDataFunc(FITTER.results)
        NEXT="StateMeasurement"
else:
    if port == "6":
        portCount = 1
    else:
        portCount += 1
    NEXT = "StateFlush"
"""
    
[StateValCtrl]
action = """
logFunc("Rotary valve: Go to position: %2s\n" % port)
status = ""
try:
    RotValve.sendString("CP")
    cp = RotValve.getLine()
    currPos = cp.split("= ")[-1]
except:
    currPos = "0"
    
if currPos != port:
    try:
        RotValve.sendString("GO%s" % port)
        setRotValveMask(port)
    except:
        status = status + "Failed to send command. "
        logFunc("Rotary valve: Failed to send valve position command via serial port\n")
        setRotValveMask(errorCodeFailSend)

sleep(checkPosInterval)
checkPosTime = checkPosInterval
matchPos = False
getPos = True
while checkPosTime <= checkPosTimeout:
    try:
        RotValve.sendString("CP")
        cp = RotValve.getLine()
        if cp.split("= ")[-1] == port:
            logFunc("Rotary valve: %s - matched\n" % cp)
            matchPos = True
            break
        else:
            logFunc("Rotary valve: %s - not matched (try again)\n" % cp)
            checkPosTime += checkPosInterval
            if checkPosTime <= checkPosTimeout:
                sleep(checkPosInterval)
            else:
                break
    except:
        checkPosTime += checkPosInterval
        if checkPosTime <= checkPosTimeout:
            sleep(checkPosInterval)
        else:
            getPos = False
            break

if not getPos:
    status = status + "Failed to confirm position. "
    logFunc("Rotary valve: Failed to confirm position from serial port\n")
    setRotValveMask(errorCodeFailGet)
elif not matchPos:
    status = status + "Failed to go to desired position. "
    logFunc("Rotary valve: Failed to go to desired position\n")
    setRotValveMask(errorCodeMismatch)

if status == "":
    status = "OK"

if not (getPos and matchPos):
    NEXT = "StateDone"
else:
    sleep(flushTime)
    if port == "1":
        setValveMask(11)
    else:
        setValveMask(8)
    stopMeasTime = time.time() + measTime
    logFunc("\nState %s measurement starts...\n" % port)
    NEXT = "StateMeasurement"
"""

[StateDone]
action="""
setValveMask(0)
RotValve.sendString("GO1")
setRotValveMask("1")
RotValve.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
