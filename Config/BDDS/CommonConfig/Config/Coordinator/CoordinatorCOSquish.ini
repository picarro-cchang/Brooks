# 2011-09-21 Alex Lee   CO Squish coordinator that adjusts FSR in Hot Box
# 2012-05-17 Verified with J.D. and E.L.

[UserEditableParams]
num_disp_params = 0
0 = "measTime", "Measurement time (minutes)", "10"
1 = "fsrThres", "FSR threshold to apply CO Squish (%)", "5"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/InstrConfig/Integration/COSquish/COSquish"

[Output]
timestamp="Timestamp",%12.1f
coSquish ="CO Squish",%10.4f
comment="Comment",%32s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
from shutil import copy2
from os import makedirs
from time import strftime

parentDir = "/home/picarro/SI2000/InstrConfig/Integration/COSquish"
outputDir = strftime(parentDir + "/%Y%m%d_%H%M%S")
if not exists(outputDir): makedirs(outputDir)
hbFile = "/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/Beta2000_HotBoxCal.ini"
savedHbFile = strftime(outputDir + "/Beta2000_HotBoxCal_%Y%m%d_%H%M%S.ini")

analyzerType = getAnalyzerType()
if analyzerType in ["CKADS"]:
    analyzeScript = "analyze_CKADS"
    concList = ["co_squish", "co_pzt_std"]
    fsrKey = "CAVITY_FSR_VLASER_2_NOCHANGE"
elif analyzerType in ["CFKADS", "CFKBDS"]:
    analyzeScript = "analyze_CFKADS"
    concList = ["co_squish", "co_pzt_std"]
    fsrKey = "CAVITY_FSR_CO_Fixed"
else:
    logFunc("!!ERROR: INVALID ANALYZER TYPE!!\n")
    raise Exception, "Invalid analyzer type"
setMeasBuffer(analyzeScript, concList, 500)

hbConfig = configObj(hbFile)
oldFSR = hbConfig.getfloat("AUTOCAL", fsrKey)
measTime = float(editParamDict["measTime"])*60.0
sleepTime = 1.0
stableDataPoints = 5
stableThres = 200
fsrThres = float(editParamDict["fsrThres"])/100.0

clearMeasBuffer()
logFunc('Waiting for fitter to start\n')
NEXT = "StateWaitMeasuring"
"""

[StateWaitMeasuring]
action="""
meas = measGetBufferFirst()
if not meas:
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateWaitMeasuring"
else:
    logFunc('\n')
    clearMeasBuffer()
    pztBuffer = []
    logFunc('Start measuring CO PZT STD\n')
    NEXT = "StateMeasCOPZT"
"""

[StateMeasCOPZT]
action="""
meas = measGetBufferFirst()
if not meas:
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateMeasCOPZT"
else:
    logFunc('\n')
    pztBuffer.append(meas[concList[1]])
    if len(pztBuffer) >= stableDataPoints:
        pztBuffer = pztBuffer[-stableDataPoints:]
        meanPztStd = mean(pztBuffer)
        logFunc("Stability index = %.3f (threshold = %.3f)\n" % (meanPztStd, stableThres))
        if meanPztStd < stableThres:
            startTime = time.time()
            endTime = startTime + measTime
            timeMarks = [0.2, 0.4, 0.6, 0.8, 1.0]
            timeMarkIdx = 0
            clearMeasBuffer()
            squishBuffer = []
            logFunc("Start measuring CO Squish...\n")
            fileDataFunc(dict(comment="Original FSR=%.12f" % oldFSR))
            NEXT = "StateMeasCOSquish"
        else:
            NEXT="StateMeasCOPZT"
    else:
        NEXT="StateMeasCOPZT"
"""

[StateMeasCOSquish]
action = """
if time.time() < endTime:
    if time.time() - startTime >= measTime * timeMarks[timeMarkIdx]:
        logFunc("%.1f%% completed\n" % (timeMarks[timeMarkIdx]*100.0))
        timeMarkIdx += 1
    meas = measGetBufferFirst()
    if not meas:
        sleep(sleepTime)
    else:
        squishBuffer.append(meas[concList[0]])
        fileDataFunc(dict(timestamp=meas["measTime"],
                          coSquish=meas[concList[0]]))
    NEXT="StateMeasCOSquish"
else:
    meanSquish = mean(squishBuffer)
    logFunc("CO Squish Mean = %.3f (threshold = %.3f)\n" % (meanSquish, fsrThres) )
    if abs(meanSquish) > fsrThres:
        GUI.popWarning("Measured CO Squish amplitude %.7f is greater than %.1f%%.\nPlease check the system and try again." % (abs(meanSquish), fsrThres*100.0), "Error")
        NEXT="StateDone"
    else:
        NEXT="StateAdjustFSR"
"""

[StateAdjustFSR]
action = """
copy2(hbFile, savedHbFile)
logFunc("Original HB file saved as: %s\n" % savedHbFile)
newFSR = oldFSR*(1+meanSquish)
fileDataFunc(dict(comment="New FSR=%.7f" % newFSR))
hbConfig.set("AUTOCAL", fsrKey, newFSR)
hbConfig.write()
logFunc("FSR in HB file updated from %.7f to %.7f\n" % (oldFSR, newFSR))
NEXT="StateMoveFiles"
"""

[StateMoveFiles]
action="""
for fileWild in ["*.csv"]:
    try:
        moveWildToDir(join(parentDir,fileWild),outputDir)
    except:
        pass
GUI.popInfo("Please restart analyzer software to apply the new HB calibration.", "Restart required") 
NEXT="StateDone"
"""

[StateDone]
action="""
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""