[Mode]
inject_mode=automatic

[Archiver]
archiveGroupName = Coordinator

[Files]
output = "C:\Picarro\IsotopicData\IsotopicData"
log = "C:\Picarro\IsotopicData\Log\Log"

[UserEditableParams]
num_disp_params = 1
0 = "numSamples", "Total number of samples", "0"
1 = "preTriggerTime", "Pre-trigger time (seconds)", "0.0"
2 = "postTriggerTime", "Post-trigger time (seconds)", "300.0"
3 = "thresRatio", "Threshold ratio above baseline (%)", "1000.0"
4 = "waitTime", "Wait time to clear all pulses (seconds)", "180.0"

[Output]
sampleNum           = "Sample Id"               , %10s
peakNum             = "Peak Number"             , %10s
description         = "Description"             , %40s
startTime           = "Start Time"              , %25s
endTime             = "End Time"                , %10s
H2O_Max             = "Max H2O (ppm)"           , %20.3f
intH2O              = "H2O Integral"            , %20.3f
intHDO              = "HDO Integral"            , %20.3f
CO2_12_Max          = "Max 12CO2 (ppm)"         , %20.3f
int12CO2            = "12CO2 Integral"          , %20.3f
int13CO2            = "13CO2 Integral"          , %20.3f
delta13C            = "d13C calculated"         , %20.3f
crdsDelta           = "d13C weighted Ave CRDS"  , %20.3f
deltaD              = "dD calculated"           , %20.3f
crdsDeltaD          = "dD weighted Ave CRDS"    , %20.3f
GoodFlag            = "Goodness Flag"           , %10s
H2OBase             = "H2O Baseline"            , %20.3f
HDOBase             = "HDO Baseline"            , %20.3f
CO2_12Base          = "12CO2 Baseline"          , %20.3f
CO2_13Base          = "13CO2 Baseline"          , %20.3f
threshold           = "Threshold"               , %20.3f
temp1               = "Temperature 1 (C)"       , %10.3f
temp2               = "Temperature 2 (C)"       , %10.3f
numPoints           = "Number of data points"   , %10d
timeInterval        = "Time interval (seconds)" , %10.3f
Ratio_CO2_H2O_integ = "12CO2/H2O integ ratio"   , %20.3f
startTimeRaw        = "Start Time Raw"          , %20.3f
endTimeRaw          = "End Time Raw"            , %20.3f

[Setup]
initial = StateSetupCostech
final = StateDone
error = StateError

[StateSetupCostech]
action = """
logFunc("Searching Costech interface...\n")
COSTECH = None
COSTECHFound = False
for p in range(2,100):
    if COSTECH:
        COSTECH.close()
        COSTECH = None
    try:
        COSTECH = SerIntrf(p, timeout=1, xonxoff=0)
        sleep(3)
    except:
        continue
    try:
        logFunc("Talking to COM%d...\n"%(p+1))
        COSTECH.sendString("sa")
        status = COSTECH.getLine()
        if "CM-CRDS" in status:
            logFunc("COSTECH found at COM%d...\n"%(p+1))
            COSTECHFound = True
            break
    except:
        pass

if not COSTECHFound:
    logFunc("Costech interface not found.\n")
    if COSTECH:
        COSTECH.close()
        COSTECH = None
    GUI.popWarning("81 Costech interface not found", "81 Costech interface not found")
    raise Exception, "Costech interface not found"

def isValveOn(valIdx):
    if COSTECH:
        COSTECH.sendString("sq")
        status = list(COSTECH.getLine())
        if status[valIdx] == "1":
            return True
        else:
            return False
    else:
        GUI.popWarning("93 Costech interface not found", "93 Costech interface not found")
        raise Exception, "Costech interface not found"

def toggleValve(valIdx):
    if COSTECH:
        COSTECH.sendString("s%d" % valIdx)
        status = COSTECH.getLine()
        logFunc("%s\n" % status)
    else:
        GUI.popWarning("102 Costech interface not found", "102 Costech interface not found")
        raise Exception, "Costech interface not found"

def setValves(onList, offList):
    for v in onList:
        if not isValveOn(v):
            toggleValve(v)
    for v in offList:
        if isValveOn(v):
            toggleValve(v)

def getBufferTemps():
    if COSTECH:
        COSTECH.sendString("se")
        temps = [float(v) for v in COSTECH.getLine().split()]
        return temps
    else:
        GUI.popWarning("119 Costech interface not found", "119 Costech interface not found")
        raise Exception, "Costech interface not found"

# Set up Modbus
import sys
modbusPath = r"C:\Picarro\G2000\ModbusIntrf"
if modbusPath not in sys.path:
    sys.path.append(modbusPath)
import serial
import modbus
import utils
import defines as cst
import modbus_rtu
#ser = serial.Serial(port="COM18", baudrate=9600, bytesize=8, parity=serial.PARITY_NONE, stopbits=1, xonxoff=1)
ser = serial.Serial(port="COM20", baudrate=9600, bytesize=8, parity=serial.PARITY_NONE, stopbits=1, xonxoff=1)
# when paired to CM 398
master = modbus_rtu.RtuMaster(ser)
master.set_timeout(5.0)
master.set_verbose(True)
#logFunc("Remote interface connected on COM18\n")
logFunc("Remote interface connected on COM20\n")
# when paired to CM 398
def trigger():
    master.execute(1, cst.WRITE_SINGLE_REGISTER, 2100, output_value=1)
    logFunc("CM triggered\n")

NEXT = "StatePreheat"
"""

[StatePreheat]
action = """
temps = getBufferTemps()
logFunc("Current temperatures = %.3f, %.3f\n" % tuple(temps))
preheatReady = True
for t in temps:
    if t < 90.0:
        preheatReady = False
        break
if preheatReady:
    NEXT = "StateInit"
else:
    sleep(5)
    NEXT = "StatePreheat"
"""

[StateInit]
action = """
triggerValCode = 16
baseMeasTime = 120.0
deltaOffset = -1000
#deltaSlope = 33558
deltaSlope = 6800
#deltaDOffset = -1067.0335
#deltaDSlope = 1368.8867
deltaDOffset = -1000.0
deltaDSlope = 2429.0


numSamples = int(editParamDict["numSamples"])
preTriggerTime = float(editParamDict["preTriggerTime"])
postTriggerTime = float(editParamDict["postTriggerTime"])
thresRatio = float(editParamDict["thresRatio"]) * 0.01
waitTime = float(editParamDict["waitTime"])

from collections import deque
def calcArea(timeList, concList):
    # Calculate the trapezoidal area
    totalArea = 0.0
    for idx in range(len(timeList)-1):
        totalArea += 0.5*(concList[idx] + concList[idx+1])*(timeList[idx+1] - timeList[idx])
    totalTime = timeList[-1] - timeList[0]
    return totalArea, totalTime

setMeasBuffer("analyze_CHADS", ["peak12_spec", "peak13_spec", "DeltaD_Raw", "12CO2", "13CO2", "H2O", "interval", "DeltaC13_Raw", "peak20_spec", "peak24_spec"], 50)
clearMeasBuffer()
sampleNum = 0
GUI.setStatusText("")
GUI.popPause("Make sure the AutoSampler isolation valve is open (arrow pointing upwards)\n Press \'OK\' to start processing samples")
NEXT = "StateStartSample"
"""

[StateStartSample]
action = """
sampleNum += 1
if sampleNum <= numSamples:
    # Trigger combustion module
    #setFanState(1)
    #setValves([1],[])
    #sleep(0.5)
    #setValves([],[1])
    H2OBaseBuff = []
    HDOBaseBuff = []
    CO2_12BaseBuff = []
    CO2_13BaseBuff = []
    clearMeasBuffer()
    baseEndTime = time.time() + baseMeasTime
    logFunc("Taking baseline measurement for %.2f seconds...\n" % baseMeasTime)
    NEXT = "StateGetBaseMeas"
else:
    NEXT = "StateDone"
"""

[StateGetBaseMeas]
action = """
# Get base concentration
currTime = time.time()
if currTime < baseEndTime:
    results = measGetBufferFirst()
    if not results:
        sleep(0.5)
        NEXT="StateGetBaseMeas"
    else:
        H2OBaseBuff.append(results["peak12_spec"])
        HDOBaseBuff.append(results["peak13_spec"])
        CO2_12BaseBuff.append(results["peak20_spec"])
        CO2_13BaseBuff.append(results["peak24_spec"])
        NEXT="StateGetBaseMeas"
else:
    measH2OBase = mean(H2OBaseBuff)
    measHDOBase = mean(HDOBaseBuff)
    measCO2_12Base = mean(CO2_12BaseBuff)
    measCO2_13Base = mean(CO2_13BaseBuff)
    logFunc("Base measurement: H2O = %.3f, 12CO2 = %.3f, 13CO2 = %.3f\n" % (measH2OBase, measCO2_12Base, measCO2_13Base))
    threshold = 10.0 + abs(measH2OBase)*thresRatio  # Temp change for Water 1/25/2013
    #threshold = 10.0 + abs(measCO2_12Base)*thresRatio
    logFunc("Threshold = %.3f\n" % threshold)
    trigger()
    setValveMask(triggerValCode)
    peakNum = 1
    # De-trigger combustion module
    #setValveMask(0)
    #setFanState(0)
    #setValves([],[1])
    NEXT = "StatePrePulseAnalysis"
"""

[StatePrePulseAnalysis]
action = """
timeBuffer = deque()
IntervalBuffer = deque()
H2OBuffer = deque()
H2OCRDSBuffer = deque()
HDOBuffer = deque()
DeltaDBuffer = deque()
CO2_12Buffer = deque()
CO2_12CRDSBuffer = deque()
CO2_13Buffer = deque()
DeltaBuffer = deque()
clearMeasBuffer()
status = "armed"
lastStatus = ""
endWaitingTime = time.time() + waitTime
temps = getBufferTemps()
logFunc("Detecting Pulses...\n")
NEXT = "StatePulseAnalysis"
"""

[StatePulseAnalysis]
action = """
currTime = time.time()
results = measGetBufferFirst()
if not results:
    sleep(1.0)
    NEXT="StatePulseAnalysis"
else:
    timeBuffer.append(results["measTime"])
    IntervalBuffer.append(results["interval"])
    H2OBuffer.append(results["peak12_spec"])
    H2OCRDSBuffer.append(results["H2O"])
    HDOBuffer.append(results["peak13_spec"])
    DeltaDBuffer.append(results["DeltaD_Raw"])
    CO2_12Buffer.append(results["peak20_spec"])
    CO2_12CRDSBuffer.append(results["12CO2"])
    CO2_13Buffer.append(results["peak24_spec"])
    DeltaBuffer.append(results["DeltaC13_Raw"])
    if lastStatus != status:
        logFunc("Pulse analyzer new status = %s\n" % status)
    if status == "armed":
        lastStatus = "armed"
        while timeBuffer[0] < (timeBuffer[-1] - preTriggerTime):
            timeBuffer.popleft()
            IntervalBuffer.popleft()
            H2OBuffer.popleft()
            HDOBuffer.popleft()
            DeltaDBuffer.popleft()
            CO2_12Buffer.popleft()
            CO2_13Buffer.popleft()
            DeltaBuffer.popleft()
        #if CO2_12Buffer[-1] >= threshold:
        #if H2OBuffer[-1] >= threshold/100:
        if H2OBuffer[-1] >= threshold:
            status = "triggered"
            NEXT="StatePulseAnalysis"
        elif currTime > endWaitingTime:
            NEXT="StateStartSample"
    elif status == "triggered":
        lastStatus = "triggered"
        #if CO2_12Buffer[-1] < threshold:
        #if H2OBuffer[-1] < threshold/100:
        if H2OBuffer[-1] < threshold:
            endTime = time.time() + postTriggerTime
            status = "extended"
            setValveMask(0)
        NEXT="StatePulseAnalysis"
    elif status == "extended":
        lastStatus = "extended"
        if time.time() > endTime:
            NEXT="StatePostPulseAnalysis"
        else:
            NEXT="StatePulseAnalysis"
"""

[StatePostPulseAnalysis]
action = """
startTime = timeBuffer[0]
endTime = timeBuffer[-1]
setLineMarkerColor("red", startTime)
setLineMarkerColor(None, endTime)
results = {}
results["startTime"] = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime(startTime))
results["endTime"] = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime(endTime))
results["numPoints"] = len(CO2_12Buffer)
results["startTimeRaw"] = timeBuffer[0]
results["endTimeRaw"] = timeBuffer[-1]
H2OBase = measH2OBase
HDOBase = measHDOBase
#CO2_12Base = min(measCO2_12Base, min(CO2_12Buffer))
#CO2_13Base = min(measCO2_13Base, min(CO2_13Buffer))
CO2_12Base = measCO2_12Base
CO2_13Base = measCO2_13Base


#H2OBuffer = array(H2OBuffer)
#CO2_12Buffer = array(CO2_12Buffer)-CO2_12Base
#CO2_13Buffer = array(CO2_13Buffer)-CO2_13Base
#H2OBuffer = array(H2OBuffer)-H2OBase
#HDOBuffer = array(HDOBuffer)-HDOBase
H2OBuffer = array(H2OBuffer)
HDOBuffer = array(HDOBuffer)
CO2_12Buffer = array(CO2_12Buffer)
CO2_13Buffer = array(CO2_13Buffer)

H2O_Max = max(H2OCRDSBuffer)
CO2_12_Max = max(CO2_12CRDSBuffer)
IntervalMax = max(array(IntervalBuffer))
GoodFlag = IntervalMax < 1.5

H2O_DeltaD = array(H2OBuffer)*array(DeltaDBuffer)
intH2ODeltaD = calcArea(timeBuffer, H2O_DeltaD)[0]
intH2O, timeInterval = calcArea(timeBuffer, H2OBuffer)
crdsDeltaD = intH2ODeltaD/intH2O

CO2_12_Delta = array(CO2_12Buffer)*array(DeltaBuffer)
int12CO2Delta = calcArea(timeBuffer, CO2_12_Delta)[0]
int12CO2 = calcArea(timeBuffer, CO2_12Buffer)[0]
crdsDelta = int12CO2Delta/int12CO2

int13CO2 = calcArea(timeBuffer, CO2_13Buffer)[0]

intHDO = calcArea(timeBuffer, HDOBuffer)[0]

delta13C =(int13CO2/int12CO2)
delta13C = deltaOffset + delta13C*deltaSlope

deltaD =(intHDO/intH2O)
deltaD = deltaDOffset + deltaD*deltaDSlope

results["intH2O"] = intH2O
results["intHDO"] = intHDO
results["int12CO2"] = int12CO2
results["int13CO2"] = int13CO2
results["delta13C"] = delta13C
results["crdsDelta"] = crdsDelta
results["deltaD"] = deltaD
results["crdsDeltaD"] = crdsDeltaD
results["H2OBase"] = H2OBase
results["HDOBase"] = HDOBase
results["CO2_12Base"] = CO2_12Base
results["CO2_13Base"] = CO2_13Base
results["GoodFlag"] = GoodFlag
results["H2O_Max"] = H2O_Max
results["CO2_12_Max"] = CO2_12_Max
results["timeInterval"] = timeInterval
results["peakNum"] = peakNum
results["sampleNum"] = sampleNum
results["threshold"] = threshold
results["temp1"] = temps[0]
results["temp2"] = temps[1]
results["Ratio_CO2_H2O_integ"] = int12CO2 / intH2O
fileDataFunc(results)
peakNum += 1
NEXT="StatePrePulseAnalysis"
"""

[StateDone]
action="""
#setValveMask(0)
#setFanState(0)
#setValves([],[1])
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
