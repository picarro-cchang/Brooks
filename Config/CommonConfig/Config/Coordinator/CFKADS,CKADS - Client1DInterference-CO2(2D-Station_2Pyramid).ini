############################################################################################################################################
#Date:              Date Modified:          Notes:
#20140531           E.Lai                   CFKADS, CKADS: 1D CO2 Interference - Client
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "analyzer_pressure", "Pressure(Normal or Low)", "Normal"

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/1DInterference_CO2/1DInterference_CO2"

[Output]
peak_14        = peak_14,          %10.4f
b_h2o_pct      = b_h2o_pct,        %10.4f
peak84_raw     = peak84_raw,       %10.4f
CH4            = CH4,              %10.4f
CO             = CO,               %10.4f
CO2            = CO2,              %10.4f
Gas            = Gas,              %10s
Range          = Range,            %10s
SeqIdx         = SeqIdx,           %5f
SetFlow1       = SetFlow1,         %10.2f
SetFlow2       = SetFlow2,         %10.2f
SetFlow3       = SetFlow3,         %10.2f
SetFlow4       = SetFlow4,         %10.2f
ActFlow1       = ActFlow1,         %10.2f
ActFlow2       = ActFlow2,         %10.2f
ActFlow3       = ActFlow3,         %10.2f
ActFlow4       = ActFlow4,         %10.2f
Comment        = Comment,          %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from pylab import*
from ctypes import*
from os import makedirs
from os.path import exists, join 
from configobj import ConfigObj
import subprocess
import time

#PSAPI.DLL
psapi = windll.psapi
#Kernel32.DLL
kernel = windll.kernel32
#AnalyzerType
analyzerType = getAnalyzerType()

#User selects analyzer type
if analyzerType in ["CFKADS", "CFKBDS"]:
    logFunc("Instrument is a 4 species (CO2,CH4,H2O,CO) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateStartParameters"
elif analyzerType in ["CKADS"]:
    logFunc("Instrument is a 3 species (CO2,H2O,CO) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateStartParameters"
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateStartParameters]
action = """
#Test State Count
stateTestMeasBufferCount = 1
stateCavityPressureCount = 2
stateEtalonCertCount = 3
stateCOSquishCount = 4
stateInstrAdjustCount = 5
stateH2OCheckCount = 6
stateFlowDone = 7
stateDataGenAve = 8
stateDataCollectComplete = 9
stateRestart = 10
stateDataCollectCount = 11
#Note: gasType = 1 (N2), gasType = 2 (HE), gasType = 3 (Air)
gasType = 0.0
#Note: gasRange = 1 (Low Concentration), gasRange = 2 (High Concentration)
gasRange = 0.0
gasRangeCheck = False

#Initial CMAdjust Points
if analyzerType in ["CFKADS", "CFKBDS"]:
    adjustParam = ["co2_adjust", "ch4_adjust", "h2o_adjust", "co_adjust"]
elif analyzerType in ["CKADS"]:
    adjustParam = ["co2_adjust", "co_adjust"]
NEXT = "StateMeasBuffer"
"""

[StateMeasBuffer]
action = """
try:
    setTagalongData("ClientState", 0.0)
    setTagalongData("TestStep", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
except Exception, err:
    logFunc("Cannot tag parameter into datastream\n")
    logFunc("Will try again\n")
    NEXT = "StateMeasBuffer"
if analyzerType in ["CFKADS", "CFKBDS"]:
    setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "co2_adjust", "ch4_adjust", 
                                        "co_adjust", "h2o_adjust", "CH4", "CO", "CO2", "co_squish", "H2O", "ReadyState", "ClientState", "TestStep", "SeqIdx"],200)                                  
elif analyzerType in ["CKADS"]:
    setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "co2_adjust",
                                        "co_adjust", "CO", "CO2", "co_squish", "H2O", "ReadyState", "ClientState", "TestStep", "SeqIdx"],200)                                  
clearMeasBuffer()
logFunc("Insert status indicators for client status and state status\n")
setTagalongData("TestStep", stateTestMeasBufferCount)
NEXT = "StateTestMeasBuffer"
"""

[StateTestMeasBuffer]
action = """
meas = measGetBufferFirst()
if analyzerType in ["CFKADS", "CFKBDS", "CKADS"]:
    species = "CO"
#Verify Buffer has the right data parameters
if not meas or ("ReadyState" not in meas) or (species not in meas) or ("TestStep" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateTestMeasBuffer"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateTestMeasBufferCount:
        setTagalongData("ClientState", 1.0)
        setTagalongData("TestStep", 1.0)
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == 1.0:
        logFunc("Instrument is now measuring\n")
        logFunc("Now will wait for cavity pressure to stabilize\n")    
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateCavityPressureCount)
        cavityPressure = 0
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
    else:
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verify Cavity Pressure
analyzer_pressure = str(editParamDict["analyzer_pressure"])
if analyzer_pressure == "Normal":
    pressureSetpoint = 140.0
else:
    pressureSetpoint = 40.0
   
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrCavityPressure"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateCavityPressureCount:
        cavityPress_meas = meas["CavityPressure"]
        if cavityPressure != 3:
            if abs(cavityPress_meas - pressureSetpoint) >= 0.05:
                cavityPressure = 0
                NEXT = "StateInstrCavityPressure"
            else:
                cavityPressure += 1
                NEXT = "StateInstrCavityPressure"
        else:
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
            NEXT = "StateInstrCavityPressure"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateCavityPressureCount:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr\n")
        logFunc("Now will wait for etalon temperature to stabilize\n")
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateEtalonCertCount)
        etalonStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
"""
    
[StateInstrEtalonTemp]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrEtalonTemp"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateEtalonCertCount:
        initTemp = meas["EtalonTemp"]
        sleep(10.0)
        etalMeas = measGetBufferFirst()
        etalTemp = etalMeas["EtalonTemp"]
        if etalonStart != 3:
            etalonDiff = abs(etalTemp - initTemp)
            if etalonDiff > 0.0005:
                etalonStart = 0
                NEXT = "StateInstrEtalonTemp"
            else:
                etalonStart += 1
                NEXT = "StateInstrEtalonTemp"
        else:
            setTagalongData("ClientState", 1.0)
            etalonStart = 0
            clearMeasBuffer()
            NEXT = "StateInstrEtalonTemp"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateEtalonCertCount:
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateCOSquishCount)
        logFunc("Etalon temp stabilized to nominal temp fo 45.0 C\n")
        logFunc("Now will confirm CO squish magnitude is acceptable\n")
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = "StateCOSquish"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
"""


[StateCOSquish]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateCOSquish"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateCOSquishCount:
        currTime = time.time()
        if (currTime - squishStartTime) < 300.0:
            squishList.append(meas["co_squish"])
        else:
            squishAve = average(squishList)
            if squishAve < 0.0025:
                setTagalongData("ClientState", 1.0)
                NEXT = "StateCOSquish"
            else:
                squishCount = 0
                squishList[:] = []
                clearMeasBuffer()
                NEXT = "StateCOSquish"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateCOSquishCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateInstrAdjustCount)
        logFunc("CO Squish is within tolerance\n")
        logFunc("Now will confirm adjust values are acceptable magnitude\n")
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
    else:
        clearMeasBuffer()
        NEXT = "StateCOSquish"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT="StateInstrAdjustCert"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateInstrAdjustCount:
        for adjustCount in range(len(adjustParam)):
            cmVal = meas[adjustParam[adjustCount]]
            if abs(cmVal) < 0.0003:
                instrAdjustStart += 1
        if instrAdjustStart == len(adjustParam):
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
        else:
            instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateInstrAdjustCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateH2OCheckCount)
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        logFunc("WLM Adjust magnitudes are acceptable\n")
        logFunc("Now will start H2O level check\n")
        clearMeasBuffer()        
        NEXT = "StateH2OCheck"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateH2OCheck"
else:
    checkH2OMeas.append(meas["H2O"])
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateH2OCheckCount:
        if (time.time() - h2oCheckTime) < 360.0:
            NEXT = "StateH2OCheck"
        else:
            aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
            if aveH2OVal > 0.1:
                logFunc("Peak H2O level is too high-Please advise\n")
                NEXT = "StateDone"
            else:
                setTagalongData("ClientState", 1.0)
                clearMeasBuffer()
                NEXT = "StateH2OCheck"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateH2OCheckCount:
        #Indication of test cycle type
        testType = "Measured"
        restartOccurred = False
        logFunc("H2O level check is suitable for test\n")
        logFunc("Now will commence Gas step sequence of 1D CO2 Interference test\n")
        clearMeasBuffer()
        NEXT = "StateDataArrayConfig"
    else:
        clearMeasBuffer()
        NEXT = "StateH2OCheck"
"""

[StateDataArrayConfig]
action = """
if analyzerType in ["CFKADS", "CFKBDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "CH4", "CO", "CO2", 
                                            "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "TestStep", 
                                            "ClientState", "ReadyState", "Gas", "Range"],200)
        paramMeas = ["peak84_raw", "b_h2o_pct", "peak_14", "CH4", "CO", "CO2",
                        "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
        paramMeasArray = {"peak84_raw":[], "b_h2o_pct":[], "peak_14":[], "CH4":[], "CO":[], "CO2":[],
                                "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"peak84_raw":[], "b_h2o_pct":[], "peak_14":[], "CH4":[], "CO":[], "CO2":[],
                                "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "CH4", "CO", "CO2"],200)
elif analyzerType in ["CKADS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "CO", "CO2", 
                                            "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "TestStep", 
                                            "ClientState", "ReadyState", "Gas", "Range"],200)
        paramMeas = ["peak84_raw", "b_h2o_pct", "peak_14", "CO", "CO2",
                        "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
        paramMeasArray = {"peak84_raw":[], "b_h2o_pct":[], "peak_14":[], "CO":[], "CO2":[],
                                "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"peak84_raw":[], "b_h2o_pct":[], "peak_14":[], "CO":[], "CO2":[],
                                "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "CO", "CO2"],200)

#MFC Step Cycle Start Integers
if restartOccurred == False:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    aveDone = False
    NEXT = "StateDataCollect"
else:
    NEXT = "StateRestartMeasCheck"
"""

[StateRestartMeasCheck]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateRestartMeasCheck"
else:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
    restartOccurred = False
    NEXT = "StateDataArrayConfig"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas) or ("ReadyState" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollect"
else:
    #Retrieve gas range and type
    if not gasRangeCheck:
        if meas["Gas"] != "NA" and meas["Range"] != "NA":
            gasType = meas["Gas"]
            gasRange = meas["Range"]
            gasRangeCheck = True
    #Collect Data
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataCollectCount:
        for x in paramMeas:
            paramMeasArray[x].append(meas[x])
        NEXT = "StateDataCollect"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 2.0 and meas["TestStep"] == stateDataCollectCount:
        setTagalongData("TestStep", stateDataCollectComplete)
        setTagalongData("ClientState", 2.0)        
        NEXT = "StateDataCollectComplete"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateFlowDone:
        NEXT = "StateDataRegressionFit"
    else:
        NEXT = "StateDataCollect"
"""

[StateDataCollectComplete]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollectComplete"
else:
    if meas["ClientState"] == 2.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataCollectComplete:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateDataGenAve)
        clearMeasBuffer()
        NEXT = "StateDataGenAve"
    else:
        NEXT = "StateDataCollectComplete"
"""

[StateDataGenAve]
action = """
def aveData():
    for a in paramMeas:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataGenAve"
else:
    if aveDone == False:
        #Server will check clients' states
        paramDictList = []
        calVal = aveData()
        paramDict = dict(zip(paramMeas, paramDictList))
        paramDict["Comment"] = testType
        paramDict["Gas"] = gasType
        paramDict["Range"] = gasRange
        fileDataFunc(dict(paramDict))
        paramDictList[:] = []
        aveDone = True
        NEXT = "StateDataGenAve"
    elif aveDone == True:
        if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataGenAve:
            setTagalongData("ClientState", 1.0)
            NEXT = "StateDataGenAve"
        elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataGenAve:
            aveDone = False
            #Increase Step Count
            stateDataCollectCount += 1
            setTagalongData("TestStep", stateDataCollectCount)
            #Reset ClientState
            setTagalongData("ClientState", 0.0)
            NEXT = "StateDataCollect"
        else:
            NEXT = "StateDataGenAve"
"""

[StateDataRegressionFit]
action = """
#This fit is to detmerine the CO_CO2 offset and slope to be plugged in to the InstrCal File.
peakFit = polyfit(aveParamMeasArray["CO2"], aveParamMeasArray["peak84_raw"], 1)
#Display & log results
signWarning = "Signs have been negated\n"
measFitOffset = "Measured co_offset with Peak84 is %f\n" %(-peakFit[1])
measFitSlope = "Measured co_co2_linear with Peak84 is %f\n"%(-peakFit[0])
logFunc("%s"%(signWarning))
logFunc("%s"%(measFitOffset))
logFunc("%s"%(measFitSlope))
fileDataFunc(dict(Comment = signWarning))
fileDataFunc(dict(Comment = measFitOffset))
fileDataFunc(dict(Comment = measFitSlope))
NEXT = "StatePlotResults"
"""

[StatePlotResults]
action  = """
#.Ini file of Before and Proposed Values
outputDir = r"C:/Picarro/G2000/InstrConfig/Integration/1DInterference_CO2"
timeStr = time.strftime("%Y%m%d_%H%M%S")
#This fit is to determine the sensitivity of CO on CO2.
concFit = polyfit(aveParamMeasArray["CO2"], aveParamMeasArray["CO"], 1)
#1D Analysis
def gen1DPlot(x,y):
    #Plot of CO2 vs CO
    figure()
    plot(x, y, "bo", x, polyval(concFit, x))
    ax = gca()
    title("%s"%(plotTitle), color = "black", fontweight = "bold")
    xlabel("%s"%(xAxisTitle), color = "b", fontweight = "bold")
    ylabel("%s"%(yAxisTitle), color = "b", fontweight = "bold")
    ylabel("%s"%(yAxisTitle), color = "b", fontweight = "bold")
    ax.text(350, (max(y)), "%s" %(testType), 
                horizontalalignment = "left", verticalalignment = "top", 
                fontsize = 10, fontweight = "bold")
    ax.text(350, (max(y)*0.9), "Slope (200 to 1800 ppm CO2): %f" %(concFit[0]), 
                horizontalalignment = "left", verticalalignment = "top", 
                fontsize = 10, fontweight = "bold")
    ax.text(350, (max(y)*0.8), "Intercept (200 to 1800 ppm CO2): %f" %(concFit[1]), 
                horizontalalignment = "left", verticalalignment = "top", 
                fontsize = 10, fontweight = "bold")
    if testType == "Validation":
        ax. text(350, (max(y)*0.7), "%s" %(testResult), 
                    horizontalalignment = "left", verticalalignment = "top", 
                    fontsize = 10, fontweight = "bold", color = "%s" %(resultColor))
    #Output Directory
    savefig((join(outputDir, "1DInterferencePlot" + timeStr + ".png")))
#Comment: Will plot results regardless whether this test is a measurement or a validation
#Result of test
if abs(concFit[0]) > 0.00125:
    testResult = "Please advise: test failed. Slope > 0.00125 ppm CO2/ ppm CO."
    resultColor = "red"
else:
    testResult = "Please proceed: test passed. Slope < 0.00125 ppm CO2/ ppm CO."
    resultColor = "green"
#Plot Data
plotTitle = "CO2 ppm vs CO ppm"
xAxisTitle = "CO2 ppm"
yAxisTitle = "CO ppm"
gen1DPlot(aveParamMeasArray["CO2"], aveParamMeasArray["CO"])
#Decision Fork
if testType == "Measured":
    NEXT = "StateCoeffImplement"
elif testType == "Validation":
    NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
correctFitFile = r"C:/Picarro/G2000/InstrConfig/Integration/1DInterference_CO2/1DCorrectedFits_%s.ini" %(timeStr)
corrConfig = ConfigObj(correctFitFile)

if gasRange == 1.0:
    #Write new Values to .ini File
    #Need to create an installer with the right modes
    if gasType == 3.0 and analyzer_pressure == "Normal":
        if analyzerType in ["CFKADS", "CFKBDS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS.ini"
        elif analyzerType in ["CKADS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS.ini"
    else:
        if analyzerType in ["CFKADS", "CFKBDS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS_low_pressure.ini"
        elif analyzerType in ["CKADS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS_low_pressure.ini"
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {"co_offset": "%s" %(config["Data"]["co_offset"]), 
                    "co_co2_linear": "%s" %(config["Data"]["co_co2_linear"])}
    corrConfig["Old Fit Values"] = oldFitValues
    corrConfig.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {"co_offset": "%s" %(str(-peakFit[1])), 
                    "co_co2_linear": "%s" %(str(-peakFit[0]))}
    corrConfig["New Fit Values"] = newFitValues
    corrConfig.write()        
    #New Fit Values
    config["Data"]["co_offset"] = str(-peakFit[1])
    config["Data"]["co_co2_linear"] = str(-peakFit[0])  
    config.write()
NEXT = "StateRestart"
"""

[StateRestart]
action = """
class exeRestart():
    def __init__(self, exeName, retryCountLimit):
        self.analyzerSoftwareEXE = exeName
        self.launchStatus = False
        self.programList = []
        self.retryCountLimit = retryCountLimit
        self.retryCount = 0
        self.restartAnalyzerSoftware()

    def restartAnalyzerSoftware(self):
        subprocess.Popen("C:\Picarro\G2000\Hostexe\SupervisorLauncher.exe -a -c C:\Picarro\G2000\AppConfig\Config\Utilities\SupervisorLauncher.ini", shell = False)
        time.sleep(30.0)
        self.launchStatus = True
        self.EnumProcesses()

    def EnumProcesses(self):
        arr = c_ulong * 256
        lpidProcess = arr()
        cb = sizeof(lpidProcess)
        cbNeeded = c_ulong()
        hModule = c_ulong()
        count = c_ulong()
        modname = c_buffer(30)
        PROCESS_QUERY_INFORMATION = 0x0400
        PROCESS_VM_READ = 0x0010
        
        #Call Enumprocesses to get hold of process ids
        psapi.EnumProcesses(byref(lpidProcess), cb, byref(cbNeeded))
        #Number of processes returned
        nReturned = cbNeeded.value/sizeof(c_ulong())
        pidProcess = [i for i in lpidProcess][:nReturned]

        for pid in pidProcess:
            #Get handle to the process based on PID
            hProcess = kernel.OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, False, pid)
            if hProcess:
                psapi.EnumProcessModules(hProcess, byref(hModule), sizeof(hModule), byref(count))
                psapi.GetModuleBaseNameA(hProcess, hModule.value, modname, sizeof(modname))
                self.programList.append("".join([ i for i in modname if i != "\x00"]))
                #Clean up
                for i in range(modname._length_):
                    modname[i]="\x00"
                kernel.CloseHandle(hProcess)
        self.checkList()

    def checkList(self):
        if self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) in self.programList:
            logFunc("Relaunch was successful!\n")
            return True
        elif self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) not in self.programList:
            logFunc("Relaunch not successful. Will try again\n")
            self.launchStatus = False
            self.retryCount += 1
            if self.retryCount != self.retryCountLimit:
                self.restartAnalyzerSoftware()
            else:
                logFunc("All relaunch attempts were not successful-Please advise\n")
                return False
#Instantiate exeRestart
try:
    start = exeRestart("supervisor.exe", 2)
    if start.checkList() == True:
        sleep(60.0)
        testType = "Validation"
        restartOccurred = True
        #Clear data from dictionaries
        for x in paramMeas:
            aveParamMeasArray[x][:] = []
            paramMeasArray[x][:] = []
        NEXT = "StateDataArrayConfig"
    else:
        attemptCount += 1
        if attemptCount < 2:
            NEXT = "StateRestart"
        else:
            logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
            NEXT = "StateDone"
except Exception, err:
    logFunc("%r"%(err))
    attemptCount += 1
    if attemptCount < 2:
        NEXT = "StateRestart"
    else:
        logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
        NEXT = "StateDone"
"""

[StateDone]
action="""
#Set indicators to 0 when done
setTagalongData("ClientState", 0.0)
setTagalongData("TestStep", 0.0)
setTagalongData("ReadyState", 0.0)
setTagalongData("SeqIdx", 0.0)
GUI.popInfo("1D Interference Test is now complete\n", "Coordinator1DInterference-CO2")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""