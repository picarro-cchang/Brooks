############################################################################################################################################
#Date:              Date Modified:          Notes:
#20110712           E.Lai                   1D CO Interference Test
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "validationMode", "Is Tester running a Validation Test (Y or N)", "Y"

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceCO/1D_Interference_CO"

[SerialPorts]
MFC = COM2

[Output]
#CFKADS
CO2            = CO2,              %10.4f
CH4            = CH4,              %10.4f
H2O            = H2O,              %10.4f
CO             = CO,               %10.4f
#Comment
Comment        = Comment,          %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
from configobj import ConfigObj
from pylab import figure, plot, grid, xlabel, ylabel, title, savefig, text
import os

timeStr = strftime("%Y%m%d_%H%M%S")
#Definition to kill .exe in Supervisor Tree
def exeKill(exe):
    try:
        os.system("taskkill /im %s /f"%(exe))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable .exe - Please advise.\n')
    sleep(2.0)
#Definition to analyze Data
def aveData(paramTableMeasList):
    if analyzerType in ["CFKADS", "CFKBDS", "CKADS"]:
        for speciesCount in range(len(paramTableMeasList)):
            paramMeasDictList.append(average(paramTableMeasList[speciesCount]))
            if paramTableMeasList[speciesCount] == CO2:
                aveCO2Val = average(paramTableMeasList[speciesCount])
                analyzeCO2.append(aveCO2Val)
                paramTableMeasList[speciesCount][:] = []
            elif paramTableMeasList[speciesCount] == CH4:
                analyzeCH4.append(average(paramTableMeasList[speciesCount]))
                paramTableMeasList[speciesCount][:] = []
            elif paramTableMeasList[speciesCount] == CO:
                analyzeCO.append(average(paramTableMeasList[speciesCount]))
                paramTableMeasList[speciesCount][:] = []
            elif paramTableMeasList[speciesCount] == H2O:
                analyzeH2O.append(average(paramTableMeasList[speciesCount]))
                paramTableMeasList[speciesCount][:] = []
#Definition to generate plots
def genPlot():
    #Plot of CO2 vs CO
    figure(1)
    plot(analyzeCO2, analyzeCO, 'bo', analyzeCO2, polyval(fit, analyzeCO2))
    xlabel('CO2 ppm (30Sec Ave)', color = 'b', fontweight = 'bold')
    ylabel('CO ppm (30Sec Ave)', color = 'b', fontweight = 'bold')
    text(300, (max(analyzeCO)-(max(analyzeCO)*0.25)), 'CO Slope: %f' %(-fit[0]), fontsize = 10, fontweight = 'bold')
    text(300, (max(analyzeCO)-(max(analyzeCO)*0.65)), 'CO Intercept: %f' %(-fit[1]), fontsize = 10, fontweight = 'bold')
    #Output Directory
    outputDir = "C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceCO"
    savefig((join(outputDir, "1DInterferencePlot" + timeStr + ".png")))
#AnalyzerType
analyzerType = getAnalyzerType()
#ConfigFile
correctFitFile = 'C:\\Picarro\\G2000\\InstrConfig\\Integration\\1DInterferenceCO\\%s_1DCorrectedFits.ini' %(analyzerType)
corrConfig = ConfigObj(correctFitFile)
#Validation Mode
validationModeStatus = str(editParamDict["validationMode"])
#Time
transitionTime = 36000.0
initZABuffTime = time.time()
initCO2BuffTime = time.time()
initStartTime = time.time()
lowCO2Count = 0
highCO2Count = 0
paramMeasDictList = []
#Flow Sequence
logFunc('Tester is running 1-Dimension CO2 Interference Test on an analyzer that measures CO.\n')
#User selects analyzer type
if analyzerType in ["CKADS", "CFKADS", "CFKBDS"]:
    if analyzerType in ["CFKADS", "CFKBDS"]:
        setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "co_squish", "co2_adjust", "ch4_adjust", "co_adjust", "h2o_adjust", "CO2", "CO", "H2O", "CH4"], 200)
        logFunc("Instrument is a 4 Species (CO2,CH4,CO,H2O) analyzer.\n")
    else:
        setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "co_squish", "co2_adjust", "co_adjust", "CO2", "CO", "H2O"], 200)
        logFunc("Instrument is a 3 Species (CO2,CO,H2O) analyzer.\n")
    GUI.popPause("Please make sure the catalyst is attached to the inlet of the analyzer. If ready, press 'Ok'", "Coordinator1DConcentration-CO")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument type is not supported.\n")
    NEXT="StateDone"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas or ("CO" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    if analyzerType in ["CFKADS", "CFKBDS"]:
        adjustParam = ["co2_adjust", "co_adjust", "ch4_adjust", "h2o_adjust"]
    elif analyzerType in ["CKADS"]:
        adjustParam = ["co2_adjust", "co_adjust"]
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPressMeas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPressMeas - 140.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45.0 C.\n")
        logFunc("Now will commence CO Squish Verification.\n")
        clearMeasBuffer()
        squishStartTime = time.time()
        squishCount = 0
        squishList = []
        NEXT = "StateCOSquish"
"""

[StateCOSquish]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateCOSquish"
else:
    currTime = time.time()
    if (currTime - squishStartTime) < 60.0:
        squishList.append(meas['co_squish'])
    else:
        squishAve = average(squishList)
        if squishAve < 0.0025:
            squishCount += 1
            squishStartTime = currTime
            if squishCount == 2:
                squishList[:] = []
                NEXT = "StateInstrAdjustCert"
            else:
                NEXT = "StateCOSquish"
        else:
            squishCount = 0
            squishList[:] = []
            if (currTime - squishStartTime) > 600.0:
                GUI.popPause("CO Squish value is not within tolerance. Please advise.\n","1D_Interference_CO")
                NEXT = "StateDone"
            else:
                NEXT = "StateCOSquish"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if cmVal > 0.0008:
            logFunc("Waiting for WLM to center.\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        logFunc("Verified Instrument WLM is centered.\n")
        clearMeasBuffer()
        analyzeCO2= []; analyzeCH4 = []; analyzeCO = []; analyzeH2O = []
        CO2 = []; CH4 = []; CO = []; H2O = []
        #CFKADS, CFKBDS
        if analyzerType in ["CFKADS", "CFKBDS"]:
            paramMeas = ["CO2", "CH4", "CO", "H2O"]
            paramTableMeasList = [CO2, CH4, CO, H2O]
        #CKADS
        elif analyzerType in ["CKADS"]:
            paramMeas = ["CO2", "CO", "H2O"]
            paramTableMeasList = [CO2, CO, H2O]
        #Open Valve to ZA
        setValveMask(2)
        logFunc('Now will commence purging of the catalyst.\n')
        NEXT = "StateCatalystPurge"
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateCatalystPurge]
action = """
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateCatalystPurge"
else:
    currTime = time.time()
    co2Meas = meas["CO2"]
    if co2Meas < 230.0:
        lowCO2Count += 1
        #Flush Buffer after every hour
        if (currTime - initZABuffTime) > 3600.0:
            initZABuffTime = currTime
            clearMeasBuffer()
        #Collect Data
        if lowCO2Count > 20:
            #Set to CO2 concentration
            setValveMask(1)
            logFunc('Instrument has reached a low threshold level of CO2. Now will cycle CO2 gas through catalyst.\n')
            dataTime = time.time()
            NEXT = "StateDataCollect"
        else:
            NEXT = "StateCatalystPurge"
    else:
        NEXT = "StateCatalystPurge"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
currTime = time.time()

if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateDataCollect"
else:
    if (currTime - initStartTime) < transitionTime:
        #Flush Buffer after every hours
        if (currTime - initCO2BuffTime) > 3600.0:
            initCO2BuffTime = currTime
            clearMeasBuffer()
        #Collect Data
        if (currTime - dataTime) < 30.0:
            for paramCount in range(len(paramMeas)):
                paramTableMeasList[paramCount].append(meas[(paramMeas[paramCount])])
            logFunc('Collecting data.\n')
            NEXT = "StateDataCollect"
        else:
            #Time threshold is met
            dataTime = currTime
            #Analyze Data & Clear List
            aveData(paramTableMeasList)
            if analyzeCO2[-1] > 950:
                highCO2Count += 1
            paramDict = dict(zip(paramMeas, paramMeasDictList))
            fileDataFunc(dict(paramDict))
            paramMeasDictList[:] = []
            #Finished collecting data
            if highCO2Count == 7:
                logFunc('CO2 concentration has reached peak threshold. Now will analyze data to generate linear correction terms.\n')
                NEXT = "StateDataAnalyze"
            else:
                NEXT = "StateDataCollect"
    else:
        NEXT = "StateDataCollect"
"""

[StateDataAnalyze]
action = """
#Linear Fit
fit = polyfit(analyzeCO2, analyzeCO, 1)
signWarning = 'Signs have been negated.\n'
measFitOffset = 'Measured co_offset is %f.\n' %(-fit[1])
measFitSlope = 'Measured co_co2_linear is %f.\n'%(-fit[0])
logFunc('%s'%(signWarning))
logFunc('%s'%(measFitOffset))
logFunc('%s'%(measFitSlope))
fileDataFunc(dict(Comment = signWarning))
fileDataFunc(dict(Comment = measFitOffset))
fileDataFunc(dict(Comment = measFitSlope))
#Plot Data
genPlot()
if validationModeStatus == 'N' or validationModeStatus == 'n':
    NEXT = "StateImplement"
else:
    NEXT = "StateDone"
"""

[StateImplement]
action = """
#Write new Values to .ini File
if analyzerType in ["CFKADS", "CFKBDS"]:
    configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\InstrCal_CFKADS.ini"
elif analyzerType in ["CKADS"]:
    configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\InstrCal_CKADS.ini"
config = ConfigObj(configPath)
#Old Values
oldFitValues = {'co_offset': '%s' %(config['Data']['co_offset']),
                'co_water_linear': '%s' %(config['Data']['co_water_linear']),
                'co_water_quadratic': '%s' %(config['Data']['co_water_quadratic']),
                'co_co2_linear': '%s' %(config['Data']['co_co2_linear'])}
corrConfig['Old Fit Values'] = oldFitValues
corrConfig.write()
#New Values
config['Data']['co_offset'] = str(-fit[1])
config['Data']['co_co2_linear'] = str(-fit[0])
config.write()
#Write New Values to summary (.dat) file
newFitValues = {'co_offset': '%s' %(str(-fit[1])),
                'co_water_linear': '%s' %(config['Data']['co_water_linear']),
                'co_water_quadratic': '%s' %(config['Data']['co_water_quadratic']),
                'co_co2_linear': '%s' %(str(-fit[0]))}
corrConfig['New Fit Values'] = newFitValues
corrConfig.write()
NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("1D Interference Test is now complete.\n","1D Interference Coordinator")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
