############################################################################################################################################
#Date:              Date Modified:          Notes:               
#20130403           E.Lai                   1D iCH4 Analysis Test for CFIDS and FCDS analyzers
#20140902			J.Yiu					Updated for FEDS Acadia In Lab modes.
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "validationMode", "Is Tester running a Validation Test (Y or N)", "N"
1 = "cylinderConc", "Concentration of CH4 gas cylinder (ppm)", "100"
2 = "backgroundGas", "BackGround Gas [1=N2, 2=HE, 3=Air]", "3"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/InstrConfig/Integration/1DInterferenceHP-CH4/1DInterferenceHP-CH4"

[SerialPorts]
MFC = COM2

[Output]
#iCO2 Param
HP_12CH4            = HP_12CH4,            %10.4f
HP_Delta_iCH4_Raw   = HP_Delta_iCH4_Raw,   %10.4f
H2O                 = H2O,                 %10.4f
peakheight_5        = peakheight_5,        %10.4f
ch4_splinemax       = ch4_splinemax,       %10.4f
Gas                 = Gas,                 %10s
Range               = Range,               %15s
#MFC Param
SeqIdx              = SeqIdx,              %5.0f
SetFlow1            = SetFlow1,            %10.2f
SetFlow2            = SetFlow2,            %10.2f
SetFlow3            = SetFlow3,            %10.2f
SetFlow4            = SetFlow4,            %10.2f
ActFlow1            = ActFlow1,            %10.2f
ActFlow2            = ActFlow2,            %10.2f
ActFlow3            = ActFlow3,            %10.2f
ActFlow4            = ActFlow4,            %10.2f
#Comment
Comment             = Comment,             %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from pylab import*
from os import makedirs
from os.path import exists, join
from configobj import ConfigObj
import os
import time

#Range List to determine the     
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#TestCaseParameters
validationModeStatus = str(editParamDict["validationMode"])
if validationModeStatus == 'Y' or validationModeStatus == 'y':
    testType = 'Validation'
else:
    testType = 'Measured'
cylinderConcStatus = eval(str(editParamDict["cylinderConc"]))
backgroundGasStatus = eval(editParamDict["backgroundGas"])
if backgroundGasStatus == 2:
    gasType = 'Helium'
elif backgroundGasStatus == 1:
    gasType = 'Nitrogen'
elif backgroundGasStatus == 3:
    gasType = 'Air'
#List of Defintions to command MFC
#Open MFC Channel
def openChannel():
    for ch in range(1,5):
        mfcIntrf.sendString("ON %d" % (ch))
        return ch
#Set flow rate of channel        
def setFlow(flowList):
    for ch in range(1,5):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d" % (ch, setpoint))
#Read the actual flow rate of that particular MFC channel        
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0
#Definition to kill .exe in Supervisor Tree
def exeKill(exe):
    try:
        os.system("taskkill /im %s /f"%(exe))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable .exe - Please advise\n')
    sleep(2.0)
#Definition to calculate mean of each conc step    
def aveData():
    for a in paramMeasFull:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

#AnalyzerType
analyzerType = getAnalyzerType()
validation = False 
#User selects analyzer type
if analyzerType in ["FCDS", "FDDS"]:
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "H2O","HP_Delta_iCH4_Raw", 
                                    "peakheight_5", "ch4_splinemax"],200)
    logFunc("Instrument is FCDS (iCH4) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"
if analyzerType in ["FEDS"]:
    setMeasBuffer("analyze_FBDS_Lab", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "H2O","HP_Delta_iCH4_Raw", 
                                    "peakheight_5", "ch4_splinemax"],200)
    logFunc("Instrument is FCDS (iCH4) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"	
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()
#Test to see if analyzer can communicate with MFC
exe = 'ValveSequencer.exe'
valveSeqKill = exeKill(exe)

try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: % on MFC Controller-Please advise\n'%(mfcOpenChannel))
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,5):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum Flow Rate of MFC Channel[%s] is %s\n'%(ch,channelRangeList[ch-1]))
    NEXT = "StateCreateFlowTable"    
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot retrieve max flow rate of MFC channels-Please advise\n')
    NEXT = "StateDone"
"""

[StateCreateFlowTable]
action = """
gasFlowTable = {}
flowTotal = 300
flowSetpoint = []
flowMatrix = []
duration = 450.0

def createFlowList():
    for y in range(0,stepCount):
        x = (concSetpoint[y]/cylinderConcStatus)*flowTotal
        flowSetpoint.append(x)

#Setpoints need to be in decimal
concSetpoint = [1.5, 3.0, 5.0, 10.0, 15.0, 18.0]
stepCount = len(concSetpoint)
#Flow Sequence 
logFunc('There are %s steps in 1D Interference test\n'%(stepCount))    
createFlowList()
#Create Table
for a in range(stepCount):
    flowMatrix.append([0.0, 0.0, (flowTotal-flowSetpoint[a]), flowSetpoint[a]])
    #Start step of test flow matrix
    seqIdx  = 0
    NEXT = "StateWaitMeasuring"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring\n")
    logFunc("Now will wait for instrument to reach steady state\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    adjustParam = ["adjust_5", "ch4_high_adjust"]
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure
if not meas or ("CavityPressure" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 148.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 148 Torr\n")
        NEXT = "StateInstrEtalonCert"
"""        
    
[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45 C\n")
        squishStartTime = time.time()
        clearMeasBuffer()
        logFunc('Set MFC Controllers to flow ambient air\n')
        checkFlow = [0.0, 0.0, 0.0, 0.0]
        setFlow(checkFlow)
        logFunc('Now will confirm WLM is centered\n')   
        NEXT = "StateInstrAdjustCert"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if abs(cmVal) > 0.0003:
            logFunc("Waiting for WLM to center\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        cycleCount = 0
        logFunc("Verified Instrument WLM is centered\n")
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        checkFlow = flowMatrix[0]
        setFlow(checkFlow)
        #Measured Value Lists
        if analyzerType in ["FCDS", "FDDS", "FEDS"]:
            paramMeas = ["HP_Delta_iCH4_Raw", "H2O", "HP_12CH4", "peakheight_5", "ch4_splinemax"]
            paramMeasFull = ["HP_Delta_iCH4_Raw", "H2O", "HP_12CH4", "peakheight_5", "ch4_splinemax", "SeqIdx", 
                                "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
            paramMeasArray = {"HP_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "peakheight_5":[], "ch4_splinemax":[], 
                                "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                                "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
            aveParamMeasArray = {"HP_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "peakheight_5":[], "ch4_splinemax":[],
                                "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                                "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        clearMeasBuffer()
        logFunc('Start H2O Check\n')            
        NEXT = "StateH2OCheck"            
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()
if (time.time() - h2oCheckTime) < 360.0:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateH2OCheck"
    else:
        checkH2OMeas.append(meas["H2O"])
        NEXT = "StateH2OCheck"
        
else:
    aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
    if aveH2OVal > 0.1:
        logFunc('Measured H2O Peak Level is %d\n'%(aveH2OVal))
        GUI.popPause("Peak H2O level is too high. Please advise.\n","Coordinator1DInterference")
        NEXT = "StateDone"
    else:
        logFunc('Measured H2O Peak is sufficient\n')
        clearMeasBuffer()
        cycleCount = 0
        NEXT = "StateSetMFC"
"""        

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(f1, f2, f3, f4) = flowMatrix[seqIdx]
channelsFlowRate = [float(f) for f in [f1, f2, f3, f4]]
logFunc('Set MFC Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        for x in paramMeas:
            paramMeasArray[x].append(meas[x])
        paramMeasArray['SeqIdx'].append(seqIdx)
        for ch in range(1,5):
            #Flushes data from the com-port
            mfcIntrf.flush()
            if ch == 1:
                paramMeasArray['SetFlow1'].append(channelsFlowRate[0])
                paramMeasArray['ActFlow1'].append(getFlow(ch))
            elif ch == 2:
                paramMeasArray['SetFlow2'].append(channelsFlowRate[1])
                paramMeasArray['ActFlow2'].append(getFlow(ch))
            elif ch == 3:
                paramMeasArray['SetFlow3'].append(channelsFlowRate[2])
                paramMeasArray['ActFlow3'].append(getFlow(ch))
            elif ch == 4:
                paramMeasArray['SetFlow4'].append(channelsFlowRate[3])
                paramMeasArray['ActFlow4'].append(getFlow(ch))                
        NEXT = "StateDataCollect"
else:     
    NEXT = "StateDataGenAve"
"""

[StateDataGenAve]
action = """
paramDictList = []
calVal = aveData()
paramDict = dict(zip(paramMeasFull, paramDictList))
#Add a comment about the test type in the results file
paramDict['Comment'] = testType
paramDict['Gas'] = gasType
paramDict['Range'] = "High Precision"
fileDataFunc(dict(paramDict))
paramDictList[:] = []
clearMeasBuffer()
cycleRep = 11

#Cycle the SeqIdx
if seqIdx == (len(flowMatrix)-1) or seqIdx == 0:
    cycleCount +=1
#if cycleCount == 1 or cycleCount == 3:
if cycleCount in [1,3,5,7,9,11]:
    seqIdx = seqIdx+1
else:
    seqIdx = seqIdx-1
logFunc('Next seqIdx: %s\n'%(seqIdx))  
#Transition to Linear Regression Fit
if cycleCount != cycleRep:
    NEXT = "StateSetMFC"
else:
    NEXT = "StateDataRegressionFit"
"""

[StateDataRegressionFit]
action = """
#1D Analysis
def oneDimLinearFit(xAxis, yAxis, fitTitle):
    fit = polyfit(xAxis, yAxis, 1)
    measFitLinear = 'Measured %s slope is %s\n' %(fitTitle, str(-fit[0]))
    measFitOffset = 'Measured %s offset is %s\n' %(fitTitle, str(-fit[1]))
    logFunc('Signs have already been inverted\n')
    logFunc('%s'%(measFitLinear))
    logFunc('%s'%(measFitOffset))
    fileDataFunc(dict(zip('Comment','Signs have already been inverted')))
    fileDataFunc(dict(zip('Comment', '%s'%(measFitLinear))))
    fileDataFunc(dict(zip('Comment', '%s'%(measFitOffset))))
    return fit

if analyzerType in ["FCDS", "FDDS", "FEDS"]:
    fit13CH4 = oneDimLinearFit(aveParamMeasArray['ch4_splinemax'], aveParamMeasArray['peakheight_5'], "12CH4 vs 13CH4")
    fit13CH4 = [i for i in fit13CH4]

if validationModeStatus == 'N' or validationModeStatus == 'n':
    NEXT = "StateCoeffImplement"
elif validationModeStatus == 'Y' or validationModeStatus == 'y':
    NEXT = "StatePlotResults"
"""

[StateCoeffImplement]
action = """
#.Ini file of Before and Proposed Values
correctFitFile = r'/home/picarro/SI2000/InstrConfig/Integration/1DInterferenceHP-CH4/%s_1DCorrectedFits.ini' %(analyzerType)
corrConfig = ConfigObj(correctFitFile)
#Write new Values to .ini File
if gasType == "Helium":
    configPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/FitterConfig_HE.ini'
elif gasType == "Nitrogen":
    configPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/FitterConfig_N2.ini'
elif gasType == "Air":
    configPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal.ini'
config = ConfigObj(configPath)
#Old Values
oldFitValues = {'Peak5_offset_low_conc': '%s' %(config['Data']['Peak5_offset_low_conc'])}
corrConfig['Old Fit Values'] = oldFitValues
corrConfig.write()
#Write New Values to Summary Coefficient Test File
newFitValues = {'Peak5_offset_low_conc': '%s' %(str(-fit13CH4[1]))}
corrConfig['New Fit Values'] = newFitValues
corrConfig.write()        
#Write new fit values to FitterConfig.ini of computer
config['Data']['Peak5_offset_low_conc'] = str(-fit13CH4[1])
config.write()
NEXT = "StatePlotResults"    
"""

[StatePlotResults]
action  = """
def genPlot(xAxis, yAxis, titleName, xLabelName, yLabelName, zFit, plotName):
    figure()
    plot(xAxis, yAxis, 'bo', xAxis, polyval(zFit, xAxis))
    ax = gca()
    title('%s'%(titleName), color = 'black', fontweight = 'bold')
    xlabel('%s'%(xLabelName), color = 'b', fontweight = 'bold')
    ylabel('%s'%(yLabelName), color = 'b', fontweight = 'bold')
    ax.text(average(xAxis), max(yAxis), 'Slope: %f' %(zFit[0]), 
            horizontalalignment = 'left', verticalalignment = 'top', 
            fontsize = 10, fontweight = 'bold')
    ax.text(average(xAxis), (max(yAxis)*0.90), 'Intercept: %f' %(zFit[1]),
            horizontalalignment = 'left', verticalalignment = 'top', 
            fontsize = 10, fontweight = 'bold')
    #Output Directory
    timeStr = time.strftime("%Y%m%d_%H%M%S")
    savefig((join(outputDir, "1DInterferencePlot" + plotName + timeStr + ".png")))
    
#Output path & file generation
outputDir = "/home/picarro/SI2000/InstrConfig/Integration/1DInterferenceHP-CH4"
if not exists(outputDir): makedirs(outputDir)
genPlot(aveParamMeasArray['ch4_splinemax'], aveParamMeasArray['peakheight_5'], 
        'ch4_splinemax (12CH4) vs peakheight_5 (13CH4)', 'ch4_splinemax (loss)', 'peakheight_5 (loss)', fit13CH4, 'CH4vsCO2')
NEXT = "StateDone"
"""  

[StateDone]
action="""
GUI.popInfo("1D Interference Test is now complete\n", "1D Interference Coordinator")
endFlowState = [0.0, 0.0, 0.0, 0.0]
setFlow(endFlowState)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""