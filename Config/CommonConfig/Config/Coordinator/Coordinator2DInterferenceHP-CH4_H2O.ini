############################################################################################################################################
#Date:              Date Modified:          Notes:               
#20130425           E.Lai                   2D CH4&H2O Interference Test
#20140902			J.Yiu					Updated for FEDS Acadia In Lab modes.
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "validationMode", "Is Tester running a Validation Test (Y or N)", "N"
1 = "instrMode", "Instrument Mode [1 = High Precision, 2 = High Range]", "1"
2 = "co2BottleConc", "Concentration of CO2 Bottle", "3000"
3 = "ch4BottleConc", "Concentration of CH4 Bottle", "100"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/Integration/2DInterferenceHP-CH4_H2O/2DInterferenceHP-CH4_H2O"

[SerialPorts]
MFC = COM2

[Output]
#iCH4 Param
HP_12CH4            = HP_12CH4,             %10.4f
13CH4               = 13CH4,                %10.4f
HP_Delta_iCH4_Raw   = HP_Delta_iCH4_Raw,    %10.4f
H2O                 = H2O,                  %10.4f
peak30_spec         = peak30_spec,          %10.4f
peakheight_5        = peakheight_5,         %10.4f
ch4_splinemax       = ch4_splinemax,        %10.4f
#MFC Param
Mode                = Mode,                 %15s
SeqIdx              = SeqIdx,               %10s
ActFlow1            = ActFlow1,             %10.2f
ActFlow2            = ActFlow2,             %10.2f
ActFlow3            = ActFlow3,             %10.2f
ActFlow4            = ActFlow4,             %10.2f
SetFlow1            = SetFlow1,             %10.2f
SetFlow2            = SetFlow2,             %10.2f
SetFlow3            = SetFlow3,             %10.2f
SetFlow4            = SetFlow4,             %10.2f
#Comment
Comment             = Comment,              %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join 
from time import strftime
from configobj import ConfigObj
#from pylab import figure, plot, grid, xlabel, ylabel, title, savefig, text
from pylab import*
import serial
import os
#Output path & file generation
instrMode = int(editParamDict["instrMode"])
#Range List to determine MFC Flow  
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#Instrument Mode
if instrMode == 1:
    instrMode = "Precision"
    logFunc('Instrument is in High Precision Mode\n')
elif instrMode == 2:
    instrMode = "Range"
    logFunc('Instrument is in High Range Mode\n')
#Validation Confimration
validationModeStatus = str(editParamDict["validationMode"])
#Bottle Concentrations
co2BottleConc = float(editParamDict["co2BottleConc"])
ch4BottleConc = float(editParamDict["ch4BottleConc"])
#Definition to open MFC Channel
def openChannel():
    for ch in range(1,5):
        mfcIntrf.sendString("ON %d" % (ch))
        return ch
#Definition to set flow rate of channel        
def setFlow(flowList):
    for ch in range(1,5):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d" % (ch, setpoint))
#Definition to read the actual flow rate of that particular MFC channel        
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0
#Definition to kill .exe in Supervisor Tree
def exeKill(exe):
    try:
        os.system("taskkill /im %s /f"%(exe))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable .exe - Please advise\n')
    sleep(2.0)
#Definition to calculate mean of each conc step    
def aveData(reportedParamDictList):
    for a in paramMeasFull:
        aveVal = average(paramMeasArray[a][int(len(paramMeasArray[a])*0.40):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        #Delete data after concentration step
        paramMeasArray[a][:] = []

#AnalyzerType
analyzerType = getAnalyzerType()
#User selects analyzer type
if analyzerType in ["FCDS", "FDDS"]:
    if instrMode == "Precision":
        setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "adjust_30", "HP_12CH4", "13CH4", "H2O", "HP_Delta_iCH4_Raw", 
                                        "peak30_spec", "peakheight_5", "ch4_splinemax"],200)
    logFunc("Instrument is an iCH4 (12CH4, 13CH4) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateCreateFlowTable"  
elif analyzerType in ["FEDS"]:
    if instrMode == "Precision":
        setMeasBuffer("analyze_FBDS_Lab", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "adjust_30", "HP_12CH4", "13CH4", "H2O", "HP_Delta_iCH4_Raw", 
                                        "peak30_spec", "peakheight_5", "ch4_splinemax"],200)
    logFunc("Instrument is an iCH4 (12CH4, 13CH4) analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateCreateFlowTable"	
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateTestMasterFile]
action = """
configMasterPath = r'/home/picarro/I2000/InstConfig/Calibration/Master.ini'
currConfig = ConfigObj(configMasterPath)

try:
    oldConfigMasterValues = '%s'%(currConfig['DAS_REGISTERS']['RDFITTER_START_SAMPLE_REGISTER'])
    if int(eval(oldConfigMasterValues)) == 100:
        logFunc('Ringdown samples to ignore is set to %s' %(int(eval(oldConfigMasterValues))))
    else:
        logFunc('Ringdown samples to ignore is not set properly-Please advise')
except Exception, err:
    logFunc(err)

NEXT = "StateCreateFlowTable"    
"""    

[StateCreateFlowTable]
action = """
duration = 450.0
flowTotal = 500.0
h2oFlowSetPoint = [10.0, 250.0]
h2oFlowSetPointLastLeg = [450.0, 450.0, 450.0, 445.0, 420.0, 405.0]
ch4Conc = [1.5, 3.0, 5.0, 10.0, 15.0, 18.0]
flowMatrix = []

def genFlow(gasConc,gasBottle):
    flow = (gasConc*flowTotal)/gasBottle
    return float(flow)

for a in range(len(h2oFlowSetPoint)+1):
    if a <2:
        h2oFlow = h2oFlowSetPoint[a]
        for b in range(len(ch4Conc)+1):
            if b < len(ch4Conc):
                ch4Flow = genFlow(ch4Conc[b],ch4BottleConc)
                zeroAirFlow = flowTotal - (ch4Flow + h2oFlow)
                flowMatrix.append([h2oFlow, 0.0, zeroAirFlow, ch4Flow])
            else:
                concFlowDirectionDown = flowMatrix[-len(ch4Conc):]
                for c in range(len(concFlowDirectionDown)-1):
                    flowMatrix.append(concFlowDirectionDown[4-c])
    else:
        for d in range(len(ch4Conc)+1):
            if d < len(ch4Conc):
                ch4Flow = genFlow(ch4Conc[d],ch4BottleConc)
                zeroAirFlow = flowTotal - (ch4Flow + h2oFlowSetPointLastLeg[d])
                flowMatrix.append([h2oFlowSetPointLastLeg[d], 0.0, zeroAirFlow, ch4Flow])
            else:
                concFlowDirectionDown = flowMatrix[-len(ch4Conc):]
                for c in range(len(concFlowDirectionDown)-1):
                    flowMatrix.append(concFlowDirectionDown[4-c])

NEXT = "StateTestMFC"
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()
#Test to see if analyzer can communicate with MFC
exe = 'ValveSequencer.exe'
valveSeqKill = exeKill(exe)

try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: % on MFC Controller-Please advise\n'%(mfcOpenChannel))
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,5):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum Flow Rate of MFC Channel[%s] is %s\n'%(ch,channelRangeList[ch-1]))
    NEXT = "StateWaitMeasuring"    
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot retrieve max flow rate of MFC channels-Please advise\n')
    NEXT = "StateDone"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring\n")
    logFunc("Now will wait for instrument to reach steady state\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    if analyzerType in ["FCDS", "FDDS"]:
        adjustParam = ["adjust_30", "adjust_5"]  
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 148.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 148 Torr\n")
        NEXT = "StateInstrEtalonCert"
"""        
    
[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45.0 C\n")
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if abs(cmVal) > 0.0003:
            logFunc("Waiting for WLM to center\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        logFunc("Verified Instrument WLM is centered\n")
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        setFlow(flowMatrix[22])
        #Start of first cycle
        cycleCount = 0        
        #Measured Value Lists
        if analyzerType in ["FCDS", "FDDS"]:
            if instrMode == "Precision":           
                paramMeas = ["HP_12CH4", "13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax"]
                paramMeasFull = ["HP_12CH4", "13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax", 
                                    "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4"]
                paramMeasArray = {"HP_12CH4":[], "13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[],
                                    "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[]}
                aveParamMeasArray = {"HP_12CH4":[], "13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[],
                                    "SeqIdx":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[]}
            clearMeasBuffer()
            logFunc('Start H2O Check\n')
            NEXT = "StateH2OCheck"     
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()
if (time.time() - h2oCheckTime) < 360.0:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateH2OCheck"
    else:
        checkH2OMeas.append(meas["H2O"])
        NEXT = "StateH2OCheck"
else:
    if analyzerType in ["FCDS", "FDDS"]:
        aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
        if aveH2OVal > 2.0:
            logFunc('Measured H2O Peak Level is high enough for this test\n')
            clearMeasBuffer()            
            seqIdx = 0
            NEXT = "StateSetMFC"
        else:
            GUI.popPause("Measured H2O Conc is too low for test\n","Coordinator2DInterference")
            NEXT = "StateDone"            

"""        

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(f1, f2, f3, f4) = flowMatrix[seqIdx]
channelsFlowRate = [float(f) for f in [f1, f2, f3, f4]]
logFunc('Set MFC Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
 
if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        for param in paramMeas:
            paramMeasArray[param].append(meas[param])  
        paramMeasArray['SeqIdx'].append(seqIdx)        
        for ch in range(1,5):
            command = "FL %d" %ch
            mfcIntrf.sendString(command)
            ret = mfcIntrf.getLine()
            retConvert = channelRangeList[ch-1]*float(ret)/1000.0
            if ch == 1:
                paramMeasArray["SetFlow1"].append(channelsFlowRate[0])
                paramMeasArray["ActFlow1"].append(getFlow(ch))
            elif ch == 2:
                paramMeasArray["SetFlow2"].append(channelsFlowRate[1])
                paramMeasArray["ActFlow2"].append(getFlow(ch))
            elif ch == 3:
                paramMeasArray["SetFlow3"].append(channelsFlowRate[2])
                paramMeasArray["ActFlow3"].append(getFlow(ch))
            elif ch == 4:
                paramMeasArray["SetFlow4"].append(channelsFlowRate[3])
                paramMeasArray["ActFlow4"].append(getFlow(ch))                
        NEXT = "StateDataCollect"
            
else:
    NEXT = "StateDataGenAve"
"""

[StateDataGenAve]
action = """
paramDictList = []
calVal = aveData(paramMeasFull)
paramDict = dict(zip(paramMeasFull,paramDictList))
paramDict['Mode'] = instrMode
fileDataFunc(paramDict)
    
#Write Data to .csv file
if cycleCount <2:
    if seqIdx < (len(flowMatrix)-1):
        seqIdx += 1
        logFunc('Next seqIdx: %s\n'%(seqIdx))
        NEXT = "StateSetMFC"
    else:
        cycleCount += 1
        seqIdx = 0
        logFunc('Next seqIdx: %s\n'%(seqIdx))
        NEXT = "StateSetMFC"
else:
    if validationModeStatus == 'N' or validationModeStatus == 'n':
        if analyzerType in ["FCDS", "FDDS"]:
            NEXT = "StateDataMultiLinearFit"
"""

[StateDataMultiLinearFit]
action = """
#Calculate CrossProduct
crossProduct = []
for a in range(len(aveParamMeasArray['peak30_spec'])):
    crossProduct.append((aveParamMeasArray['peakheight_5'][a]*aveParamMeasArray['peak30_spec'][a]))
pPrime = [1]*len(aveParamMeasArray['ch4_splinemax'])
valueMatrix = column_stack([aveParamMeasArray['ch4_splinemax'], aveParamMeasArray['peak30_spec'], crossProduct, pPrime])
coeff = linalg.lstsq(valueMatrix, aveParamMeasArray['peakheight_5'])
#Append Coefficients to .csv file
ch4SplineMaxCoeff = '%s'%(-coeff[0][0])
peak30SpecCoeff = '%s'%(-coeff[0][1])
crossProductCoeff = '%s'%(-coeff[0][2])
yIntercept = '%s'%(-coeff[0][3])
fileDataFunc(dict(Comment = 'Signs have already been negated\n'))
fileDataFunc(dict(Comment = 'Calculated CH4 SplineMax coefficient is %s\n'%(ch4SplineMaxCoeff)))
fileDataFunc(dict(Comment = 'Calculated Peak30 coefficient is %s\n'%(peak30SpecCoeff)))
fileDataFunc(dict(Comment = 'Calculated Peak30_Spec and Peakheight_5 bilinear coefficient is %s\n'%(crossProductCoeff)))
fileDataFunc(dict(Comment = 'Calculated Y-Intercept coefficient is %s\n'%(yIntercept)))
logFunc('Signs have already been negated\n')
logFunc('Calculated CH4-SplineMax coefficient = %s\n'%(ch4SplineMaxCoeff))
logFunc('Calculated Peak30 coefficient = %s\n'%(peak30SpecCoeff))
logFunc('Calculated Peak30_Spec and Peakheight_5 bilinear coefficient = %s\n'%(crossProductCoeff))
logFunc('Calculated Y-Intercept coefficient = %s\n'%(yIntercept))
NEXT = "StateCoeffImplement"
"""

[StateCoeffImplement]
action = """
timeStr = strftime("%Y%m%d_%H%M%S")
#.Ini file of Before and Proposed Values
correctFitFile = r'/home/picarro/I2000/InstrConfig/Integration/2DInterferenceHP-CH4_H2O/%s-2D_CH4_H2O-CorrectedFits_%s.ini' %(analyzerType, timeStr)
corrConfig = ConfigObj(correctFitFile)

if analyzerType in ["FCDS", "FDDS"]:
    #Write new Values to .ini File
    configPath = r'/home/picarro/I2000/InstrConfig/Calibration/InstrCal/InstrCal.ini'
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {'Peak5_water_lin_low_conc': '%s' %(config['Data']['Peak5_water_lin_low_conc']),
                    'Peak5_water_bilin_low_conc': '%s' %(config['Data']['Peak5_water_bilin_low_conc'])}
    corrConfig['Old Fit Values'] = oldFitValues
    corrConfig.write()
    #New Fit Values
    config['Data']['Peak5_water_lin_low_conc'] = peak30SpecCoeff
    config['Data']['Peak5_water_bilin_low_conc'] = crossProductCoeff
    config.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {'Peak5_water_lin_low_conc': '%s'%(str(peak30SpecCoeff)),
                    'Peak5_water_bilin_low_conc': '%s'%(str(crossProductCoeff))}
    corrConfig['New Fit Values'] = newFitValues
    corrConfig.write()
    NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("2D CH4_H2O for iCH4 Interference Test is now complete\n","Coordinator2DInterference_CH4_H2O")
endFlowState = [0.0, 0.0, 0.0, 0.0]
setFlow(endFlowState)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""