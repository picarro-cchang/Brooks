################################################################################################################################################################
#Date:              Date Modified:          Notes:               
#20120203           E.Lai                   3D CO2, CH4, & H2O Interference Test
################################################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "validationMode", "Is Tester running a Validation Test (Y or N)", "Y"
1 = "relationship", "Is this analyzer the Master (Y or N)", "Y"
2 = "analyzerCount", "Are more than 1 analyzer running this this test (Y or N)", "Y"

[FlowSeq]
1   =   900.0,  0.2,    52.0,   347.8,  0.02
2   =   900.0,  0.2,    52.0,   346.8,  1.50
3   =   900.0,  0.2,    52.0,   345.3,  2.50
4   =   900.0,  0.2,    52.0,   342.8,  5.00
5   =   900.0,  0.2,    52.0,   337.8,  10.0
6   =   900.0,  0.2,    52.0,   327.8,  20.0
7   =   900.0,  0.2,    52.0,   307.8,  40.0
8   =   900.0,  0.2,    52.0,   307.8,  0.02
9   =   900.0,  150.0,  52.0,   196.75, 1.50
10  =   900.0,  150.0,  52.0,   195.5,  2.50
11  =   900.0,  150.0,  52.0,   193.0,  5.00
12  =   900.0,  150.0,  52.0,   188.0,  10.0
13  =   900.0,  150.0,  52.0,   178.0,  20.0
14  =   900.0,  150.0,  52.0,   158.0,  40.0
15  =   900.0,  0.2,    52.0,   347.78, 0.02
16  =   900.0,  300.0,  52.0,   46.75,  1.50
17  =   900.0,  300.0,  52.0,   45.5,   2.50
18  =   900.0,  300.0,  52.0,   43.0,   5.00
19  =   900.0,  300.0,  52.0,   38.0,   10.0
20  =   900.0,  300.0,  52.0,   28.0,   20.0
21  =   900.0,  300.0,  52.0,   8.0,    40.0
22  =   900.0,  000.0,  00.0,   0.0,    00.0

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/3DInterference/3D_Interference"

[SerialPorts]
MFC = COM2

[Output]
#iCO2 Param
12CO2               = 12CO2Mean,        %10.4f
13CO2               = 13CO2Mean,        %10.4f
Delta_Raw           = DeltaMean,        %10.4f
H2O                 = H2oMean,          %10.4f
peak87_baseave_spec = Peak87Spec,       %10.4f
peak88_baseave      = Peak88Base,       %10.4f
peak_75             = Peak75,           %10.4f
Ratio_Raw           = RatioMean,        %2.5f
ch4_splinemax_spec  = CH4spline,        %10.4f
CH4                 = CH4Mean,          %10.4f
measTime            = Epoch Time,       %10.4f
#MFC Param
SeqIdx              = seqIdx,           %10s
ActFlow1            = ActFlow1,         %10.2f
ActFlow2            = ActFlow2,         %10.2f
ActFlow3            = ActFlow3,         %10.2f
ActFlow4            = ActFlow4,         %10.2f
SetFlow1            = SetFlow1,         %10.2f
SetFlow2            = SetFlow2,         %10.2f
SetFlow3            = SetFlow3,         %10.2f
SetFlow4            = SetFlow4,         %10.2f
#Comment
Comment             = Comment,          %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join 
from time import strftime
from configobj import ConfigObj
from pylab import*
#from matplotlib import pyplot as plt
from matplotlib import dates
from matplotlib.ticker import MaxNLocator
from matplotlib.patches import Rectangle
import datetime
import serial
import os
import time
import datetime
#Initial Time Stamp
timeStr = strftime("%Y%m%d_%H%M%S")
#Range List to determine flow rate of meter
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#Validation Confirmation
validationModeStatus = str(editParamDict["validationMode"])
relationshipStatus = str(editParamDict["relationship"])
analyzerCountStatus = str(editParamDict["analyzerCount"])
#List of Defintions to command MFC
#definition to open MFC Channel
def openChannel():
    try:
        for ch in range(1,5):
            mfcIntrf.sendString("ON %d"%(ch))
            print 'Opened Channel %s'%(ch)
            return ch
    except Exception, err:
        logFunc(err)
        logFunc('Cannot open Channel(%s)\n'%ch)
#Definition to set flow rate of channel        
def setFlow(flowList):
    for ch in range(1,5):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d\n" % (ch, setpoint))
#Definition to read the actual flow rate of that particular MFC channel        
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0
#Definition to kill .exe in Supervisor Tree
def exeKill(exe):
    try:
        os.system("taskkill /im %s /f"%(exe))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable .exe - Please advise.\n')
    sleep(2.0)
#Definition to calculate mean of each conc step    
def aveData(paramMeasArray, paramMeasValFull, aveParamMeasArray, paramDictList):
    for a in paramMeasValFull:
        meanMeas = average(paramMeasArray[a][int(0.35*len(paramMeasArray[a])):])
        aveParamMeasArray[a].append(meanMeas)
        paramDictList.append(meanMeas)
        #Delete data after concentration step
        paramMeasArray[a][:] = []
            
#AnalyzerType
analyzerType = getAnalyzerType()
validation = False
#Query the user to see if CO2-CH4 Interference has been completed
GUI.popPause('Verify CFF Analyzer has completed CO2-CH4 Interferene Test. If not, complete CO2-CH4 test before starting 3D Interference Test.')
#.Ini file of Before and Proposed Values
correctFitFile = 'C:\\Picarro\\G2000\\InstrConfig\\Integration\\3DInterference\\%s_3DCorrectedFits.ini' %(analyzerType)
corrConfig = ConfigObj(correctFitFile)    
#Flow Sequence 
flowSeq = config["FlowSeq"]
lenSeq  = len(flowSeq)
logFunc('Their are %s steps in 3D Interference test'%(lenSeq))
seqIdx  = 1
#Relationship Start Step Count
seqIdxSlave = 1
#User selects analyzer type
if analyzerType in ["CFFDS", "CFGDS"]:
    if relationshipStatus == "Y" or relationshipStatus == "y":
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_87", "adjust_88", "12CO2", "13CO2", "Delta_Raw", "H2O", "CH4", "c12_pzt_stdev", 
                                        "c13_pzt_stdev", "peak_75", "peak87_baseave_spec", "peak88_baseave", "Ratio_Raw", "ch4_splinemax_spec"],200)
    else:
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_87", "adjust_88", "12CO2", "13CO2", "Delta_Raw", "H2O", "CH4", "c12_pzt_stdev", 
                                        "c13_pzt_stdev", "peak_75", "peak87_baseave_spec", "peak88_baseave", "Ratio_Raw", "ch4_splinemax_spec", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3",
                                        "SetFlow1", "SetFlow2", "SetFlow3"],200)
    logFunc("Instrument is an iCO2 (C12,C13) analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateRetrieveCoeffs"
else:
    logFunc("Instrument Type is not supported.\n")
    NEXT="StateDone"    
"""

[StateRetrieveCoeffs]
action = """
configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\FitterConfig.ini"
currConfig = ConfigObj(configPath)
try:
    #Need to convert strings to numerical values
    oldConfigValues = {'Peak88_offset': '%s' %(currConfig['Peak88_offset']),
                        'Peak88_water_linear': '%s' %(currConfig['Peak88_water_linear']),
                        'Peak88_bilinear': '%s' %(currConfig['Peak88_bilinear']),
                        'Methane_spline_offset': '%s' %(currConfig['Methane_spline_offset']),
                        'Peak88_methane_linear': '%s' %(currConfig['Peak88_methane_linear']),
                        'Peak88_methane_quadratic': '%s' %(currConfig['Peak88_methane_quadratic']),
                        'Peak88_methane_H2O_bilinear': '%s' %(currConfig['Peak88_methane_H2O_bilinear'])}
    if relationshipStatus == "Y" or relationshipStatus == "y":
        NEXT = "StateSocketInterface"
    else:
        NEXT = "StateTestMFC"
except Exception, err:
    try:
        #This feature is in place because 'Peak88_methane_H2O_bilinear' is not always present. Coordinator will manually add this value to the definition list.
        oldConfigValues = {'Peak88_offset': '%s' %(currConfig['Peak88_offset']),
                            'Peak88_water_linear': '%s' %(currConfig['Peak88_water_linear']),
                            'Peak88_bilinear': '%s' %(currConfig['Peak88_bilinear']),
                            'Methane_spline_offset': '%s' %(currConfig['Methane_spline_offset']),
                            'Peak88_methane_linear': '%s' %(currConfig['Peak88_methane_linear']),
                            'Peak88_methane_quadratic': '%s' %(currConfig['Peak88_methane_quadratic'])}
        oldConfigValues['Peak88_methane_H2O_bilinear'] = '0.0'
        if analyzerCountStatus == "Y" or analyzerCountStatus == "y":
            if relationshipStatus == "Y" or relationshipStatus == "y":
                NEXT = "StateSocketInterface"
            else:
                NEXT = "StateWaitMeasuring"
        else:
            NEXT = "StateTestMFC"
    except Exception, err:
        logFunc(err)
        logFunc('Cannot retrieve Correction Parameters from FitterConfig.ini.\n')
        NEXT = "StateDone"
"""

[StateSocketInterface]
#Define socket interface with master/slave analyzers
action = """
try:
    sList = [SocketInterface("localhost"), SocketInterface("10.100.3.82")]
    NEXT = "StateTestMFC"
except Exception, err:
    logFunc(err)
    logFunc('Cannot establish connection with seconday instruments.\n')
    NEXT = "StateTestMFC"    
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()
#Kill valve-sequencer.exe
exe = 'ValveSequencer.exe'
valveSeqKill = exeKill(exe)
#Test to see if analyzer can communicate with MFC
try:
    for ch in range(1,5):
        mfcIntrf.sendString("ON %d"%(ch))
        logFunc('Opened Channel %s\n' %(ch))
except Exception, err:
    logFunc(err)
    logFunc('Cannot open Channel(%s)\n'%ch)
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel       
    for ch in range(1,5):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum Flow Rate of MFC Channel[%s] is %s.\n'%(ch,channelRangeList[ch-1]))        
    NEXT = "StateWaitMeasuring"    
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot retrieve max flow rate of MFC Channel %s. Please advise.\n'%(ch))
    NEXT = "StateDone"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    pztStart = 0
    if analyzerType in ["CFFDS", "CFGDS"]:
        adjustParam = ["adjust_87", "adjust_88"]
        pztParam = ["c12_pzt_stdev", "c13_pzt_stdev"]
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure
if analyzerType in ["CFFDS", "CFGDS"]:
    a = "Delta_Raw"

if not meas or (a not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPressMeas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPressMeas - 140.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""        
    
[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45.0 C.\n")
        NEXT = "StatePZTNoise"
"""

[StatePZTNoise]
action = """
meas = measGetBufferFirst()
#Wait for PZT Noise to drop below a certain threshold
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StatePZTNoise"
else:
    for pztCount in range(len(pztParam)):
        pztVal = meas[pztParam[pztCount]]
        if pztVal > 300.0:
            logFunc("Waiting for PZT to center.\n")
            pztStart = 0
            NEXT = "StatePZTNoise"
        else:
            pztStart += 1
    if pztStart == len(pztParam):
        logFunc("Verified Instrument PZT is centered.\n")
        NEXT = "StateInstrAdjustCert"
    else:
        pztStart = 0
        NEXT = "StatePZTNoise"
"""     

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if abs(cmVal) > 0.0001:
            logFunc("Waiting for WLM to center.\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        logFunc("Verified Instrument WLM is centered.\n")
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        if relationshipStatus == "Y" or relationshipStatus == "y":
            checkFlow = [350.0, 0.0, 0.0, 0.0]
            setFlow(checkFlow)
        #Measured Value Lists
        if analyzerType in ["CFFDS", "CFGDS"]:
            paramMeasArray = {'12CO2':[], '13CO2':[], 'Delta_Raw':[], 'H2O':[], 'peak87_baseave_spec':[], 'peak88_baseave':[], 'peak_75':[], 'Ratio_Raw':[], 'ch4_splinemax_spec':[], 
                                    'CH4':[], 'measTime':[], 'SeqIdx':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[], 'ActFlow4':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'SetFlow4':[]}
            aveParamMeasArray = {'12CO2':[], '13CO2':[], 'Delta_Raw':[], 'H2O':[], 'peak87_baseave_spec':[], 'peak88_baseave':[], 'peak_75':[], 'Ratio_Raw':[], 'ch4_splinemax_spec':[], 
                                    'CH4':[], 'measTime':[], 'SeqIdx':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[], 'ActFlow4':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'SetFlow4':[]}                    
            if relationshipStatus == "Y" or relationshipStatus == "y":
                paramMeasVal = ['12CO2', '13CO2', 'Delta_Raw', 'H2O', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75', 'Ratio_Raw', 'ch4_splinemax_spec', 'CH4', 'measTime']
            else:
                paramMeasVal = ['12CO2', '13CO2', 'Delta_Raw', 'H2O', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75', 'Ratio_Raw', 'ch4_splinemax_spec', 'CH4', 'measTime', 'SeqIdx', 
                                'ActFlow1', 'ActFlow2', 'ActFlow3', 'ActFlow4', 'SetFlow1', 'SetFlow2', 'SetFlow3', 'SetFlow4']                
            paramMeasValFull = ['12CO2', '13CO2', 'Delta_Raw', 'H2O', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75', 'Ratio_Raw', 'ch4_splinemax_spec', 'CH4', 'measTime', 'SeqIdx', 
                                'ActFlow1', 'ActFlow2', 'ActFlow3', 'ActFlow4', 'SetFlow1', 'SetFlow2', 'SetFlow3', 'SetFlow4']
            clearMeasBuffer()
            logFunc('Start H2O Check of station.\n')
            NEXT = "StateSetMFC"                                     
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()
if (time.time() - h2oCheckTime) < 300.0:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateH2OCheck"
    else:
        checkH2OMeas.append(meas["H2O"])
        NEXT = "StateH2OCheck"
else:
    aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
    if aveH2OVal < 2.3:    
        logFunc('Measured H2O Peak Level is %d\n'%(aveH2OVal))
        GUI.popPause("Peak H2O level is too low. Please advise.\n", "Coordinator2DInterference")
        NEXT = "StateDone"
    else:
        logFunc('Measured H2O Peak is sufficient for test.\n')
        logFunc('Now will commence 3D (CO2,CH4,H2O) Interference Test.\n')
        clearMeasBuffer()
        NEXT = "StateSetMFC"
"""        

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(duration, f1, f2, f3, f4) = flowSeq[str(seqIdx)]
channelsFlowRate = [float(f) for f in [f1, f2, f3, f4]]
logFunc('Set MFC Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
if not meas or ('Delta_Raw' not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateDataCollect"
else:
    if relationshipStatus == "Y" or relationshipStatus == "y":
        if time.time() < stopTime:
            for paramCount in (paramMeasVal):
                paramMeasArray[paramCount].append(meas[paramCount])
            #Step Id
            paramMeasArray['SeqIdx'].append(seqIdx)
            #Actual Flow
            for ch in range(1,5):
                command = "FL %d" %ch
                mfcIntrf.sendString(command)
                if ch == 1:
                    paramMeasArray['ActFlow1'].append(getFlow(ch))
                    paramMeasArray['SetFlow1'].append(channelsFlowRate[ch-1])
                elif ch == 2:
                    paramMeasArray['ActFlow2'].append(getFlow(ch))
                    paramMeasArray['SetFlow2'].append(channelsFlowRate[ch-1])
                elif ch == 3:
                    paramMeasArray['ActFlow3'].append(getFlow(ch))
                    paramMeasArray['SetFlow3'].append(channelsFlowRate[ch-1])
                elif ch == 4:
                    paramMeasArray['ActFlow4'].append(getFlow(ch))
                    paramMeasArray['SetFlow4'].append(channelsFlowRate[ch-1])
                    
            #Insert sequence index and flow rates into data logs
            if analyzerCountStatus == "Y" or analyzerCountStatus == "y":
                try:
                    for sIdx in range(len(sList)):
                        sIntrf = sList[sIdx]
                        sIntrf.setTagalongData("SeqIdx", seqIdx)
                        for ch in range(1,5):
                            sIntrf.setTagalongData("SetFlow%d" % ch, channelsFlowRate[ch-1])
                            sIntrf.setTagalongData("ActFlow%d" % ch, getFlow(ch))
                except Exception, err:
                    logFunc ('%s\n'%err)
            NEXT = "StateDataCollect"
        else:
            seqIdx = seqIdx+1
            logFunc('Next seqIdx: %s\n'%(seqIdx))
            NEXT = "StateDataGenAve"        
    else:
        if not meas:
            sleep(1.0)
            logFunc('.')
            NEXT = "StateDataCollect"
        else:
            if meas["SeqIdx"] == seqIdxSlave:
                for paramCount in (paramMeasVal):
                    paramMeasArray[paramCount].append(meas[paramCount])
                NEXT = "StateDataCollect"   
            else:
                if len(paramMeasArray['Delta_Raw']) > 5:
                    seqIdxSlave = seqIdxSlave+1
                    logFunc('Next seqIdx: %s\n'%(seqIdxSlave))
                    NEXT = "StateDataGenAve"
                else:
                    NEXT = "StateDataCollect"
"""

[StateDataGenAve]
action = """
paramDictList = []
calVal = aveData(paramMeasArray, paramMeasValFull, aveParamMeasArray, paramDictList)
fileDataFunc(dict(zip(paramMeasValFull, paramDictList)))
paramDictList[:] = []
clearMeasBuffer()

#Write Data to .csv file
stepCountMaster = seqIdx
stepCountSlave = seqIdxSlave
if relationshipStatus == "Y" or relationshipStatus == "y": 
    currStep = stepCountMaster
else:
    currStep = stepCountSlave

if currStep < lenSeq:
    NEXT = "StateSetMFC"
else:
    if validationModeStatus == 'N' or validationModeStatus == 'n':
        if analyzerType in ["CBDS", "CFFDS", "CHADS"]:
            NEXT = "StateDataCBMultiRegressionFit"
    elif validationModeStatus == 'Y' or validationModeStatus == 'y':
        NEXT = "StateValidationCheck"        
"""

[StateDataCBMultiRegressionFit]
action = """
crossproductPeak87 = []
crossproductCH4SplineMax = []
pPrime = []
#Calculate Cross-product Term for Multi-Linear Regression
for crossVal in range(len(aveParamMeasArray['peak87_baseave_spec'])):
    crossproductPeak87.append(float(aveParamMeasArray['peak87_baseave_spec']*aveParamMeasArray['peak_75']))
    crossproductCH4SplineMax.append(float(aveParamMeasArray['ch4_splinemax_spec']*aveParamMeasArray['peak_75']))
    pPrime.append(1.0)
    
#Calculate Coefficients of multivariate Regression
valueMatrix = column_stack([aveParamMeasArray['peak87_baseave_spec'], aveParamMeasArray['peak_75'], crossproductPeak87, crossproductCH4SplineMax, pPrime])
coeff = linalg.lstsq(valueMatrix, aveParamMeasArray['peak88_baseave'])
#Coefficients of Multi-Linear Regression-Need to negate sign of coefficient
peak88CH4H2OBilinear = -coeff[0][3]
logFunc('Measured Peak88_methane_H2O_bilinear = %s.\n'%(peak88CH4H2OBilinear))
fileDataFunc(dict(Comment = '%s\n'%(peak88CH4H2OBilinear)))
NEXT = "StateTestCoefficient"
"""

[StateTestCoefficient]
action = """
def deltaGen(deltaList,e):
    a = float(oldConfigValues['Peak88_offset'])
    b = float(oldConfigValues['Peak88_water_linear'])
    c = float(oldConfigValues['Peak88_methane_linear'])
    d = float(oldConfigValues['Peak88_bilinear'])
    
    for delNum in range(len(aveParamMeasArray['peak88_baseave'])):
        deltaVal = 33558.0*((aveParamMeasArray['peak88_baseave'][delNum]-(-a)-(-b*aveParamMeasArray['peak_75'][delNum])-(-c*aveParamMeasArray['ch4_splinemax_spec'][delNum])-(-d*crossproductPeak87[delNum])-(-e*crossproductCH4SplineMax[delNum]))/aveParamMeasArray['peak87_baseave_spec'][delNum])-1000.0
        deltaList.append(deltaVal)
        
#Before applying 3D Correction
preCorrDelta = []
e = float(oldConfigValues['Peak88_methane_H2O_bilinear'])
deltaGen(preCorrDelta,e)
#After applying 3D Correction
postCorrDelta = []
e = peak88CH4H2OBilinear
deltaGen(postCorrDelta,e)
NEXT = "StateTestCoefficientPlot"            
"""

[StateTestCoefficientPlot]
action = """
#Convert Epoch time to following format: ('%m/%d/%y, %H:%M')
epoch2Current = []
for epochTime in paramMeasArray['measTime']:
    epoch2Cuurrent.append(datetime.datetime.fromtimestamp(epochTime))
  
dts = map(datetime.datetime.fromtimestamp, paramMeasArray['measTime'])
fds = dates.date2num(dts) 
# matplotlib date format object
hfmt = dates.DateFormatter('%m/%d/%y, %H:%M')

#Pre-Value Change Plot
fullPlot = figure()
ax = fullPlot.add_subplot(111)
ax.plot(fds, preCorrDelta, 'ro--', fds, postCorrDelta, 'go-')
ax.xaxis.set_major_locator(dates.MinuteLocator())
ax.xaxis.set_major_locator(MaxNLocator(8))
ax.xaxis.set_major_formatter(hfmt)
ax.set_title('Delta (per mil) over Time')
ax.grid(True, color = 'gray')
xticks(rotation='vertical')
ax.set_xlabel('Date/ Time', color = 'black', fontweight = 'bold')
ax.set_ylabel('Delta Raw (per mil)', color = 'black', fontweight = 'bold')
subplots_adjust(bottom=.3)
#ax2 = ax1.twinx()
#ax2.plot(fds, paramMeasArray['CH4'], 'ro-')
#ax2.set_ylabel('CH4 (ppm)', color = 'red', fontweight = 'bold')
#leg = ax.legend(('Pre-corrected Delta Meas', 'Pre-corrected Delta Meas')), 'lower right', shadow = True)
savefig((join(outputDir, "CO2InterferencePlot" + timeStr + ".png")))
NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
#Write new Values to .ini File
configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\FitterConfig.ini"
config = ConfigObj(configPath)
#Write Old Values to .ini file
corrConfig['Old Fit Values'] = oldConfigValues
corrConfig.write()
#New Fit Values
config['Peak88_methane_H2O_bilinear'] = str(-coeff[0][3])
config.write()
#Write New Values to Summary Coefficient Test File
newFitValues = {'Peak88_offset': '%s'%(currConfig['Peak88_offset']),
                'Peak88_water_linear': '%s'%(currConfig['Peak88_water_linear']),
                'Peak88_bilinear': '%s'%(currConfig['Peak88_bilinear']),
                'Methane_spline_offset': '%s' %(currConfig['Methane_spline_offset']),
                'Peak88_methane_linear': '%s' %(currConfig['Peak88_methane_linear']),
                'Peak88_methane_quadratic': '%s' %(currConfig['Peak88_methane_quadratic']),
                'Peak88_methane_H2O_bilinear': '%s'%(str(-coeff[0][3]))}
corrConfig['New Fit Values'] = newFitValues
corrConfig.write()
NEXT = "StateDone"  
"""

[StateValidationCheck]
action = """
p_pH2OVal = []
p_pVal = min(aveParamMeasArray['Delta_Raw']) - max(aveParamMeasArray['Delta_Raw'])
#Average Delta Value
aveDeltaVal = average(aveParamMeasArray['Delta_Raw'])
#Convert Epoch time to following format: ('%m/%d/%y, %H:%M')
#Instantiating Plot Figure
figure()
plot(aveParamMeasArray['CH4'], aveParamMeasArray['Delta_Raw'])
ax1.xaxis.set_major_locator(MaxNLocator(8))
ax1.xaxis.set_major_locator(dates.MinuteLocator())
ax1.xaxis.set_major_formatter(hfmt)
xticks(rotation='vertical')
ax1.set_title('Raw Delta over Time')
ax1.grid(True, color = 'gray')
ax1.set_xlabel('Time', color = 'black', fontweight = 'bold')
ax1.set_ylabel('Gas Concentration (ppm)', color = 'black', fontweight = 'bold') 
ax2 = ax1.twinx()
rect = Rectangle((-1, -1), 2, 2, facecolor="#aaaaaa")
gca().add_patch(rect)
ax2.set_ylabel('H2O (%v)', color = 'black', fontweight = 'bold')
leg = ax1.legend(('C12 ppm', 'CH4 ppm', 'Delta per mil'), 'lower right', shadow = True)
NEXT = "StateDone"

#subplot(211)
#stepCount = int(len(analyzeC12Peak)/5)
#for concCount in range(stepCount):
#    plot(analyzeC12Peak[(5*concCount):((5*concCount)+5)], analyzeDelta[(5*concCount):((5*concCount)+5)], 'o-')
#xlabel('CH4 Conc (ppm)', color = 'g')
#ylabel('Delta Raw (per mil)', color = 'g')
#text(float(0.15), (max(analyzeDelta)- float(0.20)), 'Peak to Peak over Conc. Range: %f' %(p_pVal), fontsize = 10, fontweight = 'bold')
#title('CH4 vs. Delta After Correcting for Interference', color = 'black', fontweight = 'bold')
#subplot(212)
#for ppH2OCount in range(stepCount):
#    h2oSens = polyfit(analyzeH2OPeak[(5*ppH2OCount):((5*ppH2OCount)+5)], analyzeDelta[(5*ppH2OCount):((5*ppH2OCount)+5)], 1)
#    p_pH2OVal.append(round(h2oSens[0],3))
#for h2oCount in range(stepCount):
#    plot(analyzeH2OPeak[(5*h2oCount):((5*h2oCount)+5)], analyzeDelta[(5*h2oCount):((5*h2oCount)+5)], 'o-')
#text(float(0.15), (max(analyzeDelta)- float(0.20)), 'H2O Sensitivity Values: %s' %(p_pH2OVal), fontsize = 8, fontweight = 'bold')   
#xlabel('H2O Peak ', color = 'b')
#ylabel('Delta Raw (permil)', color = 'b')
#savefig((join(outputDir,"CO2InterferencePlot" + timeStr + ".png")))
#NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("3D Interference Test is now complete.\n","3D Interference Coordinator")
endFlowState = [0.0, 0.0, 0.0, 0.0]
setFlow(endFlowState)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""