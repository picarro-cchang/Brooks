############################################################################################################################################
#Date:              Date Modified:         Notes:
#20110906           E.Lai                  Dry Check
############################################################################################################################################
[FlowSeq]
#Step Duration Channel1 Channel2
0  = 150.0, 00.5,   49.5
1  = 150.0, 01.0,   49.0
2  = 150.0, 02.0,   48.0
3  = 150.0, 03.0,   47.0
4  = 150.0, 05.0,   45.0
5  = 150.0, 07.0,   43.0
6  = 150.0, 10.0,   40.0
7  = 150.0, 15.0,   35.0
8  = 150.0, 20.0,   100.0
9  = 150.0, 15.0,   35.0
10 = 150.0, 10.0,   40.0
11 = 150.0, 07.0,   43.0
12 = 150.0, 05.0,   45.0
13 = 150.0, 03.0,   47.0
14 = 150.0, 02.0,   48.0
15 = 150.0, 01.0,   49.0

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/DryCheck/DryCheck"

[SerialPorts]
MFC = COM2

[Output]
#iCO2 Param
CO2_dry    = CO2_dry,   %10.4f
CH4_dry    = CH4_dry,   %10.4f
H2O        = H2O,       %10.4f
CO         = CO,        %10.4f
12CO2_dry  = 12CO2_dry, %10.4f
13CO2_dry  = 13CO2_dry, %10.4f
#MFC Param
seqIdx     = seqIdx,    %10s
ActFlow1   = ActFlow1,  %10.2f
ActFlow2   = ActFlow2,  %10.2f
SetFlow1   = SetFlow1,  %10.2f
SetFlow2   = SetFlow2,  %10.2f
#Comment
Comment    = Comment,   %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
from configobj import ConfigObj
from pylab import figure, plot, grid, xlabel, ylabel, title, savefig, text
import binascii
import serial
import os

timeStr = strftime("%Y%m%d_%H%M%S")

#definition to convert ascii to hex
def asctohex(ascString):
    hexList = [hex(ord(x)) for x in ascString]
    return reduce(lambda x,y: hex(int(x,16) + int(y,16)), hexList)

#definition to convert hex to binary
def tobin(x, count = 8):
    return "".join(map(lambda y:str((x>>y)&1), range(count-1, -1, -1))))

#definition to calculate Two's Complement
def twoscomp(numStr):
    return tobin(-int(numStr,2), len(numS;msdfsmdlv;ktr))

#definition to convert binary to hex
def bintohex(s):
    t = ''.join(chr(int(s[i+i+8], 2)) for i in xrange(0, len(s), 8))
    return binascii.hexlify(t)

#Definition to calculate mean of each conc step
def aveData(paramMeas, paramMeasList):
    for count in range(len(paramMeasList)):
        paramDictList.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
        try:
            if paramMeas[count] == "CO2_dry":
                analyzeCO2.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
            elif paramMeas[count] == "CO2":
                analyzeCO2.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            elif paramMeas[count] == "CH4_dry":
                analyzeCH4.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            elif paramMeas[count] == "H2O":
                analyzeH2O.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            elif paramMeas[count] == "CO":
                analyzeCO.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            elif paramMeas[count] == "12CO2_dry":
                analyzeC12.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            elif paramMeas[count] == "13CO2_dry":
                analyzeC13.append(average(paramMeasList[count][int(0.35*len(paramMeasList[count])):]))
                paramMeasList[count][:] = []
            else:
                paramMeasList[count][:] = []
        except Exception, err:
            logFunc(err)
            continue
#Definition Plot
def co2Plot(analyzeH2O, analyzeCO2):
    figure(1)
    plot(analyzeH2O, analyzeCO2, '.', analyzeH2O, polyval(co2Fit, analyzeH2O))
    text(0.5, (0.85*max(analyzeCO2)), sensCO2Val, fontsize = 10, fontweight = 'bold')
    text(0.5, (0.60*max(analyzeCO2)), rangeCO2Dry, fontsize = 10, fontweight = 'bold')
    xlabel('H2O %v')
    ylabel('CO2 (ppm)')
    title('H2O vs. CO2')
    savefig(join(outputDir,"DryCheck_CO2_" + timeStr + ".png"))

def ch4Plot(analyzeH2O, analyzeCH4):
    figure(2)
    plot(analyzeH2O, analyzeCH4, '.', analyzeH2O, polyval(ch4Fit, analyzeH2O))
    text(0.5, (0.85*max(analyzeCH4)), sensCH4Val, fontsize = 10, fontweight = 'bold')
    text(0.5, (0.60*max(analyzeCH4)), rangeCH4Dry, fontsize = 10, fontweight = 'bold')
    xlabel('H2O %v')
    ylabel('CH4 (ppm)')
    title('H2O vs. CH4')
    savefig(join(outputDir,"DryCheck_CH4_" + timeStr + ".png"))

def coPlot(analyzeH2O, analyzeCO):
    figure(3)
    plot(analyzeH2O, analyzeCO, '.', analyzeH2O, polyval(coFit, analyzeH2O))
    text(0.5, (0.85*max(analyzeCO)), sensCOVal, fontsize = 10, fontweight = 'bold')
    text(0.5, (0.60*max(analyzeCO)), rangeCODry, fontsize = 10, fontweight = 'bold')
    xlabel('H2O %v')
    ylabel('CO (ppm)')
    title('H2O vs. CO')
    savefig(join(outputDir,"DryCheck_CO_" + timeStr + ".png"))

def c12Plot(analyzeH2O, analyzeC12):
    figure(3)
    plot(analyzeH2O, analyzeC12, '.', analyzeH2O, polyval(c12Fit, analyzeH2O))
    text(0.5, (0.85*max(analyzeC12)), sensC12Val, fontsize = 10, fontweight = 'bold')
    text(0.5, (0.60*max(analyzeC12)), rangeC12Dry, fontsize = 10, fontweight = 'bold')
    xlabel('H2O %v')
    ylabel('C12 (ppm)')
    title('H2O vs. C12')
    savefig(join(outputDir,"DryCheck_C12_" + timeStr + ".png"))

def c13Plot(analyzeH2O, analyzeC13):
    figure(3)
    plot(analyzeH2O, analyzeC13, '.', analyzeH2O, polyval(c13Fit, analyzeH2O))
    text(0.5, (0.75*max(analyzeC13)), sensC13Val, fontsize = 10, fontweight = 'bold')
    text(0.5, (0.60*max(analyzeC13)), rangeC13Dry, fontsize = 10, fontweight = 'bold')
    xlabel('H2O %v')
    ylabel('C13 (ppm)')
    title('H2O vs. C13')
    savefig(join(outputDir,"DryCheck_C13_" + timeStr + ".png"))

def speciesPlot(analyzerType):
    if analyzerType in ["CFADS", "CFBDS", "CFDDS"]:
        co2Plot(analyzeH2O, analyzeCO2)
        ch4Plot(analyzeH2O, analyzeCH4)
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        co2Plot(analyzeH2O, analyzeCO2)
        ch4Plot(analyzeH2O, analyzeCH4)
        coPlot(analyzeH2O, analyzeCO)
    elif analyzerType in ["CKADS"]:
        co2Plot(analyzeH2O, analyzeCO2)
        coPlot(analyzeH2O, analyzeCO)
    elif analyzerType in ["CFFDS", "CBDS"]:
        c12Plot(analyzeH2O, analyzeC12)
        c13Plot(analyzeH2O, analyzeC13)

#AnalyzerType
analyzerType = getAnalyzerType()

#Output Directory
outputDir = "C:/Picarro/G2000/InstrConfig/Integration/DryCheck"

#Flow Sequence
flowSeq = config["FlowSeq"]
lenSeq  = len(flowSeq)
logFunc('Their are %s steps in Dry Check Test.\n'%(lenSeq-1))
seqIdx  = 0

#User selects analyzer type
if analyzerType in ["CFADS", "CFBDS", "CFDDS", "CFKADS", "CFKBDS", "CKADS", "CFFDS", "CBDS"]:
    if analyzerType in ["CFADS", "CFBDS", "CFDDS"]:
        setMeasBuffer("analyze_CFADS", ["EtalonTemp", "DasTemp", "CavityPressure", "CO2_dry", "CH4_dry", "H2O", "co2_adjust", "ch4_adjust", "h2o_adjust"], 200)
        logFunc("Instrument is a 3 species (CO2,CH4,H2O) analyzer.\n")
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "CO2_dry", "CH4_dry", "H2O", "CO", "co2_adjust", "ch4_adjust", "h2o_adjust", "co_adjust"], 200)
        logFunc("Instrument is a 4 species (CO2,CH4,H2O,CO) analyzer.\n")
    elif analyzerType in ["CKADS"]:
        setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "CO2", "H2O", "CO", "co2_adjust", "co_adjust"],200)
        logFunc("Instrument is a 3 species (CO2,H2O,CO) analyzer.\n")
    elif analyzerType in ["CFFDS", "CBDS"]:
        if analyzerType == "CFFDS":
            setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "12CO2_dry", "13CO2_dry", "H2O", "adjust_75", "adjust_87", "adjust_88"], 200)
        elif analyzerType == "CBDS":
            setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "12CO2_dry", "13CO2_dry", "H2O", "adjust_91", "adjust_87", "adjust_88"], 200)
        logFunc("Instrument is an isotopic CO2 analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"

else:
    logFunc("Instrument Type is not supported.\n")
    NEXT="StateDone"
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()

#Test to see if analyzer can communicate with MFC
exe = 'ValveSequencer.exe'
valveSeqKill = exeKill(exe)

try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2.\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: % on MFC Controller. Please advise.\n'%(mfcOpenChannel))

#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,3):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum flow rate of MFC Channel[%s] is %s.\n'%(ch,channelRangeList[ch-1]))
    NEXT = "StateWaitMeasuring"
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot retrieve max flow rate of MFC channels. Please advise.\n')
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()

#Wait for Instrument to start measuring
if analyzerType in ["CFADS", "CFBDS", "CFDDS"]:
    count = "CO2_dry"
elif analyzerType in ["CKADS", "CFKADS", "CFKBDS"]:
    count = "CO"
elif analyzerType in ["CFFDS", "CBDS"]:
    count = "12CO2_dry"

if count not in meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"

else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    if analyzerType in ["CFADS", "CFBDS", "CFDDS"]:
        adjustParam = ["co2_adjust", "ch4_adjust", "h2o_adjust"]
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        adjustParam = ["co2_adjust", "ch4_adjust", "h2o_adjust", "co_adjust"]
    elif analyzerType in ["CKADS"]:
        adjustParam = ["co2_adjust", "co_adjust"]
    elif analyzerType in ["CFFDS"]:
        adjustParam = ["adjust_87", "adjust_88", "adjust_75"]
    elif analyzerType in ["CBDS"]:
        adjustParam = ["adjust_87", "adjust_88", "adjust_91"]
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()

#Verifiy Cavity Pressure
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"

else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 140.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()

#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrEtalonCert"

else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45.0 C.\n")
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()

#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if abs(cmVal) > 0.0002:
            logFunc("Waiting for WLM to center.\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        logFunc("Verified Instrument WLM is centered.\n")
        clearMeasBuffer()
        setFlow1Meas = []; setFlow2Meas = []
        actFlow1Meas = []; actFlow2Meas = []; seqIdxMeas = []
        if analyzerType in ["CFADS", "CFBDS", "CFDDS"]:
            co2Meas = []; ch4Meas = []; h2oMeas  = []
            analyzeCO2 = []; analyzeCH4 = []; analyzeH2O = []
            paramMeas = ["CO2_dry", "CH4_dry", "H2O"]
            paramMeasList = [co2Meas, ch4Meas, h2oMeas, actFlow1Meas, actFlow2Meas, setFlow1Meas, setFlow2Meas]
            paramDictTitle = ["CO2_dry", "CH4_dry", "H2O", "ActFlow1", "ActFlow2", "SetFlow1", "SetFlow2"]
            paramAnalyze = [analyzeCO2, analyzeCH4, analyzeH2O]
        elif analyzerType in ["CFKADS", "CFKBDS"]:
            co2Meas = []; ch4Meas = []; h2oMeas  = []; coMeas = []
            analyzeCO2 = []; analyzeCH4; analyzeH2O = []; analyzeCO = []
            paramMeas = ["CO2_dry", "CH4_dry", "H2O", "CO"]
            paramMeasList = [co2Meas, ch4Meas, h2oMeas, coMeas, actFlow1Meas, actFlow2Meas, setFlow1Meas, setFlow2Meas]
            paramDictTitle = ["CO2_dry", "CH4_dry", "H2O", "CO", "ActFlow1", "ActFlow2", "SetFlow1", "SetFlow2"]
            paramAnalyze = [analyzeCO2, analyzeCH4, analyzeH2O, analyzeCO]
        elif analyzerType in ["CKADS"]:
            co2Meas = []; h2oMeas = []; coMeas = []
            analyzeCO2 = []; analyzeH2O = []; analyzeCO = []
            paramMeas = ["CO2", "H2O", "CO"]
            paramMeasList = [co2Meas, h2oMeas, coMeas, actFlow1Meas, actFlow2Meas, setFlow1Meas, setFlow2Meas]
            paramDictTitle = ["CO2_dry", "H2O", "CO", "ActFlow1", "ActFlow2", "SetFlow1", "SetFlow2"]
            paramAnalyze = [analyzeCO2, analyzeH2O, analyzeCO]
        elif analyzerType in ["CFFDS", "CBDS"]:
            c12Meas = []; c13Meas = []; h2oMeas = []
            analyzeC12 = []; analyzeC13 = []; analyzeH2O = []
            paramMeas = ["12CO2_dry", "13CO2_dry", "H2O"]
            paramMeasList = [c12Meas, c13Meas, h2oMeas]
            paramDictTitle = ["12CO2_dry", "13CO2_dry", "H2O", "ActFlow1", "ActFlow2", "SetFlow1", "SetFlow2"]
            paramAnalyze = [analyzeC12, analyzeC13, analyzeH2O]
        pyramidCount = 0
        checkFlow = [0.0, 300.0]
        setFlow(checkFlow)
        checkTime = time.time()
        checkH2OMeas = []
        logFunc('Start H2O Level Check to ensure % level is appropriate for test.\n')
        #NEXT = "StateH2OCheck"
        NEXT = "StateSetMFC"
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()

if (time.time() - checkTime) < 360.0:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateH2OCheck"

    else:
        checkH2OMeas.append(meas["H2O"])
else:
    aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
    if aveH2OVal < 2.0:
        logFunc('Measured H2O Peak Level is %d\n'%(aveH2OVal))
        GUI.popInfo("Peak H2O level is too low. Please advise.\n","CoordinatorDryCheck")
        NEXT = "StateDone"
    else:
        logFunc('Measured H2O Peak is sufficient for test.\n')
        NEXT = "StateSetMFC"
"""

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(duration, f1, f2) = flowSeq[str(seqIdx)]
channelsFlowRate = [float(f) for f in [f1, f2]]
logFunc('Set MFC Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()

if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        if seqIdx < 2:
            NEXT = "StateDataCollect"
        else:
            for paramCount in range(len(paramMeas)):
                paramMeasList[paramCount].append(meas[(paramMeas[paramCount])])

            for ch in range(1,3):
                command = "FL %d" %ch
                mfcIntrf.sendString(command)
                ret = mfcIntrf.getLine()
                retConvert = channelRangeList[ch-1]*float(ret)/1000.0
                if ch == 1:
                    setFlow1Meas.append(channelsFlowRate[0])
                    actFlow1Meas.append(getFlow(ch))
                elif ch == 2:
                    setFlow2Meas.append(channelsFlowRate[1])
                    actFlow2Meas.append(getFlow(ch))
            NEXT = "StateDataCollect"

else:
    if seqIdx < 2:
        seqIdx = seqIdx+1
        logFunc('Next seqIdx: %s\n'%(seqIdx))
        NEXT = "StateSetMFC"
    else:
        seqIdx = seqIdx+1
        logFunc('Next seqIdx: %s\n'%(seqIdx))
        NEXT = "StateDataGenAve"
"""

[StateDataGenAve]
action = """
paramDictList = []
calVal = aveData(paramMeas, paramMeasList)
paramDict = dict(zip(paramDictTitle, paramDictList))
paramDict["seqIdx"] = seqIdx-1
fileDataFunc(dict(paramDict))
paramDictList[:] = []
clearMeasBuffer()

if seqIdx != lenSeq:
    NEXT = "StateSetMFC"
else:
    pyramidCount += 1
    seqIdx = 0
    if pyramidCount != 1:
        NEXT = "StateSetMFC"
    else:
        NEXT = "StateDataAnalyze"
"""

[StateDataAnalyze]
action = """
h2oRange = []

for analyzeCount in range(len(paramAnalyze)):
    if paramMeas[analyzeCount] == "H2O":
        h2oRange.append(max(paramAnalyze[analyzeCount]) - min(paramAnalyze[analyzeCount]))
        commVal = 'Measured H2O Range = %s'%((max(paramAnalyze[analyzeCount]) - min(paramAnalyze[analyzeCount])))
    else:
        peakVal = (max(paramAnalyze[analyzeCount]) - min(paramAnalyze[analyzeCount]))*1000.0
        commVal = "Measured Peak to Peak for %s is %s in ppb\n" %(paramMeas[analyzeCount], peakVal)
        if paramMeas[analyzeCount] == "CO2_dry":
            co2Fit = polyfit(analyzeH2O, analyzeCO2,1)
            sensCO2Val = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(co2Fit[0], 5))
            rangeCO2Dry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeCO2)-min(analyzeCO2)), 5))
            fileDataFunc(dict(Comment = sensCO2Val))
        elif paramMeas[analyzeCount] == "CO2":
            co2Fit = polyfit(analyzeH2O, analyzeCO2,1)
            sensCO2Val = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(co2Fit[0],5))
            rangeCO2Dry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeCO2)-min(analyzeCO2)), 5))
            fileDataFunc(dict(Comment = sensCO2Val))
        elif paramMeas[analyzeCount] == "CH4_dry":
            ch4Fit = polyfit(analyzeH2O, analyzeCH4,1)
            sensCH4Val = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(ch4Fit[0],5))
            rangeCH4Dry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeCH4)-min(analyzeCH4)), 5))
            fileDataFunc(dict(Comment = sensCH4Val))
        elif paramMeas[analyzeCount] == "CO":
            coFit = polyfit(analyzeH2O, analyzeCO,1)
            sensCOVal = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(coFit[0],5))
            rangeCODry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeCO)-min(analyzeCO)), 5))
            fileDataFunc(dict(Comment = sensCOVal))
        elif paramMeas[analyzeCount] == "12CO2_dry":
            c12Fit = polyfit(analyzeH2O, analyzeC12, 1)
            sensC12Val = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(c12Fit[0], 5))
            rangeC12Dry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeC12)-min(analyzeC12)), 5))
            fileDataFunc(dict(Comment = senseC12Val))
        elif paramMeas[analyzeCount] == "13CO2_dry":
            c13Fit = polyfit(analyzeH2O, analyzeC13, 1)
            sensC13Val = "Measured Sensitivity for %s is %s"%(paramMeas[analyzeCount], round(c13Fit[0], 5))
            rangeC13Dry = "Measured Range for %s is %"%(paramMeas[analyzeCount], round((max(analyzeC13)-min(analyzeC13)), 5))
            fileDataFunc(dict(Comment = senseC13Val))
        fileDataFunc(dict(Comment = commVal))
#Plot results
speciesPlot(analyzerType)
NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("2D Interference Test is now complete.\n","CoordinatorDryCheck")
channelsFlowRate = [0.0, 0.0]
setFlow(channelsFlowRate)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
