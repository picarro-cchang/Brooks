#############################################################################################################################################
#Date:         Modified By:        Notes:
#20110215      E.Lai               Flight Calibration
#############################################################################################################################################
[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/Integration/FlightCalibration/FlightCal"

[Output]
ambient_press = "AmbientPressure",%10.4f
etalon_temp   = "EtalonTemp",%10.4f
co2_adjust    = "CO2_shift",%10.4f
ch4_adjust    = "CH4_shift",%10.4f
co_adjust     = "CO_shift",%10.4f
h2o_adjust    = "H2O_shift",%10.4f
co2_wlmShift  = "CO2_wlmShift",%10.4f
ch4_wlmShift  = "CH4_wlmShift",%10.4f
co_wlmShift   = "CO_wlmShift",%10.4f
h2o_wlmShift  = "H2O_wlmShift",%10.4f
co2AngShift   = "CO2_AngShift",%10.4f
ch4AngShift   = "CH4_AngShift",%10.4f
coAngShift    = "CO_AngShift", %10.4f
h2oAngShift   = "H2O_AngShift",%10.4f
comment       = "comment",%128s

[Setup]
initial = StateStart
final   = StateDone
error   = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
from pylab import plot, grid, xlabel, ylabel, title, savefig
#Variables for wlm offset
count    = 0
incr     = 0.01
step     = 0
dstep    = 1
max_step = 5
#Zero out the relax values
instrHotBoxFile = '/home/picarro/I2000/InstrConfig/Calibration/InstrCal/Beta2000_HotBoxCal.ini'
hotBoxCalZeroRelax = '/home/picarro/I2000/InstrConfig/Calibration/InstrCal/Beta2000_HotBoxCal_Flight_Cal.ini'

config = ConfigObj(instrHotBoxFile)
config['AUTOCAL']['RELAX'] = '0.0'
config['AUTOCAL']['RELAX_ZERO'] = '0.0'
config['AUTOCAL']['RELAX_DEFAULT'] = '0.0'
config.filename = hotBoxCalZeroRelax
config.write()
#Load Temp Hot Box Cal
fileLoadHotBoxCal = loadHotBoxCal(hotBoxCalZeroRelax)
sleep(10)
#Output path & file generation
outputDir = "/home/picarro/I2000/InstrConfig/Integration/FlightCalibration"
if not exists(outputDir): makedirs(outputDir)
timeStr = strftime("%Y%m%d_%H%M%S")

analyzerType = getAnalyzerType()

if analyzerType in ["CFKBDS"]:
    setTagalongData('angle_offset',0)
    setMeasBuffer("analyze_Flight_Cal",["AmbientPressure", "EtalonTemp", "co2_shift", "ch4_shift", "co_shift", "h2o_shift", "angle_offset"],200)
    logFunc("Instrument is a four species analyzer.\n")
    logFunc("Flight Calibration will commence.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Analyzer Type is NOT supported.\n")
    NEXT="StateDone"
"""

[StateWaitMeasuring]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    init_temp = meas["EtalonTemp"]
    #Temperature Lists
    ref_temp        = []
    ave_ref_temp    = 0.0
    NEXT = "StateInstrSettle"
"""

[StateInstrSettle]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrSettle"
else:
    curr_temp = meas["EtalonTemp"]
    if abs(curr_temp - init_temp) > 0.0005:
        logFunc("Etalon Temp has NOT reached steady state.\n")
        sleep(15.0)
        logFunc('.')
        NEXT = "StateInstrSettle"
    else:
        ref_temp.append(meas["EtalonTemp"])
        if len(ref_temp) == 15:
            ave_ref_temp = average(ref_temp)
            logFunc("Etalon Temp at steady state is %f.\n" %(ave_ref_temp))
            logFunc("Etalon Temp has reached steady state.\n")
            start_temp = meas["EtalonTemp"]
            clearMeasBuffer()
            #Data Lists for cm adjust
            pressureStepCount = 0
            buff_pressure     = []
            buff_co2_adjust   = []
            buff_ch4_adjust   = []
            buff_co_adjust    = []
            buff_h2o_adjust   = []
            rawPressure       = []
            raw_co2_adjust    = []
            raw_ch4_adjust    = []
            raw_co_adjust     = []
            raw_h2o_adjust    = []
            NEXT = "StateDataCollect"
"""

[StateDataCollect]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateDataCollect"
else:
    curr_temp = meas["EtalonTemp"]
    curr_press = meas["AmbientPressure"]

    if abs(curr_temp - ave_ref_temp) < 0.0015:
        buff_pressure.append(meas["AmbientPressure"])
        buff_co2_adjust.append(meas["co2_shift"])
        buff_ch4_adjust.append(meas["ch4_shift"])
        buff_co_adjust.append(meas["co_shift"])
        buff_h2o_adjust.append(meas["h2o_shift"])
        curr_temp = meas["EtalonTemp"]

        if len(buff_pressure) == 100:
            logFunc("Still Collecting Data.\n")
        elif len(buff_pressure) == 200:
            logFunc("Still Collecting Data.\n")
        elif len(buff_pressure) >= 250:
            rawPressure.append(float(average(buff_pressure[-175:])))
            raw_co2_adjust.append(float(average(buff_co2_adjust[-175:])))
            raw_ch4_adjust.append(float(average(buff_ch4_adjust[-175:])))
            raw_co_adjust.append(float(average(buff_co_adjust[-175:])))
            raw_h2o_adjust.append(float(average(buff_h2o_adjust[-175:])))
            #Display information onto GUI Spreadsheet
            fileDataFunc(dict(ambient_press = rawPressure[-1], co2_adjust = raw_co2_adjust[-1], ch4_adjust = raw_ch4_adjust[-1],
                                co_adjust = raw_co_adjust[-1], h2o_adjust = raw_h2o_adjust[-1]))

            buff_pressure[:] = []
            buff_co2_adjust[:] = []
            buff_ch4_adjust[:] = []
            buff_co_adjust[:] = []
            buff_h2o_adjust[:] = []

            if pressureStepCount == 10:
                            #Pop up Gui to inform user to change to next pressure step
                GUI.popPause("Please adjust to next pressure step. Then press 'Ok'", "FlightCalibrationCoordinator")
                logFunc("Part 1 of Flight Calibration Test has approached its last step in its pressure descent.\n")
                clearMeasBuffer()
                NEXT = "StateLastStep"
            else:
                GUI.popPause("Please adjust to next pressure step. Then press 'Ok'", "FlightCalibrationCoordinator")
                clearMeasBuffer()
                pressureStepCount += 1
                NEXT = "StateDataCollect"
        else:
            NEXT = "StateDataCollect"
    else:
        NEXT = "StateDataCollect"
"""

[StateLastStep]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateLastStep"
else:
    last_curr_temp = meas["EtalonTemp"]
    if abs(last_curr_temp - ave_ref_temp) < 0.0015:
        buff_pressure.append(meas["AmbientPressure"])
        buff_co2_adjust.append(meas["co2_shift"])
        buff_ch4_adjust.append(meas["ch4_shift"])
        buff_co_adjust.append(meas["co_shift"])
        buff_h2o_adjust.append(meas["h2o_shift"])
        last_curr_temp = meas["EtalonTemp"]

        if len(buff_pressure) == 100:
            logFunc("Still Collecting Data.\n")
            NEXT = "StateLastStep"
        elif len(buff_pressure) == 200:
            logFunc("Still Collecting Data. \n")
            NEXT = "StateLastStep"
        elif len(buff_pressure) >= 250:
            rawPressure.append(float(average(buff_pressure[-150:])))
            raw_co2_adjust.append(float(average(buff_co2_adjust[-150:])))
            raw_ch4_adjust.append(float(average(buff_ch4_adjust[-150:])))
            raw_co_adjust.append(float(average(buff_co_adjust[-150:])))
            raw_h2o_adjust.append(float(average(buff_h2o_adjust[-150:])))
            #Display information onto GUI Spreadsheet
            fileDataFunc(dict(ambient_press = rawPressure[-1], co2_adjust = raw_co2_adjust[-1], ch4_adjust = raw_ch4_adjust[-1],
                                co_adjust = raw_co_adjust[-1], h2o_adjust = raw_h2o_adjust[-1]))
            logFunc("Instrument has completed last pressure step of Phase 1 for Flight Calibration.\n")

            qRawCO2Adjust = polyfit(rawPressure,raw_co2_adjust,3)
            qRawCH4Adjust = polyfit(rawPressure,raw_ch4_adjust,3)
            qRawCOAdjust = polyfit(rawPressure,raw_co_adjust,3)
            qRawH2OAdjust = polyfit(rawPressure,raw_h2o_adjust,3)
            #Generate a plot of CM Adjust vs Pressure
            plot(rawPressure, raw_co2_adjust, '.', rawPressure, polyval(qRawCO2Adjust, rawPressure))
            plot(rawPressure, raw_ch4_adjust, '.', rawPressure, polyval(qRawCH4Adjust, rawPressure))
            plot(rawPressure, raw_co_adjust, '.', rawPressure, polyval(qRawCOAdjust, rawPressure))
            plot(rawPressure, raw_h2o_adjust, '.', rawPressure, polyval(qRawH2OAdjust, rawPressure))
            grid(True)
            xlabel('Pressure')
            ylabel('CM Adjust')
            title('Affects of Delta Pressure on WLM')
            savefig(join(outputDir,"CMShift_" + timeStr + ".png"))
                            #Next Step
            NEXT = "StateStepDataAnalyze"
        else:
            NEXT = "StateLastStep"
    else:
        NEXT = "StateLastStep"
"""

[StateStepDataAnalyze]
action = """
num_step = len(rawPressure)
if num_step == 11:
    #Number of Pressure Steps
    logFunc("The Correct number of pressure steps was recorded and analyzed.\n")
    #Slope & Intercept of pressure vs. CO2_adjust
    press_shift_co2_slope, press_shift_co2_int = polyfit(rawPressure, raw_co2_adjust,1)
    logFunc("The CO2 cm shift slope and intercept is %s and %s.\n" %(press_shift_co2_slope, press_shift_co2_int))
    #Slope & Intercept of pressure vs. CH4_adjust
    press_shift_ch4_slope, press_shift_ch4_int = polyfit(rawPressure, raw_ch4_adjust,1)
    logFunc("The CH4 cm shift slope and intercept is %s and %s.\n" %(press_shift_ch4_slope, press_shift_ch4_int))
    #Slope & Intercept of pressure vs. CO_adjust
    press_shift_co_slope, press_shift_co_int = polyfit(rawPressure, raw_co_adjust, 1)
    logFunc("The CO cm shift slope and intercept is %s and %s.\n" %(press_shift_co_slope, press_shift_co_int))
    #Slope & Intercept of pressure vs. H2O_adjust
    press_shift_h2o_slope, press_shift_h2o_int = polyfit(rawPressure, raw_h2o_adjust, 1)
    logFunc("The H2O cm shift slope and intercept is %s and %s.\n" %(press_shift_h2o_slope, press_shift_h2o_int))
    clearMeasBuffer()
    #Pause Dialog Box
    NEXT = "StateSleep"
else:
    logFunc("The INCORRECT number of pressure steps was recorded and analyzed.\n")
    NEXT = "StateDone"
"""

[StateSleep]
action = """
GUI.popInfo("Please let instrument settle for 30 minutes or until Etalon temp has settle before continuing test","FlightCalibrationCoordinator")
NEXT = "StateAngSteady"
"""

[StateAngSteady]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateAngSteady"
else:
    init_AngTemp = meas["EtalonTemp"]
    sleep(10.0)
    init_AngMeas = measGetBufferFirst()
    curr_temp = init_AngMeas["EtalonTemp"]

    if abs(curr_temp - init_AngTemp) > 0.0015:
        logFunc('.')
        curr_temp = meas["EtalonTemp"]
        NEXT = "StateAngSteady"
    else:
        logFunc("Etalon Temperature has reached steady state.\n")
        logFunc("Now will commence with 2nd part of Flight Calibration.\n")
        #Data list for angle adjustment
        raw_ang_co2_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        raw_ang_ch4_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        raw_ang_co_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        raw_ang_h2o_adjust = [[], [], [], [], [], [], [], [], [], [], []]

        wlm_ang_co2_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        wlm_ang_ch4_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        wlm_ang_co_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        wlm_ang_h2o_adjust = [[], [], [], [], [], [], [], [], [], [], []]
        NEXT = "StateSetOffset"
"""

[StateSetOffset]
action  = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateSetOffset"
else:
    offset = incr * step
    logFunc('Change to step %s \n'%(step))
    loadWarmBoxCal('',offset)
    setTagalongData('angle_offset',offset)
    #Append CM Shift to the appropriate list
    raw_ang_co2_adjust[(step + 5)].append(meas["co2_shift"])
    raw_ang_ch4_adjust[(step + 5)].append(meas["ch4_shift"])
    raw_ang_co_adjust[(step + 5)].append(meas["co_shift"])
    raw_ang_h2o_adjust[(step + 5)].append(meas["h2o_shift"])
    #Append WLM Shift Amount to appropriate List
    wlm_ang_co2_adjust[(step + 5)].append(meas["angle_offset"])
    wlm_ang_ch4_adjust[(step + 5)].append(meas["angle_offset"])
    wlm_ang_co_adjust[(step + 5)].append(meas["angle_offset"])
    wlm_ang_h2o_adjust[(step + 5)].append(meas["angle_offset"])
    #meas_ang_offset[(step + 5)].append(meas["angle_offset"])
    if len(raw_ang_co2_adjust[step+5]) > 80:
        NEXT = "StateCMStepDelta"
    else:
        NEXT = "StateSetOffset"
"""

[StateCMStepDelta]
action = """
if abs(step) >= max_step:
    dstep *= -1
    count += 1
step += dstep
if count > 1:
    #Data Set for cm adjust-complete
    step_comp_ang_co2_adjust = []
    step_comp_ang_ch4_adjust = []
    step_comp_ang_co_adjust  = []
    step_comp_ang_h2o_adjust = []
    step_ang_offset          = [-0.05, -0.04, -0.03, -0.02, -0.01, 0.0, 0.01, 0.02, 0.03, 0.04, 0.05]
    #Initial Count
    AngDataCount = 0
    NEXT = "StateAngDataAnalyze"
else:
    NEXT = "StateSetOffset"
"""

[StateAngDataAnalyze]
action = """
if AngDataCount != 11:
    #Calculate Mean CM Shift for gas species
    co2AngShiftVal = float(average(raw_ang_co2_adjust[AngDataCount][-40:-5]))
    step_comp_ang_co2_adjust.append(co2AngShiftVal)
    ch4AngShiftVal = float(average(raw_ang_ch4_adjust[AngDataCount][-40:-5]))
    step_comp_ang_ch4_adjust.append(ch4AngShiftVal)
    coAngShiftVal = float(average(raw_ang_co_adjust[AngDataCount][-40:-5]))
    step_comp_ang_co_adjust.append(coAngShiftVal)
    h2oAngShiftVal = float(average(raw_ang_co_adjust[AngDataCount][-40:-5]))
    step_comp_ang_h2o_adjust.append(h2oAngShiftVal)
    #Calculate Mean Angle Offset
    co2AngOffsetVal = float(average(wlm_ang_co2_adjust[AngDataCount][-10:-5]))
    ch4AngOffsetVal = float(average(wlm_ang_ch4_adjust[AngDataCount][-10:-5]))
    coAngOffsetVal = float(average(wlm_ang_co_adjust[AngDataCount][-10:-5]))
    h2oAngOffsetVal = float(average(wlm_ang_h2o_adjust[AngDataCount][-10:-5]))
    #Increase step count
    AngDataCount += 1
    fileDataFunc(dict(co2AngShift = co2AngShiftVal, ch4AngShift = ch4AngShiftVal, coAngShift = coAngShiftVal, h2oAngShift = h2oAngShiftVal,
                        co2_wlmShift = co2AngOffsetVal, ch4_wlmShift = ch4AngOffsetVal, co_wlmShift = coAngOffsetVal, h2o_wlmShift = h2oAngOffsetVal))
    #Next Step
    NEXT = "StateAngDataAnalyze"
else:
    ang_co2_slope, ang_co2_int  = polyfit(step_ang_offset, step_comp_ang_co2_adjust, 1)
    ang_ch4_slope, ang_ch4_int  = polyfit(step_ang_offset, step_comp_ang_ch4_adjust, 1)
    ang_co_slope, ang_co_int    = polyfit(step_ang_offset, step_comp_ang_co_adjust, 1)

    step_ang_offset_mod = [-0.05, -0.04, -0.03, -0.02, -0.01, 0.0, 0.01, 0.02, 0.03, 0.04, 0.05]
    NEXT = "StateH2OFit"
"""

[StateH2OFit]
action = """
#Scanning of water drops out at the peak of the CM adjust pyramid. Therefore, removing the peak to remove error in measurement.
step_ang_offset_mod = [step_ang_offset_mod[i] for i in range(len(step_comp_ang_h2o_adjust)) if step_comp_ang_h2o_adjust[i] != 0.0]
step_comp_ang_h2o_adjust = [v for v in step_comp_ang_h2o_adjust if v != 0.0]

#Compute Linear fit
ang_h2o_slope, ang_h2o_int = polyfit(step_ang_offset_mod, step_comp_ang_h2o_adjust, 1)
#Append Data to .csv file and on UI
logFunc("Computed linear regression of cm shift to shift in wavelength monitor.\n")

fileDataFunc(dict(comment = "CO2 Slope and Intercept are %f and %f" %(ang_co2_slope, ang_co2_int)))
fileDataFunc(dict(comment = "CH4 Slope and Intercept are %f and %f" %(ang_ch4_slope, ang_ch4_int)))
fileDataFunc(dict(comment = "CO Slope and Intercept are %f and %f" %(ang_co_slope, ang_co_int)))
fileDataFunc(dict(comment = "H2O Slope and Intercept are %f and %f" %(ang_h2o_slope, ang_h2o_int)))

logFunc("The CO2 cm shift with respect to the Angle Offset slope and intercept are %s and %s.\n" %(ang_co2_slope, ang_co2_int))
logFunc("The CH4 cm shift with respect to the Angle Offset slope and intercept are %s and %s.\n" %(ang_ch4_slope, ang_ch4_int))
logFunc("The CO cm shift with respect to the Angle Offset slope and intercept are %s and %s.\n" %(ang_co_slope, ang_co_int))
logFunc("The H2O cm shift with respect to the Angle Offset slope and intercept are %s and %s.\n" %(ang_h2o_slope, ang_h2o_int))
#Empty Lists to contain flight coefficients for gas species
press = []
bcoeff_co2 = []
bcoeff_ch4 = []
bcoeff_co = []
bcoeff_h2o = []
#Initial Count
PolyFitCount = 0
NEXT = "StatePolyFit"
"""

[StatePolyFit]
action = """
#bcoeff generation
if PolyFitCount != 11:
    press.append((rawPressure[PolyFitCount]-760))
    bcoeff_co2.append((-((raw_co2_adjust[PolyFitCount] - ang_co2_int) / ang_co2_slope)))
    bcoeff_ch4.append((-((raw_ch4_adjust[PolyFitCount] - ang_ch4_int) / ang_ch4_slope)))
    bcoeff_co.append((-((raw_co_adjust[PolyFitCount] - ang_co_int) / ang_co_slope)))
    bcoeff_h2o.append((-((raw_h2o_adjust[PolyFitCount] - ang_h2o_int) / ang_h2o_slope)))
    PolyFitCount += 1
    NEXT = "StatePolyFit"
else:
    #Polynomals fits
    qco2 = polyfit(press, bcoeff_co2, 3)
    logFunc("Flight polynomial Coefficients for CO2 are %s.\n" %(qco2))
    qch4 = polyfit(press, bcoeff_ch4, 3)
    logFunc("Flight polynomial Coefficients for CH4 are %s.\n" %(qch4))
    qco = polyfit(press, bcoeff_co, 3)
    logFunc("Flight polynomial Coefficients for CO are %s.\n" %(qco))
    qh2o = polyfit(press, bcoeff_h2o, 3)
    logFunc("Flight polynomial Coefficients for H2O are %s.\n" %(qh2o))

    fileDataFunc(dict(comment = "CO2 Flight Poly Coeffs = %s." %(qco2)))
    fileDataFunc(dict(comment = "CH4 Flight Poly Coeffs = %s." %(qch4)))
    fileDataFunc(dict(comment = "CO Flight Poly Coeffs = %s." %(qco)))
    fileDataFunc(dict(comment = "H2O Flight Poly Coeffs = %s." %(qh2o)))
     #Plot of the polynomial fits
    plot(press,bcoeff_co2,'.',press,polyval(qco2,press))
    plot(press,bcoeff_ch4,'.',press,polyval(qch4,press))
    plot(press,bcoeff_h2o,'.',press,polyval(qh2o,press))
    plot(press,bcoeff_co,'.',press,polyval(qco,press))
    grid(True)
    xlabel('Pressure')
    ylabel('WLM')
    title('Polynomial Fit - WLM Shift wrt Delta Pressure')
    savefig(join(outputDir,"CO2PolyFit_" + timeStr + ".png"))
    NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("Flight Calibration Complete","FlightCalibrationCoordinator")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" %(ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
