##############################################################################################################################################
#Date:         Modified By:       Notes:        
#20110223      E.Lai              Bottle Cal for GHG Instruments
#20110407      E.Lai              Excluded cylinder 4 from the calculation of the average Delta/Ratio
#20110518      E.Lai              Updated flow for CFBDS instruments
#20140429      E.Lai              Updated coordinator with new cylinders
#20140614      E.Lai              Updated coordinator with a new cylinder
#20140825      E.Lai              Updated coordinator with a new cylinder
#20141029      E.Lai              Updated coordinator with a new cylinder
#20150115      E.Lai              Updated coordinator with a new cylinder
#20150626      E.Lai              Added option of flow for low pressure systems
#20150916      E.Lai              Updated coordinator with a new cylinder   
##############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "instrType", "Analyzer Type ["1"(Flux - CFADS Mode) "2"(Flux - Low Flow) "3"(Super Flux - CFADS Mode) "4"(Super Flux - Low Flow) "0"(Not Flux or Super Flux)]", "0"
1 = "analyzer_pressure", "Pressure(Normal or Low)", "Normal"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/InstrConfig/Integration/BottleCal/BottleCal"

[Output]
#Isotopic CO2
mpvPos = "MPVPosition",%10.4f
c12 = "12CO2",%10.4f
c13 = "13CO2",%10.4f
delRaw = "Delta_Raw",%10.4f
ratRaw = "Ratio_Raw",%10.4f
#CO2_CH4, CO2_Only
co2 = "CO2",%10.4f
ch4 = "CH4",%10.4f
#CO2_CH4 Accuracy Check
co2Diff = "ppm_Diff",%10.4f
ch4Diff = "ppm_Diff",%10.4f
#Other
comment = "comment",%128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join 
from time import strftime
from pylab import figure, plot, grid, xlabel, ylabel, title, savefig
from configobj import ConfigObj
import serial
import os

timeStr = strftime("%Y%m%d_%H%M%S")
# Initialization
isoMPVPos = [[],[],[],[],[]]
c12Meas = [[],[],[],[],[]]
c13Meas = [[],[],[],[],[]]
deltaRawMeas = [[],[],[],[],[]]
ratioRawMeas = [[],[],[],[],[]]
aveC12 = [[],[],[],[],[]]
aveC13 = [[],[],[],[],[]]
aveDeltaRaw = [[],[],[],[],[]]
aveRatioRaw = [[],[],[],[],[]]
c12MeasFitVal = []
c13MeasFitVal = []
deltaMeasVal = []
ratioMeasVal = []
#CO2_CH4
mpvPos = [[],[],[],[],[]]
co2Meas = [[],[],[],[],[]]
ch4Meas = [[],[],[],[],[]]
aveCO2 = [[],[],[],[],[]]
aveCH4 = [[],[],[],[],[]]
co2MeasFitVal = []
ch4MeasFitVal = []
#Empty Validation Lists
valCO2 = []; valCH4 = []; valDelta = []; valRat = []; valC12 = []; valC13 = []
#Software Version
version = 1.0
#Cylinder Values
#Isotopic
c12CylFitValues = [0, 543.4, 394.1099, 492.0, 319.8]
c13CylFitValues = [0, 5.954, 4.3271, 5.401, 3.469]
standardDeltaMeas = [-999.0, -34.48, -33.008, -32.28, -34.82]
#CO2_CH4
co2CylFitValues = [0, 549.16, 398.26, 496.62, 323.31]
ch4CylFitValues = [0, 2.2162, 1.8764, 1.4928, 2.9952]
#Validation Cylinder Concentrations
valGasConc = [398.26, 1.8764]
#Validation C12, C13 Concentrations
valDeltaConc = [394.1099, 4.3271, -33.008]
#Initail value of rotValve
rotValve = None
#Plot Configuration
def plotCO2(qCO2):
    figure(1)
    plot(co2MeasFitVal, co2CylFitValues, '.', co2MeasFitVal, polyval(qCO2, co2MeasFitVal))
    grid(True)
    xlabel('CO2 Meas (ppmv')
    ylabel('CO2 Cylinder(ppmv)')
    title('CO2 - Calibration Fit')
    savefig(join(outputDir,"CO2PolyFit_" + timeStr + ".png"))

def plotCH4(qCH4):
    figure(2)
    plot(ch4MeasFitVal, ch4CylFitValues, '.', ch4MeasFitVal, polyval(qCH4, ch4MeasFitVal))
    grid(True)
    xlabel('CH4 Meas (ppmv')
    ylabel('CH4 Cylinder(ppmv)')
    title('CH4 - Calibration Fit')
    savefig(join(outputDir,"CH4PolyFit_" + timeStr + ".png"))
#Kill Task
def exeKill(exeName):
    try:
        os.system("taskkill /im %s /f"%(exeName))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable Valve Sequencer. Please advise.\n')
    sleep(2.0)
def paramCorrect(instr):
    if instr == 'CO2_CH4':
        oldCO2Intercept = float(config['Data']['co2_conc_intercept'])
        oldCO2Slope = float(config['Data']['co2_conc_slope'])
        oldCH4Intercept = float(config['Data']['ch4_conc_intercept'])
        oldCH4Slope = float(config['Data']['ch4_conc_slope'])
        newCO2Intercept = oldCO2Intercept + co2_intercept
        newCO2Slope = oldCO2Slope*co2_slope
        newCH4Intercept = oldCH4Intercept + ch4_intercept
        newCH4Slope = oldCH4Slope*ch4_slope
        return(newCO2Slope, newCO2Intercept, newCH4Slope, newCH4Intercept)
        
    elif instr == 'CO2':
        oldCO2Intercept = float(config['Data']['co2_conc_intercept'])
        oldCO2Slope = float(config['Data']['co2_conc_slope'])
        newCO2Intercept = oldCO2Intercept + co2_intercept
        newCO2Slope = oldCO2Slope*co2_slope
        return(newCO2Slope, newCO2Intercept)
#Write Correction Paramters to Parameter Results .dat file and instrument InstrCal.dat file 
def writeDict(instr):
    if instr == 'CO2_CH4':
        Data = {'co2_conc_intercept': '%s' %(config['Data']['co2_conc_intercept']),
                'co2_conc_slope': '%s' %(config['Data']['co2_conc_slope']),
                'ch4_conc_intercept': '%s' %(config['Data']['ch4_conc_intercept']),
                'ch4_conc_slope': '%s' %(config['Data']['ch4_conc_slope'])}
        corrConfig['Data'] = Data
        corrConfig.write()
        
    elif instr == 'CO2':
        Data = {'co2_conc_intercept': '%s' %(config['Data']['co2_conc_intercept']),
                'co2_conc_slope': '%s' %(config['Data']['co2_conc_slope'])}
        corrConfig['Data'] = Data
        corrConfig.write()

def writeNewDict(instr):
    if instr == 'CO2_CH4':
        Data = {'co2_conc_intercept': '%s' %(config['Data']['co2_conc_intercept']),
                'co2_conc_slope': '%s' %(config['Data']['co2_conc_slope']),
                'ch4_conc_intercept': '%s' %(config['Data']['ch4_conc_intercept']),
                'ch4_conc_slope': '%s' %(config['Data']['ch4_conc_slope'])}
        corrConfig['NewData'] = Data
        corrConfig.write()
        
    elif instr == 'CO2':
        Data = {'co2_conc_intercept': '%s' %(config['Data']['co2_conc_intercept']),
                'co2_conc_slope': '%s' %(config['Data']['co2_conc_slope'])}
        corrConfig['NewData'] = Data
        corrConfig.write()
        
#Analyzer Selection
analyzerType = getAnalyzerType()
#Output Directory
outputDir = r"/home/picarro/SI2000/InstrConfig/Integration/BottleCal"
instrType = int(editParamDict["instrType"])

if instrType == 0:
    if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
        setMeasBuffer("analyze_iCO2", ["adjust_87", "adjust_88", "12CO2", "13CO2", "Delta_Raw", "Ratio_Raw", "MPVPosition", "CavityPressure", "EtalonTemp"],200)
        valMeas = [valC12, valC13, valDelta]
        valTitle = ["12CO2", "13CO2", "Delta"]
        logFunc("Instrument is an iCO2 (C12, C13) analyzer.\n")
        logFunc("Will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
        
    elif analyzerType in ["CFADS","CFDDS"]:
        setMeasBuffer("analyze_CFADS", ["co2_adjust", "ch4_adjust", "CO2", "CH4", "MPVPosition", "CavityPressure", "EtalonTemp"],200)        
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("Instrument is a CFADS type (CO2, CH4, H2O) analyzer.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
        
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        setMeasBuffer("analyze_CFKADS", ["co2_adjust", "ch4_adjust", "CO2", "CH4", "MPVPosition", "CavityPressure", "EtalonTemp"],200)
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("Instrument is a 4 species, CFKADS type (CO2, CH4, CO, H2O) analyzer.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
        
    elif analyzerType in ["CKADS"]:
        setMeasBuffer("analyze_CKADS", ["co2_adjust", "CO2", "MPVPosition", "CavityPressure", "EtalonTemp"],200)
        valMeas = [valCO2]
        valTitle = ["CO2"]
        logFunc("Instrument is a CKADS type (CO2, CO, H2O)analyzer.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"

elif instrType == 1:
    if analyzerType in ["CFBDS"]:
        setMeasBuffer("analyze_CFADS", ["co2_adjust", "ch4_adjust", "CO2", "CH4", "MPVPosition", "CavityPressure", "EtalonTemp"],200)
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("Instrument is a Flux analyzer in CFADS Mode (CO2, CH4, H2O.\n")
        logFunc("This Test will only calibrate High Precision 3 Gas Mode of Analyzer.\n")
        logFunc("When this test is complete, please calibrate Flux mode of Analyzer in Low Flow Mode.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
        
elif instrType == 2:        
    if analyzerType in ["CFBDS"]:
        setMeasBuffer("analyze_flux", ["co2_conc", "ch4_conc", "MPVPosition", "cavity_pressure"], 200)
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("Instrument is a Flux analyzer in Low-Flow Mode(CO2, CH4).\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"        

elif instrType == 3:
    if analyzerType in ["CFHADS"]:
        setMeasBuffer("analyze_CFADS", ["co2_adjust", "ch4_adjust", "CO2", "CH4", "MPVPosition", "CavityPressure", "EtalonTemp"],200)          
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("This Test will only calibrate High Precision 3 Gas Mode of Analyzer.\n")    
        logFunc("Instrument is a CFADS type (CO2, CH4, H2O) analyzer.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
        
elif instrType == 4:
    if analyzerType in ["CFHADS"]:
        setMeasBuffer("analyze_flux", ["co2_adjust", "ch4_adjust", "CO2", "CH4", "MPVPosition", "CavityPressure", "EtalonTemp"],200)       
        valMeas = [valCO2, valCH4]
        valTitle = ["CO2", "CH4"]
        logFunc("Instrument is a Flux analyzer in Low-Flow Mode(CO2, CH4).\n")        
        logFunc("Instrument is a CFADS type (CO2, CH4, H2O) analyzer.\n")
        logFunc("Now will commence preparation for Bottle Calibration.\n")
        clearMeasBuffer()
        NEXT = "StateWaitMeasuring"
    
else:
    logFunc("Instrument Test is not supported.\n")
    NEXT="StateDone"
"""

[StateWaitMeasuring]
action = """
#GetMeasBuffer
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
    
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial parameter counts
    etalonStart = 0
    c12ShiftStart = 0
    c13ShiftStart = 0
    pressureStart = 0
    pressureStop = 0
    co2ShiftStart = 0
    ch4ShiftStart = 0
    NEXT = "StateInstrUserParam"
"""

[StateInstrUserParam]
action = """
#Retrieve User Calibration Settings
#iCO2
if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal.ini'
elif analyzerType in ["CFADS", "CFDDS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal_CFADS.ini'
elif analyzerType in ["CFHADS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal.ini'    
elif analyzerType in ["CFKADS", "CFKBDS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal_CFKADS.ini'
elif analyzerType in ["CFBDS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal.ini'
elif analyzerType in ["CKADS"]:
    userParamPath = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/UserCal_CKADS.ini'

userConfig = ConfigObj(userParamPath) 
for userVal in userConfig:
    if userConfig[userVal]['slope'] == '1.0' or userConfig[userVal]['slope'] =='1':
        continue
    elif userConfig[userVal]['offset'] == '0.0' or userConfig[userVal]['offset'] == '0':
        continue
    else:
        GUI.popInfo("Please set User Parameters to default settings. Restart software and Coordinator" , "CoordinatorBottleCal")
        NEXT = "StateDone"

NEXT = "StateInstrPressCert"         
"""

[StateInstrPressCert]
action = """
meas = measGetBufferFirst()
#Wait for pressure to settle
if not meas or ("CavityPressure" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrPressCert"
    
else:
    currMeas = measGetBufferFirst()
    curr_press = meas["CavityPressure"]
    if analyzerType in ["CFHADS"]:
        pressBound1 = 151.4
        pressBound2 = 152.6
    else:
        analyzer_pressure = str(editParamDict["analyzer_pressure"])
        if analyzer_pressure == "Normal":
            pressBound1 = 139.8
            pressBound2 = 140.2
        elif analyzer_pressure == "Low":
            pressBound1 = 39.8
            pressBound2 = 40.2
    if pressureStart != 5:
        if curr_press < pressBound1 or curr_press > pressBound2:
            logFunc("Waiting for Cavity Pressure to ready steady state.\n")
            NEXT = "StateInstrPressCert"
            pressureStop += 1
            if pressureStop == 8:
                logFunc("Instrument Cavity cannot reach pressure setpoint.Please check whether pump is turned on.\n")
                NEXT = "StateError"
        else:
            pressureStart += 1
            NEXT = "StateInstrPressCert"
    else:
        logFunc("Instrument Cavity Pressure has settled.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
#Wait for Instrument Etalon Temp to settle
meas = measGetBufferFirst()
if not meas or ("EtalonTemp" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrEtalonCert"

else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)    
    currMeas = measGetBufferFirst()
    etalTemp = currMeas["EtalonTemp"]
    if etalonStart != 3:
        etalon_diff = (abs(etalTemp - initTemp))
        if etalon_diff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp has settled.\n")
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateInstrAdjustCert]
action = """
#Wait for WLM to Center
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
    
else:
    if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
        c12Adjust = meas["adjust_87"]
        c13Adjust = meas["adjust_88"]
        if c12ShiftStart > 3 and c13ShiftStart > 3:
            if c12Adjust > 0.0008 and c13Adjust > 0.0008:
                logFunc("Waiting for WLM to center.\n")
                NEXT = "StateInstrAdjustCert"
            else:
                c12ShiftStart += 1
                c13ShiftStart += 1              
                NEXT = "StateInstrAdjustCert"
        else:
            logFunc("Instrument wavelength monitor has centered.\n")
            logFunc("Instrument is now in a good state to commence 'Gas Species Calibration'.\n")
            clearMeasBuffer()
            exeName = "ValveSequencer.py"
            valveSeqKill = exeKill(exeName)            
            NEXT = "StateReadMPV"
    elif analyzerType in ["CKADS"]:
        co2_adjust = meas["co2_adjust"]
        if co2ShiftStart > 3:
            if co2_adjust > 0.0008:
                logFunc("Waiting for WLM to center.\n")
                NEXT = "StateInstrAdjustCert"
            else:
                co2ShiftStart += 1
                NEXT = "StateInstrAdjustCert"
        else:
            logFunc("Instrument wavelength monitor has centered.\n")
            logFunc("Instrument is now in a good state to commence 'Gas Species Calibration'.\n")
            clearMeasBuffer()
            exeName = "ValveSequencer.py"
            valveSeqKill = exeKill(exeName)            
            NEXT = "StateReadMPV"
    else:
        co2_adjust = meas["co2_adjust"]
        ch4_adjust = meas["ch4_adjust"]
        if co2ShiftStart > 3 and ch4ShiftStart > 3:
            if co2_adjust > 0.0008 and ch4_adjust > 0.0008:
                logFunc("Waiting for WLM to center.\n")
                NEXT = "StateInstrAdjustCert"
            else:
                co2ShiftStart += 1
                ch4ShiftStart += 1         
                NEXT = "StateInstrAdjustCert"
        else:
            logFunc("Instrument wavelength monitor has centered.\n")
            logFunc("Instrument is now in a good state to commence 'Gas Species Calibration'.\n")
            clearMeasBuffer()
            exeName = "ValveSequencer.py"
            valveSeqKill = exeKill(exeName)
            NEXT = "StateReadMPV"
"""

[StateReadMPV]
action = """
#Read ComPort 2 occupied by MPV
try:
    #Set parameter settings for serial port 2
    #rotValve = SerIntrf(1, baudrate = 9600, xonxoff = 0, timeout = 1.0)
    rotValve = SerIntrf(1)
    rotValve.open()
    errorCodeFailSend = 128
#Python exception and error handling technique    
except Exception, err:
    logFunc(err)
    logFunc("MPV is NOT set properly.\n")
    if rotValve:
        try:
            rotValve.close()
        except:
            pass
        rotValve = None
    raise Exception, "MPV is NOT set properly.\n"
#Definition to read the current rotary valve poosition    
def readRotPos():
    try:  
        #sendString / getLine - built in commands of python's serial module
        rotValve.sendString("CP")
        cp = rotValve.getLine()
        logFunc('%s\n'%(cp))
        currPos = cp.split("= ")[-1].strip()
        logFunc("Current MPV position is %s.\n" % currPos)
        return currPos
    except:
        raise Exception, "MPV is NOT set properly.\n"
        NEXT = "StateError"
#Definition to move the rotary valve position to selection
#If MPV fails to move to selected position, coordinator reports a failure
def moveRotValve(targetPos):
    timeOut = 40
    startTime = time.time()
    if rotValve:
        currPos = readRotPos()
        while currPos != targetPos:
            if (time.time() - startTime) < timeOut:
                try:
                    logFunc("MPV will move to position: %s\n" % targetPos)
                    rotValve.sendString("GO%s" % targetPos)
                    setRotValveMask(targetPos)
                    sleep(3)
                    currPos = readRotPos()
                    break
                except:
                    logFunc("MPV failed to send valve position command.\n")
                    setRotValveMask(errorCodeFailSend)
            else:
                logFunc("Error: Can't drive multi-port valve to desired port.\n")
                break
                NEXT = "StateError"
    else:
        logFunc("Multi-port valve NOT enabled correctly.\n")
        NEXT = "StateError"
#Test communication with rotary valve
readRotPos()
#Initial states of Rotary Valve position
cycleCount = 0
targetPos = 2
dirStep = 1
#Next Step
NEXT = "StateSetMPVPos"
"""

[StateSetMPVPos]
action = """
if targetPos == 3:
    dirStep = abs(dirStep)
if targetPos == 7:
    dirStep *= -1
    cycleCount += 1
#Increment Step of Rotary Valve by 1 
targetPos += (1*dirStep)
logFunc('Number of cycles is: %s\n'%(cycleCount))
#Count has been reached
stepStartTime = time.time()
if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    if cycleCount == 3:
        NEXT = "StateDataAnalyze"
    else:
        #Move rotary valve position and read rotary valve position
        moveRotValve(targetPos)
        readRotPos()
        #Next Step
        clearMeasBuffer()
        NEXT = "StateInstrMeas"    
else:
    if cycleCount == 2:
        NEXT = "StateDataAnalyze"
    else:
        #Move rotary valve position and read rotary valve position
        moveRotValve(targetPos)
        readRotPos()
        #Next Step
        clearMeasBuffer()
        NEXT = "StateInstrMeas"
"""

[StateInstrMeas]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrMeas"
    
else:
    currTime = time.time()
    if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
        if currTime - stepStartTime < 420.0:
            c12Meas[(targetPos-3)].append(meas["12CO2"])
            c13Meas[(targetPos-3)].append(meas["13CO2"])
            deltaRawMeas[(targetPos-3)].append(meas["Delta_Raw"])
            ratioRawMeas[(targetPos-3)].append(meas["Ratio_Raw"])
            isoMPVPos[(targetPos-3)].append(meas["MPVPosition"])
            NEXT = "StateInstrMeas"
            
        else:
            stepStartTime = currTime
            aveC12Val = (average(c12Meas[(targetPos-3)][(int(len(c12Meas[(targetPos-3)])*0.35)): (int(len(c12Meas[(targetPos-3)])*0.95))]))
            aveC13Val = (average(c13Meas[(targetPos-3)][(int(len(c13Meas[(targetPos-3)])*0.35)): (int(len(c13Meas[(targetPos-3)])*0.95))]))
            aveDelRaw = (average(deltaRawMeas[(targetPos-3)][(int(len(deltaRawMeas[(targetPos-3)])*0.35)): (int(len(deltaRawMeas[(targetPos-3)])*0.95))]))
            aveRatRaw = (average(ratioRawMeas[(targetPos-3)][(int(len(ratioRawMeas[(targetPos-3)])*0.35)): (int(len(ratioRawMeas[(targetPos-3)])*0.95))]))
            aveC12[(targetPos-3)].append(aveC12Val)
            aveC13[(targetPos-3)].append(aveC13Val)
            aveDeltaRaw[(targetPos-3)].append(aveDelRaw)
            aveRatioRaw[(targetPos-3)].append(aveRatRaw)
            fileDataFunc(dict(mpvPos = targetPos, c12 = aveC12Val, c13 = aveC13Val, delRaw = aveDelRaw, ratRaw = aveRatRaw))
            c12Meas[(targetPos-3)][:] = []
            c13Meas[(targetPos-3)][:] = []
            deltaRawMeas[(targetPos-3)][:] = []
            ratioRawMeas[(targetPos-3)][:] = []
            NEXT = "StateSetMPVPos"
            
    elif analyzerType in ["CKADS"]:
        if currTime - stepStartTime < 300:
            co2Meas[(targetPos-3)].append(meas["CO2"])
            mpvPos[(targetPos-3)].append(meas["MPVPosition"])
            NEXT = "StateInstrMeas"
        else:
            stepStartTime = currTime
            aveCO2Val = (average(co2Meas[(targetPos-3)][(int(len(co2Meas[(targetPos-3)])*0.50)): (int(len(co2Meas[(targetPos-3)])*0.90))]))
            aveCO2[(targetPos-3)].append(aveCO2Val)
            fileDataFunc(dict(mpvPos = targetPos, co2 = aveCO2Val))
            co2Meas[(targetPos-3)][:] = []
            NEXT = "StateSetMPVPos"
    
    elif analyzerType in ["CFBDS", "CFHADS"]:
        if instrType == 1 or instrType == 3 or instrType == 4:
            if currTime - stepStartTime < 300:
                co2Meas[(targetPos-3)].append(meas["CO2"])
                ch4Meas[(targetPos-3)].append(meas["CH4"])
                mpvPos[(targetPos-3)].append(meas["MPVPosition"])
                NEXT = "StateInstrMeas"
            else:
                stepStartTime = currTime
                aveCO2Val = average(co2Meas[(targetPos-3)][(int(len(co2Meas[(targetPos-3)])*0.50)): (int(len(co2Meas[(targetPos-3)])*0.90))])
                aveCH4Val = average(ch4Meas[(targetPos-3)][(int(len(ch4Meas[(targetPos-3)])*0.50)): (int(len(ch4Meas[(targetPos-3)])*0.90))])
                aveCO2[(targetPos-3)].append(aveCO2Val)
                aveCH4[(targetPos-3)].append(aveCH4Val)
                fileDataFunc(dict(mpvPos = targetPos, co2 = aveCO2Val, ch4 = aveCH4Val))
                co2Meas[(targetPos-3)][:] = []
                ch4Meas[(targetPos-3)][:] = []
                NEXT = "StateSetMPVPos"                
        elif instrType == 2:
            if currTime - stepStartTime < 300:
                co2Meas[(targetPos-3)].append(meas["co2_conc"])
                ch4Meas[(targetPos-3)].append(meas["ch4_conc"])
                mpvPos[(targetPos-3)].append(meas["MPVPosition"])
                NEXT = "StateInstrMeas"
            else:
                stepStartTime = currTime
                aveCO2Val = average(co2Meas[(targetPos-3)][(int(len(co2Meas[(targetPos-3)])*0.50)): (int(len(co2Meas[(targetPos-3)])*0.90))])
                aveCH4Val = average(ch4Meas[(targetPos-3)][(int(len(ch4Meas[(targetPos-3)])*0.50)): (int(len(ch4Meas[(targetPos-3)])*0.90))])
                aveCO2[(targetPos-3)].append(aveCO2Val)
                aveCH4[(targetPos-3)].append(aveCH4Val)
                fileDataFunc(dict(mpvPos = targetPos, co2 = aveCO2Val, ch4 = aveCH4Val))
                co2Meas[(targetPos-3)][:] = []
                ch4Meas[(targetPos-3)][:] = []
                NEXT = "StateSetMPVPos"

    #elif analyzerType in ["CFADS", "CFDDS"]:
    else:
        if currTime - stepStartTime < 300:
            co2Meas[(targetPos-3)].append(meas["CO2"])
            ch4Meas[(targetPos-3)].append(meas["CH4"])
            mpvPos[(targetPos-3)].append(meas["MPVPosition"])
            NEXT = "StateInstrMeas"
        else:
            stepStartTime = currTime
            aveCO2Val = average(co2Meas[(targetPos-3)][(int(len(co2Meas[(targetPos-3)])*0.50)): (int(len(co2Meas[(targetPos-3)])*0.90))])
            aveCH4Val = average(ch4Meas[(targetPos-3)][(int(len(ch4Meas[(targetPos-3)])*0.50)): (int(len(ch4Meas[(targetPos-3)])*0.90))])
            aveCO2[(targetPos-3)].append(aveCO2Val)
            aveCH4[(targetPos-3)].append(aveCH4Val)
            fileDataFunc(dict(mpvPos = targetPos, co2 = aveCO2Val, ch4 = aveCH4Val))
            co2Meas[(targetPos-3)][:] = []
            ch4Meas[(targetPos-3)][:] = []
            NEXT = "StateSetMPVPos"                
"""

[StateDataAnalyze]
action = """
#Averaging collected data for the 6 cylinders
if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    for a in range(0,5):
        c12MeasFitVal.append(average(aveC12[a][1:]))
        c13MeasFitVal.append(average(aveC13[a][1:]))
        deltaMeasVal.append(average(aveDeltaRaw[a][1:]))
        ratioMeasVal.append(average(aveRatioRaw[a][1:]))    
    #Generate PolyFits of data
    #C12 Gas Species
    c12_slope, c12_intercept = polyfit(c12MeasFitVal, c12CylFitValues, 1)
    #C13 Gas Species
    concMeas = []
    standMeas = []
    for a in range(len(c13MeasFitVal)):
        concMeas.append(c13CylFitValues[a]*c13MeasFitVal[a])
        standMeas.append(square(c13CylFitValues[a]))
    c13_slope = sum(standMeas)/sum(concMeas)
    c13_intercept = 0.0
    #Amend data to .csv file
    fileDataFunc(dict(comment = "Measured C12 slope and intercept are the following: %s, %s\n"%(c12_slope, c12_intercept)))
    fileDataFunc(dict(comment = "Measured C13 slope and intercept are the following: %s, %s\n"%(c13_slope, c13_intercept)))
    logFunc('Measured C12 slope and intercept are the following: %s, %s\n'%(c12_slope, c12_intercept))
    logFunc('Measured C13 slope and intercept are the following: %s, %s\n'%(c13_slope, c13_intercept))
    #Average Delta /  Ratio Values
    #Valve Pos 7 Measures has a different isotpic signature. (20110517-EL)
    #instr_delta = average((deltaMeasVal[2],deltaMeasVal[5]))
    #instr_ratio = average((ratioMeasVal[2],ratioMeasVal[5]))
    instr_delta = deltaMeasVal[3]
    instr_ratio = ratioMeasVal[1]
    logFunc('Measured Average Delta is the following: %s.\n'%(instr_delta))
    logFunc('Measured Average Ratio is the following: %s.\n'%(instr_ratio))   
    NEXT = "StateInstrCorrect"
    
elif analyzerType in ["CKADS"]:
    for a in range(0,5):
        co2MeasFitVal.append(average(aveCO2[a]))
    #Generate PolyFits of data
    co2_slope, co2_intercept = polyfit(co2MeasFitVal, co2CylFitValues, 1)
    fileDataFunc(dict(comment = 'Measured CO2 slope and intercept are the following: %s, %s\n'%(co2_slope, co2_intercept)))
    logFunc('Measured CO2 slope and intercept are the following: %f, %f\n'%(co2_slope, co2_intercept))
    NEXT = "StateInstrCorrect"
    
else:
    for a in range(0,5):
        co2MeasFitVal.append(average(aveCO2[a][1:]))
        ch4MeasFitVal.append(average(aveCH4[a][1:]))    
    #Generate PolyFits of data
    #CO2 
    co2_slope, co2_intercept = polyfit(co2MeasFitVal, co2CylFitValues, 1)
    #CH4
    ch4Meas = []
    ch4_standMeas = []
    for a in range(len(ch4MeasFitVal)):
        ch4Meas.append(ch4CylFitValues[a]*ch4MeasFitVal[a])
        ch4_standMeas.append(square(ch4CylFitValues[a]))
    ch4_slope = sum(ch4_standMeas)/sum(ch4Meas)
    ch4_intercept = 0.0
    #Amend data to .csv file
    fileDataFunc(dict(comment = 'Measured CO2 slope and intercept are the following: %s, %s\n'%(co2_slope, co2_intercept)))
    fileDataFunc(dict(comment = 'Measured CH4 slope and intercept are the following: %s, %s\n'%(ch4_slope, ch4_intercept)))    
    logFunc('Measured CO2 slope and intercept are the following: %f, %f\n'%(co2_slope, co2_intercept))
    logFunc('Measured CH4 slope and intercept are the following: %f, %f\n'%(ch4_slope, ch4_intercept))
    NEXT = "StateInstrCorrect"
"""

[StateInstrCorrect]
action = """
correctFitFile = r'/home/picarro/SI2000/InstrConfig/Integration/BottleCal/Instr%s_CorrectedFits.ini' %(analyzerType)
corrConfig = ConfigObj(correctFitFile)

if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal.ini'
    config = ConfigObj(currFitFile)
    Data = {'concentration_iso_intercept': '%s' %(config['Data']['concentration_iso_intercept']),
            'concentration_r_slope': '%s' %(config['Data']['concentration_r_slope']),
            'concentration_c12_gal_intercept': '%s' %(config['Data']['concentration_c12_gal_intercept']),
            'concentration_c12_gal_slope': '%s' %(config['Data']['concentration_c12_gal_slope']),
            'concentration_c13_gal_intercept': '%s' %(config['Data']['concentration_c13_gal_intercept']),
            'concentration_c13_gal_slope': '%s' %(config['Data']['concentration_c13_gal_slope'])}
    corrConfig['Data'] = Data
    corrConfig.write()
    #Delta Correct
    deltaIntercept = config['Data']['concentration_iso_intercept']
    newDeltaIntercept = float(deltaIntercept) + (standardDeltaMeas[3]) - float(instr_delta)
    #Ratio Slope Correct
    ratioSlope = config['Data']['concentration_r_slope']
    newRatioSlope = float(ratioSlope) * (0.01081/instr_ratio)
    #C12 Intercept
    oldC12Intercept = config['Data']['concentration_c12_gal_intercept']
    newC12Intercept = float(oldC12Intercept) + c12_intercept
    #C12 Slope
    oldC12Slope = config['Data']['concentration_c12_gal_slope']
    newC12Slope = float(oldC12Slope) * c12_slope    
    #C13 Intercept
    oldC13Intercept = config['Data']['concentration_c13_gal_intercept']
    newC13Intercept = float(oldC13Intercept) + c13_intercept
    #C13 Slope
    oldC13Slope = config['Data']['concentration_c13_gal_slope']
    newC13Slope = float(oldC13Slope) * c13_slope 
    
else:
    if analyzerType in ["CFBDS"]:
        if instrType == 1:
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CFADS.ini'
            instr = 'CO2_CH4'
        elif instrType == 2:
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal.ini'
            instr = 'CO2_CH4'            
    elif analyzerType in ["CFADS", "CFDDS"]:
        currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CFADS.ini'
        instr = 'CO2_CH4'
    elif analyzerType in ["CFHADS"]:
        if instrType == 3:
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CFADS.ini'
            instr = 'CO2_CH4'
        elif instrType == 4:
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal.ini'
            instr = 'CO2_CH4'        
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        if analyzer_pressure == "Normal":
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS.ini'
        elif analyzer_pressure == "Low":
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS_low_pressure.ini'
        instr = 'CO2_CH4'        
    elif analyzerType in ["CKADS"]:   
        if analyzer_pressure == "Normal":
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS.ini'
        elif analyzer_pressure == "Low":
            currFitFile = r'/home/picarro/SI2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS_low_pressure.ini'
    config = ConfigObj(currFitFile)
    dataWrite = writeDict(instr)
    newParamValues = paramCorrect(instr)
    
NEXT = "StateWriteValues"
"""

[StateWriteValues]
action = """
if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    config['Data']['concentration_iso_intercept'] = str(newDeltaIntercept)
    config['Data']['concentration_r_slope'] = str(newRatioSlope)
    config['Data']['concentration_c12_gal_intercept'] = str(newC12Intercept)
    config['Data']['concentration_c12_gal_slope'] = str(newC12Slope)
    config['Data']['concentration_c13_gal_intercept'] = str(newC13Intercept)
    config['Data']['concentration_c13_gal_slope'] = str(newC13Slope)
    config.write()
    newData = {'concentration_iso_intercept': '%s' %(config['Data']['concentration_iso_intercept']),
                'concentration_r_slope': '%s' %(config['Data']['concentration_r_slope']),
                'concentration_c12_gal_intercept': '%s' %(config['Data']['concentration_c12_gal_intercept']),
                'concentration_c12_gal_slope': '%s' %(config['Data']['concentration_c12_gal_slope']),
                'concentration_c13_gal_intercept': '%s' %(config['Data']['concentration_c13_gal_intercept']),
                'concentration_c13_gal_slope': '%s' %(config['Data']['concentration_c13_gal_slope'])}
    corrConfig['NewData'] = newData
    corrConfig.write()
    #Implement changes to InstrCal File
    #exeName = "DataManager.py"
    #dataKill = exeKill(exeName)   
    
else:
    if analyzerType in ["CKADS"]:
        config['Data']['co2_conc_intercept'] = newParamValues[1]
        config['Data']['co2_conc_slope'] = newParamValues[0]
        logFunc('%s, %s \n' %(config['Data']['co2_conc_intercept'], config['Data']['co2_conc_slope']))
        config.write()
        newDataWrite = writeNewDict(instr)
        #Implement changes to InstrCal File
        #exeName = "DataManager.py"
        #dataKill = exeKill(exeName)
    else:
        config['Data']['co2_conc_intercept'] = newParamValues[1]
        config['Data']['co2_conc_slope'] = newParamValues[0]
        config['Data']['ch4_conc_intercept'] = newParamValues[3]
        config['Data']['ch4_conc_slope'] = newParamValues[2]
        config.write()
        newDataWrite = writeNewDict(instr)
        #Implement changes to InstrCal File        
        #exeName = "DataManager.py"
        #dataKill = exeKill(exeName)
        
NEXT = "StatePlot"
"""

[StatePlot]
action = """
#Change to Position 2 on Rotary Valve
moveRotValve("1")    
readRotPos()
logFunc('Let instrument settle on new cylinder\n')
sleep(60.0)

if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
    qC12 = polyfit(c12MeasFitVal, c12CylFitValues, 1)
    qC13 = polyfit(c13MeasFitVal, c13CylFitValues, 1)
    #C12
    logFunc('Measured Ave C12 Values = %s \n'%(c12MeasFitVal))
    figure(1)
    plot(c12MeasFitVal, c12CylFitValues, '.', c12MeasFitVal, polyval(qC12, c12MeasFitVal))
    grid(True)
    xlabel('C12 Meas (ppmv)')
    ylabel('C12 Cylinder (ppmv)')
    title('C12 - Calibration Fit')
    savefig(join(outputDir,"C12PolyFit_" + timeStr + ".png"))
    #C13
    logFunc('Measured Ave C13 Values = %s \n'%(c13MeasFitVal))
    figure(2)
    plot(c13MeasFitVal, c13CylFitValues, '.', c13MeasFitVal, polyval(qC13, c13MeasFitVal))
    grid(True)
    xlabel('C13 Meas (ppmv)')
    ylabel('C13 Cylinder (ppmv)')
    title('C13 - Calibration Fit')
    savefig(join(outputDir,"C13PolyFit_" + timeStr + ".png"))
    NEXT = "StateDone"
    
elif analyzerType in ["CKADS"]:
    #CO2
    qCO2 = polyfit(co2MeasFitVal, co2CylFitValues, 1)
    logFunc('Measured Ave CO2 Values = %s \n'%(co2MeasFitVal)) 
    co2Plot = plotCO2(qCO2)
    NEXT = "StateDone"
    
else:
    #CO2 &CH4
    qCO2 = polyfit(co2MeasFitVal, co2CylFitValues, 1)
    qCH4 = polyfit(ch4MeasFitVal, ch4CylFitValues, 1) 
    logFunc('Measured Ave CO2 Values = %s \n'%(co2MeasFitVal))
    logFunc('Measured Ave CH4 Values = %s \n'%(ch4MeasFitVal))
    co2Plot = plotCO2(qCO2)
    ch4Plot = plotCH4(qCH4)
    NEXT = "StateDone"
"""

[StateValidation]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateValidation"
    
else:
    currTime = time.time()
    if currTime < 900.0:
        for valCount in range(len(valMeas)):
            aveVal = average(valMeas[valCount])
            if analyzerType in ["CBDS", "CFFDS", "CFGDS"]:
                cylinderVal = valDeltaConc
            else:
                cylinderVal = valGasConc
            diff = abs(cylinderVal[valCount] - aveVal)
            valComment = 'Measured %s difference between Instrument and Cylinder = %s ppm \n'%(valTitle[valCount],diff)
            fileDataFunc(dict(comment = valComment))
        NEXT = "StateDone"
    else:
        NEXT = "StateValidation"    
"""

[StateDone]
action="""
if rotValve:
    try:
        moveRotValve("2")
        rotValve.close()
        logFunc("Move MPV to position 1 and close connection.\n")
    except Exception, err:
        logFunc("\n%s\n" % err)
    rotValve = None
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
