############################################################################################################################################
#Date:              Date Modified:          Notes:
#20111104           D. Naidu                GalPeakAnalysis Test
#20140110           J. Carter               Includes ch4ppm output and peak2 vs. ch4ppm slope as a pressure calibration check
#20151115           P. Dinh                 Add graph and slope output to text file for methane cross-talk
############################################################################################################################################
[UserEditableParams]
num_disp_params = 2
0 = "gasSource", "Gas Source [1 = N2, 2 = ZA]", "1"
1 = "IsoBoxType", "IsoBox Type [1 = Standard, 2 = BigIso]", "1"

[FlowSeq]
0  =        300.0,          010.0,          060.0,          0300.0
1  =        600.0,          010.0,          060.0,          0250.0
2  =        600.0,          010.0,          060.0,          0190.0
3  =        600.0,          010.0,          060.0,          0150.0
4  =        600.0,          010.0,          060.0,          0080.0
5  =        600.0,          010.0,          060.0,          0050.0
6  =        600.0,          010.0,          060.0,          0030.0
7  =        600.0,          010.0,          060.0,          0020.0
8  =        600.0,          010.0,          060.0,          0015.0
9  =        600.0,          010.0,          060.0,          0020.0
10  =       600.0,          010.0,          060.0,          0030.0
11 =        600.0,          010.0,          060.0,          0050.0
12 =        600.0,          010.0,          060.0,          0080.0
13 =        600.0,          010.0,          060.0,          0150.0
14 =        600.0,          010.0,          060.0,          0190.0
15 =        600.0,          010.0,          060.0,          0250.0

[FlowSeq2]
0  =        300.0,          010.0,          060.0,          0300.0
1  =        600.0,          010.0,          060.0,          0200.0
2  =        600.0,          010.0,          060.0,          0150.0
3  =        600.0,          010.0,          060.0,          0050.0
4  =        600.0,          010.0,          060.0,          0015.0
5  =        600.0,          010.0,          060.0,          0050.0
6  =        600.0,          010.0,          060.0,          0150.0
7  =        600.0,          010.0,          060.0,          0200.0

[FlowSeq3]
0  =        300.0,          010.0,          060.0,          0600.0
1  =        600.0,          010.0,          060.0,          1000.0
2  =        600.0,          010.0,          060.0,          0600.0
3  =        600.0,          010.0,          060.0,          0300.0
4  =        600.0,          010.0,          060.0,          0150.0
5  =        600.0,          010.0,          060.0,          0080.0
6  =        600.0,          010.0,          060.0,          0050.0
7  =        600.0,          010.0,          060.0,          0030.0
8  =        600.0,          010.0,          060.0,          0020.0
9  =        600.0,          010.0,          060.0,          0030.0
10  =       600.0,          010.0,          060.0,          0050.0
11 =        600.0,          010.0,          060.0,          0080.0
12 =        600.0,          010.0,          060.0,          0150.0
13 =        600.0,          010.0,          060.0,          0300.0
14 =        600.0,          010.0,          060.0,          0600.0
15 =        600.0,          010.0,          060.0,          1000.0

[FlowSeq4]
0  =        300.0,          010.0,          060.0,          0300.0
1  =        600.0,          010.0,          060.0,          1000.0
2  =        600.0,          010.0,          060.0,          0300.0
3  =        600.0,          010.0,          060.0,          0080.0
4  =        600.0,          010.0,          060.0,          0020.0
5  =        600.0,          010.0,          060.0,          0080.0
6  =        600.0,          010.0,          060.0,          0300.0
7  =        600.0,          010.0,          060.0,          1000.0

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/Integration/GalPeakCal/GalPeakCal"

[SerialPorts]
MFC = COM2

[Output]
#General Param
measTime        = Timestamp,            %10.4f
EtalonTemp      = EtalonTemp,           %10.4f
CavityPressure  = CavityPressure,       %10.4f
CavityTemp      = CavityTemp,           %10.4f
h2o_vy          = h2o_vy,               %10.4f
H2O             = H2O,                  %10.4f
#iH2O Param
peak2           = peak2,                %10.4f
peak1           = peak1,                %10.4f
peak3           = peak3,                %10.4f
Delta_18_16     = Delta_18_16,          %10.4f
Delta_D_H       = Delta_D_H,            %10.4f
#MFC Param
seqIdx          = SeqIdx,               %10d
gasSource       = gasSource,            %10s
ch4_ppm         = ch4_ppm,              %10.4f
actFlow1        = ActFlow1,             %10.2f
actFlow2        = ActFlow2,             %10.2f
actFlow3        = ActFlow3,             %10.2f
setFlow1        = SetFlow1,             %10.2f
setFlow2        = SetFlow2,             %10.2f
setFlow3        = SetFlow3,             %10.2f
#Comment
Comment         = Comment,              %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import *
from os import makedirs
from os.path import exists, join
from time import strftime
import datetime
import shutil
import configobj
from pylab import plot, xlabel, ylabel, title, savefig, tight_layout

gasSource = int(editParamDict["gasSource"])
IsoBoxType = int(editParamDict["IsoBoxType"])
timeStr = strftime("%Y%m%d_%H%M%S")
#Range List to determine the
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#Find ComPort of MFC
#definition to open MFC Channel
def openChannel():
    for ch in range(1,4):
        mfcIntrf.sendString("ON %d" % (ch))
        return ch
#Definition to set flow rate of channel
def setFlow(flowList):
    for ch in range(1,4):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d" % (ch, setpoint))
#Defintiion to read the actual flow rate of that particular MFC channel
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0

#Flow Sequence
if  gasSource == 1:
    if IsoBoxType == 1:
        flowSeq = config["FlowSeq4"]
    else:
        flowSeq = config["FlowSeq2"]
else:
    if IsoBoxType == 1:
        flowSeq = config["FlowSeq3"]
    else:
        flowSeq = config["FlowSeq"]

lenSeq  = len(flowSeq)
logFunc('Their are %s steps in iH2O galpeak correction test'%(lenSeq))
seqIdx  = 0

peak2_tuple = []
ch4_ppm_tuple = []
h2o_vy_tuple = []

#User selects analyzer type
setMeasBuffer("analyze_iH2O7200", ["EtalonTemp", "CavityTemp", "CavityPressure", "h2o_vy", "H2O", "peak2", "peak3",
                                "peak1", "Delta_18_16", "Delta_D_H", "ch4_ppm"],200)
logFunc("Instrument is an iH2O analyzer.\n")
logFunc("Now will wait for instrument to start measuring.\n")
NEXT = "StateTestMFC"
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
#mfcIntrf.open()
#Test to see if analyzer can communicate with MFC
try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2.\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: %s on MFC Controller. Please advise.\n'%(mfcOpenChannel))
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,4):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum flow rate of MFC channel[%s] is %s.\n'%(ch,(rangeTable[int(returnVal)])))
    NEXT = "StateWaitMeasuring"
except Exception, err:
    logFunc(err)
    logFunc("Analyzer cannot retrieve max flow rate of MFC channels. Please advise.\n")
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas or ("peak2" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart    = 0
    instrAdjustStart = 0
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure is stable
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 50.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 50.0 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]

    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0015:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"

    else:
        logFunc("Instrument Etalon Temp is has stabilized.\n")
        clearMeasBuffer()
        if gasSource == 1:
            setValveMask(4)
        elif gasSource == 2:
            setValveMask(20)
        NEXT = "StateSetMFC"
"""

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(duration, f1, f2, f3) = flowSeq[str(seqIdx)]
channelsFlowRate = [float(f) for f in [f1, f2, f3]]
logFunc('Set MFC Channels to their respective flows: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()

if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        if seqIdx == 0:
            NEXT = "StateDataCollect"
        else:
            peak2_tuple.append(meas["peak2"])
            ch4_ppm_tuple.append(meas["ch4_ppm"])
            h2o_vy_tuple.append(meas["h2o_vy"])
            meas["seqIdx"] = seqIdx
            for ch in range(1,4):
                meas["actFlow%d"%ch] = getFlow(ch)
                meas["setFlow%d"%ch] = channelsFlowRate[ch-1]
            if gasSource == 1:
                meas["gasSource"] = "N2"
            elif gasSource == 2:
                meas["gasSource"] = "ZA"
            fileDataFunc(meas)

else:
    if seqIdx == lenSeq-1:
        logFunc("Gal Peak Data Acquisition complete.\n")
        NEXT = "StateSlopeCalculate"
    else:
        clearMeasBuffer()
        seqIdx = seqIdx+1
        logFunc('Moving to next Seq. Step: %d\n'%(seqIdx))
        NEXT = "StateSetMFC"
"""
[StateSlopeCalculate]
action = """
#fitting peak2 vs ch4_ppm
if gasSource == 1:
    gas = "N2"
    gas_methane = "N2_Methane_water_linear"
    gas_offset = "N2_Methane_offset"
elif gasSource == 2:
    gas = "AIR"
    gas_methane = "AIR_Methane_water_linear"
    gas_offset = "AIR_Methane_offset"
    
fitParams = polyfit(peak2_tuple,ch4_ppm_tuple,1)
slope = fitParams[0]*-1E-4
offset = fitParams[1]*-1E-4
polynomial = poly1d(fitParams)
ys = polynomial(peak2_tuple)

# Open the FitterConfig file to read the AIR_Methane_water_linear / N2_Methane_water_linear and offset
now = datetime.datetime.now()
src = '/home/picarro/I2000/InstrConfig/Calibration/InstrCal/FitterConfig.ini'
n = "_old_%s-%s-%s_%s%s%s.ini" % (now.year,now.month,now.day,now.hour,now.minute,now.second)
dst = src.replace(".ini",n)
config = configobj.ConfigObj(src, indent_type='\t')

logFunc("Analysis for Methane-Water Crosstalk Correction for %s Mode:\n" % gas)
logFunc("\tThe slope is %15.10f\n" % fitParams[0])
logFunc("\tThe offset is %15.10f\n" % fitParams[1])
logFunc("\tCurrent FitterConfig.ini parameters:\n\t\t%s_Methane_water_linear = %s, \n\t\t%s_Methane_offset = %s" % (gas, config[gas_methane], gas, config[gas_offset]))

if float(config[gas_methane]) == 0.0 and float(config[gas_offset]) == 0.0:
    config[gas_methane] = slope
    config[gas_offset] = offset
    logFunc("\n\tNew FitterConfig.ini parameters:\n\t\t%s_Methane_water_linear = %s \n\t\t%s_Methane_offset = %s" % (gas, slope, gas, offset))
    logFunc("\n\tThese values should automatically be save in the 'FitterConfig.ini' file.\n")
    logFunc("\n\t*****Please check that the original '%s_Methane_water_linear' and '%s_Methane_water_linear' value was '0'." % (gas, gas))
    logFunc("\n\tIf not, then simply copying and pasting this correction will not work.\n")
	# Save FitterConfig.ini file
    shutil.copy(src,dst)    
    with open(src, 'wb') as configfile:
        config.write(configfile)
else:
    logFunc("\n\t***Original '%s_Methane_water_linear' and '%s_Methane_offset' value was not '0'. No correction was applied.\n" % (gas, gas))

if gasSource == 2:
    yfitParams = polyfit(peak2_tuple,h2o_vy_tuple,1)
    logFunc("\tPressure Calibration Check: Analysis of y parameter extrapolated to zero water concentration:\n")
    logFunc("\tThe AIR_y2_at_zero from this test calculated as %10.8f\n" % yfitParams[1])
    logFunc("\tFor comparison, AIR_y2_at_zero is nominally 0.4022 + - 0.0162\n")
    logFunc("\tIf this value is different that the nominal value, the pressure calibration is not good.")

plot(peak2_tuple, ch4_ppm_tuple, 'o')
plot(peak2_tuple, ys)
xlabel("peak2")
ylabel("ch4_ppm")
title('Gas Source is %s, Slope = %4.3e, offset = %.3f\n%s_Methane_water_linear =  %4.3e\n%s_Methane_offset = %4.3e'  % (gas, fitParams[0],fitParams[1], gas, slope, gas, offset))
tight_layout()
outputdir = "/home/picarro/I2000/InstrConfig/Integration/GalPeakCal/"
savefig(join(outputdir, gas + "_Methane_water_linear_" + timeStr + ".png"))


NEXT = "StateDone"
"""

[StateDone]
action="""
GUI.popInfo("Gal Peak Data Acquisition is now complete.\n","CoordinatorGalPeakAnalysis")
setValveMask(0)
setFlow([10, 0, 0])
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
