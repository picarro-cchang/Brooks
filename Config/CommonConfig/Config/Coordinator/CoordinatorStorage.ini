###############################################################################################################################################################
#Date:     Modified by:   Notes:
#20110321  E.Lai          Storage
###############################################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "preDeltaRawMeasValue", "Pre Storage Delta Value", "0"
1 = "preCO2MeasValue", "Pre Storage CO2 Value", "0"
2 = "preCH4MeasValue", "Pre Storage CH4 Value", "0"
3 = "preCOMeasValue", "Pre Storage CO Value", "0"
4 = "cylinderNum", "Cylinder Number", "0"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/Integration/Storage/InstrStorage"

[Output]
#Instrument Measurements & Parameters - 30Secs,5Min
EtalonTemp      = "EtalonTemp",%10.4f
CavityPressure  = "CavityPressure",%10.4f
#iCO2
c12_mean        = "12CO2",%10.4f
c12_rolling     = "12CO2RollAve",%10.4f
c13_mean        = "13CO2",%10.4f
c13_rolling     = "13CO2RollAve",%10.4f
isoh2o_mean     = "iCO2_H2O",%10.4f
delta_raw_mean  = "DeltaRawMean",%10.4f
delta_rolling   = "DeltaRollingAve",%10.4f
c12_pztSD       = "c12PztStdev",%10.4f
c13_pztSD       = "c13PztStdev",%10.4f
c12_baseline    = "c12Baseline", %10.4f
c13_baseline    = "c13Baseline", %10.4f
#CO2_CH4
co2_mean        = "co2Mean",%10.4f
co2_rolling     = "co2RollingAve",%10.4f
co2_baseline    = "co2Baseline",%10.4f
co2_pzt_std     = "co2PztStd",%10.4f
ch4_mean        = "ch4Mean",%10.4f
ch4_rolling     = "ch4RollingAve",%10.4f
ch4_baseline    = "ch4Baseline",%10.4f
ch4_pzt_std     = "ch4PztStd",%10.4f
#CO_H2O
co_mean         = "coMean",%10.4f
co_rolling      = "coRollingAve",%10.4f
co_baseline     = "coBaseline",%10.4f
co_pzt_std      = "coPztStd",%10.4f
h2o_mean        = "h2oMean",%10.4f
h2o_rolling     = "h2oRollingAve",%10.4f
h2o_pzt_std     = "h2oPztSd",%10.4f
comment         = "Comment",%128s

[Setup]
initial = StateStart
final   = StateDone
error   = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
import os
import fnmatch
import time
#Date/Time
timeStr       = strftime("%Y%m%d_%H%M%S")
fileDateTime  = strftime("%Y%m%d%H")
testStartTime = time.time()
timePeriod    = 5760.0
timePreStorage = 2700.0
noiseCount = 0
#Generate Concatenated File
concatFilePath = '/home/picarro/I2000/InstrConfig/Integration/Storage/Storage_%s' %(timeStr)
if not exists(concatFilePath): makedirs(concatFilePath)
concatFile = "/".join((concatFilePath,'Storage_%s.dat'%(timeStr)))
concatFileOpen = open(concatFile,"w")
concatFileOpen.close()
#User Input Variables
preCO2MeasValue = float(editParamDict["preCO2MeasValue"])
preCH4MeasValue = float(editParamDict["preCH4MeasValue"])
preCOMeasValue = float(editParamDict["preCOMeasValue"])
preDeltaRawMeasValue = float(editParamDict["preDeltaRawMeasValue"])
cylinderNum = int(editParamDict["cylinderNum"])

#Initial Data Paths
startFilePath = []
yearPath      = []
monthPath     = []
dayPath       = []
yrCount       = []
monthCount    = []
dayCount      = []
fileCount     = []
#Definition for Initial Data Set
def dataArchive(yearPath, monthPath, dayPath, yrCount, monthCount, dayCount, fileCount):
    genDataPath = "/home/picarro/I2000/UserData/DataLog_User"

    for year in os.listdir(genDataPath):
        if fnmatch.fnmatch(year,'*'):
            yrCount.append(year)
            yearPath.append("/".join((genDataPath,yrCount[-1])))
    for month in os.listdir(yearPath[-1]):
        if fnmatch.fnmatch(month,'*'):
            monthCount.append(month)
            monthPath.append("/".join((yearPath[-1],monthCount[-1])))
    for day in os.listdir(monthPath[-1]):
        if fnmatch.fnmatch(day,'*'):
            dayCount.append(day)
            dayPath.append("/".join((monthPath[-1],dayCount[-1])))
    for file in os.listdir(dayPath[-1]):
        if fnmatch.fnmatch(file,'*-DataLog_User.dat'):
            fileCount.append(file)
    startFilePath.append(("/".join((dayPath[-1],fileCount[-1]))))

analyzerType = getAnalyzerType()

#iCO2
if analyzerType in ["CBDS" , "CFFDS"]:
    if analyzerType in ["CBDS"]:
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "CavityPressure", "wlm1_offset", "adjust_87", "adjust_88", "adjust_91", "12CO2", "13CO2",
                                        "Delta_Raw", "Delta_5min", "H2O", "c12_pzt_stdev", "c13_pzt_stdev", "base_87", "base_88"], 200)

        instrAdjusts = ["adjust_87", "adjust_88", "adjust_91"]
    elif analyzerType in ["CFFDS"]:
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "CavityPressure", "wlm1_offset", "adjust_87", "adjust_88", "adjust_75", "12CO2", "13CO2",
                                        "Delta_Raw", "Delta_5min", "H2O", "c12_pzt_stdev", "c13_pzt_stdev", "base_87", "base_88"], 200)

        instrAdjusts = ["adjust_87", "adjust_88", "adjust_75"]
    logFunc("Instrument is an iCO2 (C12, C13) analyzer.\n")
    logFunc("Instrument Storage Test will commence.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"

#CO2_CH4_H2O
elif analyzerType in ["CFADS", "CFDDS"]:
    setMeasBuffer("analyze_CFADS", ["EtalonTemp", "CavityPressure", "co2_adjust", "ch4_adjust", "h2o_adjust", "CO2", "CH4", "H2O",
                                    "co2_pzt_std", "ch4_pzt_std", "co2_base", "ch4_base"], 200)
    instrAdjusts = ["co2_adjust", "ch4_adjust", "h2o_adjust"]
    logFunc("Instrument is a CFADS (CO2, CH4, H2O) analyzer.\n")
    logFunc("Instrument Storage Test will commence.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"

#CO2_CH4_CO_H2O
elif analyzerType in ["CFKADS", "CFKBDS"]:
    setMeasBuffer("analyze_CFKADS",["EtalonTemp", "CavityPressure", "co2_adjust", "ch4_adjust", "co_adjust", "h2o_adjust", "CO2", "CH4", "H2O", "CO",
                                    "co2_pzt_std", "ch4_pzt_std", "co_pzt_std", "h2o_pzt_std","co2_base", "ch4_base"], 200)
    instrAdjusts = ["co2_adjust", "ch4_adjust", "co_adjust"]
    logFunc("Instrument is a 4-Species (CO2, CH4, H2O, CO) analyzer.\n")
    logFunc("Instrument Storage Test will commence.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"

#CO2_CO_H2O
elif analyzerType in ["CKADS"]:
    setMeasBuffer("analyze_CKADS",["EtalonTemp", "DasTemp", "CavityPressure", "co2_adjust", "co_adjust", "CO2", "CO", "H2O", "co2_pzt_std", "co_pzt_std",
                                    "co2_base", "final_base84"],200)
    instrAdjusts = ["co2_adjust", "co_adjust"]
    logFunc("Instrument is a CKADS (CO2, CO, H2O) analyzer.\n")
    logFunc("Instrument Storage Test will commence.\n")
    clearMeasBuffer()
    NEXT = "StateWaitMeasuring"

else:
    logFunc("Instrument Type is not supported.\n")
    NEXT = "StateDone"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Initial Values
etalon_start = 0
adjustStart = 0
#Wait for Instrument to start measuring

if analyzerType in ["CBDS", "CFFDS"]:
    if not meas or ("Delta_Raw" not in meas):
        sleep(1.0)
        logFunc('.')
        NEXT = "StateWaitMeasuring"
    else:
        logFunc("Instrument is now measuring.\n")
        logFunc("Now will wait for instrument to reach steady state.\n")
        NEXT = "StateInstrEtalonCert"

elif analyzerType in ["CFADS", "CFDDS"]:
    if not meas or ("CO2") not in meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateWaitMeasuring"
    else:
        logFunc("Instrument is now measuring.\n")
        logFunc("Now will wait for instrument to reach steady state.\n")
        NEXT = "StateInstrEtalonCert"

elif analyzerType in ["CFKADS", "CFKBDS", "CKADS"]:
    if not meas or ("CO" not in meas):
        sleep(1.0)
        logFunc('.')
        NEXT = "StateWaitMeasuring"
    else:
        logFunc("Instrument is now measuring.\n")
        logFunc("Now will wait for instrument to reach steady state.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrEtalonCert"

else:
    init_temp = meas["EtalonTemp"]
    sleep(10.0)
    etal_meas = measGetBufferFirst()
    etalon_meas = etal_meas["EtalonTemp"]
    if etalon_start != 3:
        etalon_diff = (abs(etalon_meas - init_temp))
        if etalon_diff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalon_start = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalon_start += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Verified Instrument Etalon Temp is settled.\n")
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateInstrAdjustCert]
action = """
#Wait for WLM to Center
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"

else:
    for adjustCount in range(len(instrAdjusts)):
        adjustVal = meas[instrAdjusts[adjustCount]]
        if abs(adjustVal) > 0.0001:
            adjustStart = 0
            logFunc("Waiting for instrument WLM to center.\n")
            NEXT = "StateInstrAdjustCert"
        else:
            adjustStart += 1
    if adjustStart == len(instrAdjusts):
        NEXT = "StateInitialTimeCollect"
    else:
        adjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateInitialTimeCollect]
action = """
meas = measGetBufferFirst()
#Start Collecting Data
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInitialTimeCollect"

else:
    thirtySecStartTime = meas["measTime"]
    concatStartTime = meas["measTime"]
    aveStartTime = meas["measTime"]
    rollingStartTime = meas["measTime"]
    #Mining Path of Start Data File
    mineStartDataPath = dataArchive(yearPath, monthPath, dayPath, yrCount, monthCount, dayCount, fileCount)
    logFunc('Initial Data Directory Path: %s \n'%(startFilePath[0]))
    #General Instr DataList
    etaTempMeas = [];
    CavityPressureMeas = [];
    #iCO2 DataList
    c12Meas = []; c13Meas = []; isoCO2H2O_meas = []; c12PztSdMeas = []; c13PztSdMeas = []; deltaRawMeas = []; c12BaselineMeas = []; c13BaselineMeas = []
    #CO2, CH4 DataList
    co2Meas = []; ch4Meas = []; co2PztSdMeas = []; ch4PztSdMeas = []; co2BaseLineMeas = []; ch4BaseLineMeas = []
    #CO, H2O DataList
    coMeas = []; h2oMeas = []; coPztAveMeas = []; coPztSdMeas = []; h2oPztSdMeas = []; coBaseLineMeas = []
    #Gas Species Rolling Average Lists
    co2RollingMeas = []; ch4RollingMeas = []; coRollingMeas = []; h2oRollingMeas = []; c12RollingMeas = []; c13RollingMeas = []; deltaRollingMeas = []
    #Gas Species Rolling Average Lists - Complete
    co2RollingAve = []; ch4RollingAve = []; coRollingAve = []; h2oRollingAve = []; c12RollingAve = []; c13RollingAve = []; deltaRollingAve = []
    NEXT = "StateInstrConfig"
"""

[StateInstrConfig]
action = """
param30SecAve = []
rollingAve = []
if analyzerType in ["CBDS", "CFFDS"]:
    paramType = ["EtalonTemp", "CavityPressure", "12CO2", "base_87", "c12_pzt_stdev", "13CO2", "c13_pzt_stdev", "base_88", "H2O", "Delta_Raw"]
    paramDict = ["EtalonTemp", "CavityPressure", "c12_mean", "c12_baseline", "c12_pztSD", "c13_mean", "c13_pztSD", "c13_baseline", "isoh2o_mean", "delta_raw_mean"]
    paramMeas = [etaTempMeas, CavityPressureMeas, c12Meas, c12BaselineMeas, c12PztSdMeas, c13Meas, c13PztSdMeas, c13BaselineMeas, isoCO2H2O_meas, deltaRawMeas]
    aveParamMeas = [c12RollingMeas, c13RollingMeas, deltaRollingMeas]
    rollingParamDict = ["c12_rolling", "c13_rolling", "delta_rolling"]
    rollingParamAve = [c12RollingAve, c13RollingAve, deltaRollingAve]

elif analyzerType in ["CFADS", "CFDDS"]:
    paramType = ["EtalonTemp", "CavityPressure", "CO2", "CH4", "co2_pzt_std", "ch4_pzt_std", "co2_base", "ch4_base", "H2O"]
    paramDict = ["EtalonTemp", "CavityPressure", "co2_mean", "ch4_mean", "co2_pzt_std", "ch4_pzt_std", "co2_baseline", "ch4_baseline", "h2o_mean"]
    paramMeas = [etaTempMeas, CavityPressureMeas, co2Meas, ch4Meas, co2PztSdMeas, ch4PztSdMeas, co2BaseLineMeas, ch4BaseLineMeas, h2oMeas]
    aveParamMeas = [co2RollingMeas, ch4RollingMeas, h2oRollingMeas]
    rollingParamDict = ["co2_rolling", "ch4_rolling", "h2o_rolling"]
    rollingParamAve = [co2RollingAve, ch4RollingAve, h2oRollingAve]

elif analyzerType in ["CFKADS", "CFKBDS"]:
    paramType = ["EtalonTemp", "CavityPressure", "CO2", "CH4", "CO", "H2O", "co2_pzt_std", "ch4_pzt_std", "co_pzt_std", "co2_base", "ch4_base"]
    paramDict = ["EtalonTemp", "CavityPressure", "co2_mean", "ch4_mean", "co_mean", "h2o_mean", "co2_pzt_std", "ch4_pzt_std", "co_pzt_std", "co2_baseline", "ch4_baseline"]
    paramMeas = [etaTempMeas, CavityPressureMeas, co2Meas, ch4Meas, coMeas, h2oMeas, co2PztSdMeas, ch4PztSdMeas, coPztSdMeas, co2BaseLineMeas, ch4BaseLineMeas]
    aveParamMeas = [co2RollingMeas, ch4RollingMeas, h2oRollingMeas, coRollingMeas]
    rollingParamDict = ["co2_rolling", "ch4_rolling", "h2o_rolling", "co_rolling"]
    rollingParamAve = [co2RollingAve, ch4RollingAve, h2oRollingAve, coRollingAve]

elif analyzerType in ["CKADS"]:
    paramType = ["EtalonTemp", "CavityPressure", "CO2", "CO", "H2O", "co2_pzt_std", "co_pzt_std", "co2_base", "final_base84"]
    paramDict = ["EtalonTemp", "CavityPressure", "co2_mean", "co_mean", "h2o_mean", "co2_pzt_std", "co_pzt_std", "co2_baseline", "co_baseline"]
    paramMeas = [etaTempMeas, CavityPressureMeas, co2Meas, coMeas, h2oMeas, co2PztSdMeas, coPztSdMeas, co2BaseLineMeas, coBaseLineMeas]
    aveParamMeas = [co2RollingMeas, h2oRollingMeas, coRollingMeas]
    rollingParamDict = ["co2_rolling", "h2o_rolling", "co_rolling"]
    rollingParamAve = [co2RollingAve, h2oRollingAve, coRollingAve]

NEXT = "StateDataCollect30Sec"
"""

[StateDataCollect30Sec]
action = """
meas = measGetBufferFirst()
#Initiate analysis of Delta Noise every 30Sec
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateDataCollect30Sec"

else:
    currTime = meas["measTime"]
    if (currTime - thirtySecStartTime) < 30.0:
        for count in range(len(paramMeas)):
            paramMeas[count].append(meas[paramType[count]])
    else:
        thirtySecStartTime = currTime
        for aveCount in range(len(paramMeas)):
            aveVal = average(paramMeas[aveCount])
            param30SecAve.append(aveVal)
            if analyzerType in ["CBDS", "CFFDS"]:
                if paramType[aveCount] == "12CO2":
                    aveParamMeas[0].append(aveVal)
                elif paramType[aveCount] == "13CO2":
                    aveParamMeas[1].append(aveVal)
                elif paramType[aveCount] == "Delta_Raw":
                    aveParamMeas[2].append(aveVal)
            elif analyzerType in ["CFADS", "CFDDS"]:
                if paramType[aveCount] == "CO2":
                    aveParamMeas[0].append(aveVal)
                elif paramType[aveCount] == "CH4":
                    aveParamMeas[1].append(aveVal)
                elif paramType[aveCount] == "H2O":
                    aveParamMeas[2].append(aveVal)
            elif analyzerType in ["CFKADS", "CFKBDS"]:
                if paramType[aveCount] == "CO2":
                    aveParamMeas[0].append(aveVal)
                elif paramType[aveCount] == "CH4":
                    aveParamMeas[1].append(aveVal)
                elif paramType[aveCount] == "H2O":
                    aveParamMeas[2].append(aveVal)
                elif paramType[aveCount] == "CO":
                    aveParamMeas[3].append(aveVal)
            elif analyzerType in ["CKADS"]:
                if paramType[aveCount] == "CO2":
                    aveParamMeas[0].append(aveVal)
                elif paramType[aveCount] == "H2O":
                    aveParamMeas[1].append(aveVal)
                elif paramType[aveCount] == "CO":
                    aveParamMeas[2].append(aveVal)
            paramMeas[aveCount][:] = []
        clearMeasBuffer()
        report30SecVal = dict(zip(paramDict, param30SecAve))
        fileDataFunc(dict(report30SecVal))
        param30SecAve[:] = []
        NEXT = "StateParam5MinAve"
"""

[StateParam5MinAve]
action = """
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateParam5MinAve"

else:
    aveCurrTime = meas["measTime"]
    if (aveCurrTime - aveStartTime) >= 300.0:
        for ave5MinCount in range(len(aveParamMeas)):
            ave5MinVal = average(aveParamMeas[ave5MinCount])
            rollingParamAve[ave5MinCount].append(ave5MinVal)
            aveParamMeas[ave5MinCount][:] = []
        aveStartTime = aveCurrTime
        NEXT = "StateRollingAve"
    else:
        NEXT = "StateRollingAve"
"""

[StateRollingAve]
action = """
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateRollingAve"

else:
    rollingCurrTime = meas["measTime"]
    if (rollingCurrTime - rollingStartTime) >= 300.0:
        for rollingCount in range(len(rollingParamAve)):
            rollingAve.append(average(rollingParamAve[rollingCount]))
        reportRollingVal = dict(zip(rollingParamDict, rollingAve))
        fileDataFunc(dict(reportRollingVal))
        rollingStartTime = rollingCurrTime
        rollingAve[:] = []

        if analyzerType in ["CBDS", "CFFDS"] and preDeltaRawMeasValue == 0.0:
            NEXT = "StatePreStorageComplete"
        elif analyzerType in ["CFADS", "CFDDS"] and (preCO2MeasValue == 0.0 and preCH4MeasValue == 0.0):
            NEXT = "StatePreStorageComplete"
        elif analyzerType in ["CFKADS", "CFKBDS"] and (preCO2MeasValue == 0.0 and preCH4MeasValue == 0.0 and preCOMeasValue == 0.0):
            NEXT = "StatePreStorageComplete"
        elif analyzerType in ["CKADS"] and (preCO2MeasValue == 0.0 and preCOMeasValue == 0.0):
            NEXT = "StatePreStorageComplete"
        else:
            NEXT = "StateTestComplete"
    else:
        NEXT = "StateDataCollect30Sec"
"""

[StatePreStorageComplete]
action = """
testCurrTime = time.time()
measPreStorageVal = []
if (testCurrTime - testStartTime) > timePreStorage:
    for preCount in range(len(rollingParamAve)):
        measNoise = std(rollingParamAve[preCount])
        measPreStorageVal.append(average(rollingParamAve[preCount]))
        if rollingParamDict[preCount] == "c12_rolling" or rollingParamDict[preCount] == "co2_rolling":
            if measNoise < 0.150:
                noiseCount += 1
            else:
                NEXT = "StateDataCollect30Sec"
        elif rollingParamDict[preCount] == "c13_rolling" or rollingParamDict[preCount] == "ch4_rolling":
            if measNoise < 0.01:
                noiseCount += 1
            else:
                NEXT = "StateDataCollect30Sec"
        elif rollingParamDict[preCount] == "co_rolling":
            if measNoise < 0.01:
                noiseCount += 1
            else:
                NEXT = "StateDataCollect30Sec"
        elif rollingParamDict[preCount] == "delta_rolling":
            if measNoise < 3.0:
                noiseCount += 1
            else:
                NEXT = "StateDataCollect30Sec"
    if noiseCount == len(rollingParamAve):
        for comCount in range(len(rollingParamAve)):
            comment = 'Measured PreStorage value for %s = %f'%(rollingParamDict[noiseCount], measPreStorageVal[noiseCount])
            fileDataFunc(dict(comment))
            NEXT = "StateDone"
else:
    NEXT = "StateDataCollect30Sec"
"""

[StateTestComplete]
action = """
testCurrTime = time.time()
if (testCurrTime - testStartTime) > timePeriod:
    if analyzerType in ["CBDS", "CFFDS"]:
        delPostMeasVal = average(deltaRollingAve)
        delStorageVal = abs(preDeltaRawMeasValue - delPostMeasVal)

        if delStorageVal > 2.0:
            GUI.popPause("Delta Storage Test has not passed after allotted time. Press 'OK' to continue.\n","CoordinatorStorage")
            timePeriod = 1260.0
            testStartTime = time.time()
            thirtySecStartTime = time.time()
            NEXT = "StateDataCollect30Sec"
        else:
            delStorVal = 'Delta Storage Value on Cylinder %s = %f per mil\n'%(cylinderNum, delStorageVal)
            fileDataFunc(dict(comment = delStorVal))
            NEXT = "StateDone"
    elif analyzerType in ["CFADS", "CFDDS"]:
        co2PostMeasVal = average(co2RollingAve)
        ch4PostMeasVal = average(ch4RollingAve)
        co2StorageVal = (abs(preCO2MeasValue - co2PostMeasVal))*1000.0
        ch4StorageVal = (abs(preCH4MeasValue - ch4PostMeasVal))*1000.0

        if co2StorageVal > 150.0 or ch4StorageVal > 1.0:
            GUI.popPause("CO2, CH4 Storage Test has not passed after allotted time. Press 'OK' to continue.\n","CoordinatorStorage")
            timePeriod = 1260.0
            testStartTime = time.time()
            thirtySecStartTime = time.time()
            NEXT = "StateDataCollect30Sec"
        else:
            co2_ch4StorVal = 'CO2 and CH4 Storage Values on Cylinder %s = %f , %f ppb\n'%(cylinderNum, co2StorageVal, ch4StorageVal)
            fileDataFunc(dict(comment = co2_ch4StorVal))
            NEXT = "StateDone"
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        co2PostMeasVal = average(co2RollingAve)
        ch4PostMeasVal = average(ch4RollingAve)
        coPostMeasVal = average(coRollingAve)
        co2StorageVal = (abs(preCO2MeasValue - co2PostMeasVal))*1000.0
        ch4StorageVal = (abs(preCH4MeasValue - ch4PostMeasVal))*1000.0
        coStorageVal = (abs(preCOMeasValue - coPostMeasVal))*1000.0

        if co2StorageVal > 150.0 or ch4StorageVal > 1.0:
            GUI.popPause("CO2, CH4, CO Storage Test has not passed after allotted time. Press 'OK' to continue.\n","CoordinatorStorage")
            timePeriod = 1260.0
            testStartTime = time.time()
            thirtySecStartTime = time.time()
            NEXT = "StateDataCollect30Sec"
        else:
            co2_ch4_coStorVal = 'CO2, CH4, and CO Storage Vals on Cylinder %s = %f , %f, %f ppb\n'%(cylinderNum, co2StorageVal, ch4StorageVal, coStorageVal)
            fileDataFunc(dict(comment = co2_ch4_coStorVal))
            NEXT = "StateDone"
    elif analyzerType in ["CKADS"]:
        co2PostMeasVal = average(co2RollingAve)
        coPostMeasVal = average(coRollingAve)
        co2StorageVal = (abs(preCO2MeasValue - co2PostMeasVal))*1000.0
        coStorageVal = (abs(preCOMeasValue - coPostMeasVal))*1000.0

        if co2StorageVal > 150.0:
            GUI.popPause("CO2, CO Storage Test has not passed after allotted time. Press 'OK' to continue.\n","CoordinatorStorage")
            timePeriod = 1260.0
            testStartTime = time.time()
            thirtySecStartTime = time.time()
            NEXT = "StateDataCollect30Sec"
        else:
            co2_coStorVal = 'CO2 and CO Storage Vals on Cylinder %s  = %f , %f ppb\n'%(cylinderNum, co2StorageVal, coStorageVal)
            fileDataFunc(dict(comment = co2_coStorVal))
            NEXT = "StateDone"
else:
    NEXT = "StateDataCollect30Sec"
"""

[StateDone]
action = """
GUI.popInfo("Test has stopped.\n","CoordinatorStorage")
logFunc("Done!")
"""

[StateError]
action = """
logFunc("Error %s in state %s\n" %(ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
