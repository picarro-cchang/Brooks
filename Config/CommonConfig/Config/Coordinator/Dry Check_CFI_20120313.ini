############################################################################################################################################
#Date:              Date Modified:         Notes:
#20111130           E.Lai                  Dry Check
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "cycleCount", Number of Cycles (Max is 10)", "10"

[FlowSeq]
#Step Duration Channel1 Channel2
0 = 300.0, 0.000, 0.030
1 = 300.0, 0.001, 0.029
2 = 300.0, 0.003, 0.027
3 = 300.0, 0.005, 0.025
4 = 300.0, 0.007, 0.023
5 = 300.0, 0.010, 0.020
6 = 300.0, 0.015, 0.015
7 = 300.0, 0.020, 0.010
8 = 300.0, 0.020, 0.005
9 = 300.0, 0.020, 0.000
10 = 300.0, 0.020, 0.005
11 = 300.0, 0.020, 0.010
12 = 300.0, 0.015, 0.015
13 = 300.0, 0.010, 0.020
14 = 300.0, 0.005, 0.025
15 = 300.0, 0.003, 0.027
16 = 300.0, 0.001, 0.029
17 = 300.0, 0.000, 0.030

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/Integration/DryCheck/DryCheck"

[Output]
#iCO2 Param
CO2_dry    = CO2_dry,   %10.4f
CH4_dry    = CH4_dry,   %10.4f
H2O        = H2O,       %10.4f
CO         = CO,        %10.4f
12CO2_dry  = 12CO2_dry, %10.4f
13CO2_dry  = 13CO2_dry, %10.4f
#MFC Param
seqIdx     = seqIdx,    %10s
ActFlow1   = ActFlow1,  %10.2f
ActFlow2   = ActFlow2,  %10.2f
SetFlow1   = SetFlow1,  %10.2f
SetFlow2   = SetFlow2,  %10.2f
#Comment
Comment    = Comment,   %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
from configobj import ConfigObj
from pylab import figure, plot, grid, xlabel, ylabel, title, savefig, text
import matplotlib.pyplot as plt
import binascii
import serial
import time
import string
import os

#Serial Class Function
class TimeoutError(Exception):
    pass

class SerialIntrf(object):
    def __init__(self,port,baudrate=9600,timeout=1,xonxoff=1):
        # port = 0 means port = "COM1"
        self.serCnnct = serial.Serial(port=port,baudrate=baudrate,timeout=timeout,xonxoff=xonxoff)
    def openComm(self):
        self.serCnnct.open()
    def closeComm(self):
        self.serCnnct.close()
    def dataflush(self):
        self.serCnnct.flushInput()
    def sendComm(self,str):
        self.serCnnct.write(str + "\r\n")
    def getString(self):
        line = []
        while True:
            ch = self.serCnnct.read()
            if not ch:
                raise TimeoutError
            if ch != '\r':
                line.append(ch)
            else:
                return "".join(line)
    def getStrings(self):
        lines = []
        while True:
            try:
                lines.append(self.getString())
            except TimeoutError:
                return "\n".join(lines)

#definition to convert ascii to hex
def asctohex(ascString):
    hexList = [hex(ord(x)) for x in ascString]
    return reduce(lambda x,y: hex(int(x,16) + int(y,16)), hexList)

#definition to convert Decimal to Binary
def dec2bin(n):
    bStr = ''
    if n < 0: raise ValueError
    if n == 0: return '0'
    while n > 0:
        bStr = str(n % 2) + bStr
        n = n >> 1
    return bStr

#definition to convert hex to binary
def tobin(x, count = 8):
    return "".join(map(lambda y:str((x>>y)&1), range(count-1, -1, -1)))

#definition to calculate Two's Complement
def twoscomp(numStr):
    if len(numStr) != 8:
        diff = 8 - len(numStr)
        zeroString = '0'*diff
        numStr = zeroString+numStr
        return tobin(-int(numStr,2), len(numStr))
    else:
        return tobin(-int(numStr,2), len(numStr))

#definition to convert binary to hex
def bintohex(s):
    return ''.join(["%x"%string.atoi(bin,2) for bin in s.split()])

#definition to generate LRC Value
def lrcCommand(command):
    ascString = command
    hexString = asctohex(ascString)
    hexString = hexString[0:2]+hexString[-2:]
    hexVal = eval(hexString)
    decVal = dec2bin(hexVal)
    bin2CompVal = twoscomp(decVal)
    ascHexVal = bintohex(bin2CompVal)
    return ascHexVal

#definition to find active com-port
def findComPorts():
    activePort = []
    for portCount in range(2,99):
        try:
            print portCount
            mfcIntrf = SerialIntrf(portCount)
            mfcIntrf.openComm()
            serValLRC = lrcCommand('?Srnm')
            serCommand = '?Srnm'+str(serValLRC)
            mfcIntrf.sendComm(serCommand)
            serVal = mfcIntrf.getString()
            print serVal
            if  serVal == 'Srnm1423522F':
                activePort.append(portCount)
                mfcIntrf.closeComm()
            elif serVal == 'Srnm1469941F':
                activePort.append(portCount)
                mfcIntrf.closeComm()
            else:
                mfcIntrf.closeComm()
        except Exception, err:
            continue
    return activePort

#Get AnalyzerType
analyzerType = getAnalyzerType()
#Flow Sequence
flowSeq = config["FlowSeq"]
lenSeq = len(flowSeq)
#Initial Step
seqIdx = 0
logFunc('Their are %s steps in the DryCheck test'%(lenSeq))
#Number of Cycles
cycleCount = int(editParamDict["cycleCount"])
currCycle = 0
NEXT = "StateDriver"
"""

[StateDriver]
action = """
GUI.popPause("Please load driver for serial USB hub if havent done so.\n","Dry_Check")
NEXT = "StateFindActivePorts"
"""

[StateFindActivePorts]
action = """
activePorts = findComPorts()
if len(activePorts) == 2:
    logFunc("Com port %s is live with Sierra Flow Meter(S/N: Srnm1423522F).\n" %(activePorts[0]))
    mfcIntrf1 = SerialIntrf(int(activePorts[0]))
    mfcIntrf1.openComm()
    logFunc("Com port %s is live with Sierra Flow Meter(S/N: Srnm1469941F).\n" %(activePorts[1]))
    mfcIntrf2 = SerialIntrf(int(activePorts[1]))
    mfcIntrf2.openComm()
    NEXT = "StateSetMFC"
else:
    logFunc("Coordinator was not able to find the 2 active com ports for flow meters.\n")
    NEXT = "StateDone"
"""

[StateSetMFC]
action = """
(duration, f1, f2) = flowSeq[str(seqIdx)]
channelsFlowRate = [str(f) for f in [f1, f2]]
logFunc('Set Sierra Flow Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
stopTime = time.time() + float(duration)

#Set FLow
for flowNum in range(len(channelsFlowRate)):
    setCommand = '!Setr'+channelsFlowRate[flowNum]
    print setCommand
    ascHexVal = lrcCommand(setCommand)
    setCommandFull = setCommand+ascHexVal
    print setCommandFull
    if flowNum == 0:
        mfcIntrf1.sendComm(setCommandFull)
    else:
        mfcIntrf2.sendComm(setCommandFull)
    NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """

if time.time() < stopTime:
    NEXT = "StateDataCollect"
else:
    NEXT = "StateDataAve"
"""

[StateDataAve]
action = """
#Increment Sequence Step Size
seqIdx += 1
aveList = []

#Cyclic Restrictions
if seqIdx == (lenSeq-1):
    currCycle += 1
    seqIdx = 0

#Cycle Count
if int(currCycle) == cycleCount:
    NEXT = "StateDone"
else:
    NEXT = "StateSetMFC"
"""

[StateDone]
action="""
GUI.popInfo("2D Interference Test is now complete.\n","CoordinatorDryCheck")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""

