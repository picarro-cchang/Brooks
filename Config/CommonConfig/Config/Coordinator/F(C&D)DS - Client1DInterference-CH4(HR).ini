############################################################################################################################################
#Date:              Date Modified:          Notes:               
#20140512           E.Lai                   CFIDS: 1D HR CH4 Interference - Client
#20140708           E.Lai                   Updated coordinator to include FCDS/FDDS analyzers
#20140716           E.Lai                   Updated coordinator with FCDS/FDDS HR testing
#20140902           J.Yiu					Updated for FEDS Acadia Lab Modes
############################################################################################################################################
[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceHR-CH4/1DInterferenceHR-CH4"

[Output]
HP_12CH4            = HP_12CH4,            %10.4f
HR_12CH4            = HR_12CH4,            %10.4f
HP_Delta_iCH4_Raw   = HP_Delta_iCH4_Raw,   %10.4f
HR_Delta_iCH4_Raw   = HR_Delta_iCH4_Raw,   %10.4f
12CO2               = 12CO2,               %10.4f
CO2                 = CO2,                 %10.4f
H2O                 = H2O,                 %10.4f
peakheight_5        = peakheight_5,        %10.4f
peak0_spec          = peak0_spec,          %10.4f
peak_24             = peak_24,             %10.4f
peak_30             = peak_30,             %10.4f
ch4_splinemax       = ch4_splinemax,       %10.4f
HC_res2             = HC_res2,             %10.4f
12CH4_raw           = 12CH4_raw,           %10.4f
Gas                 = Gas,                 %10s
Range               = Range,               %10s
SeqIdx              = SeqIdx,              %5f
SetFlow1            = SetFlow1,            %10.2f
SetFlow2            = SetFlow2,            %10.2f
SetFlow3            = SetFlow3,            %10.2f
SetFlow4            = SetFlow4,            %10.2f
ActFlow1            = ActFlow1,            %10.2f
ActFlow2            = ActFlow2,            %10.2f
ActFlow3            = ActFlow3,            %10.2f
ActFlow4            = ActFlow4,            %10.2f
Comment             = Comment,             %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from pylab import*
from ctypes import*
from os import makedirs
from os.path import exists, join 
from configobj import ConfigObj
import subprocess
import time

#PSAPI.DLL
psapi = windll.psapi
#Kernel32.DLL
kernel = windll.kernel32
#AnalyzerType
analyzerType = getAnalyzerType()

#User selects analyzer type
if analyzerType in ["CFIDS"]:
    logFunc("Instrument is an iCO2,iCH4 analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateStartParameters"
elif analyzerType in ["FCDS", "FDDS", "FEDS"]:
    logFunc("Instrument is an iCH4 analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateStartParameters"
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateStartParameters]
action = """
#Test State Count
stateTestMeasBufferCount = 1
stateCavityPressureCount = 2
stateEtalonCertCount = 3
stateCOSquishCount = 4
stateInstrAdjustCount = 5
stateH2OCheckCount = 6
stateFlowDone = 7
stateDataGenAve = 8
stateDataCollectComplete = 9
stateRestart = 10
stateDataCollectCount = 11
stateError = 99
#Note: gasType = 0 (Initialization), gasType = 1 (N2), gasType = 2 (HE), gasType = 3 (Air)
gasType = 0.0
#Note: gasRange = 1 (Low Concentration), gasRange = 2 (High Concentration)
gasRange = 0.0
gasRangeCheck = False

NEXT = "StateMeasBuffer"
"""

[StateMeasBuffer]
action = """
try:
    setTagalongData("ClientState", 0.0)
    setTagalongData("TestStep", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
except Exception, err:
    logFunc("Cannot tag parameter into datastream\n")
    logFunc("Will try again\n")
    NEXT = "StateMeasBuffer"

if analyzerType in ["CFIDS"]:
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "12CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                    "peakheight_5", "ch4_splinemax", "HC_res2", "12CH4_raw", "TestStep", "ClientState", "ReadyState", "SeqIdx", "Gas", "Range"],200)
elif analyzerType in ["FCDS", "FDDS"]:
    #Peaks are for high precision and high range modes
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                    "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax", "TestStep", "ClientState", "ReadyState", "SeqIdx", "Gas", "Range"],200)
elif analyzerType in ["FEDS"]:
    #Peaks are for high precision and high range modes
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                    "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax", "TestStep", "ClientState", "ReadyState", "SeqIdx", "Gas", "Range"],200)									
clearMeasBuffer()
logFunc("Insert status indicators for client status and state status\n")
setTagalongData("TestStep", stateTestMeasBufferCount)
NEXT = "StateTestMeasBuffer"
"""

[StateTestMeasBuffer]
action = """
meas = measGetBufferFirst()
#Verify Buffer has the right data parameters
if not meas or ("ReadyState" not in meas) or ("HP_Delta_iCH4_Raw" not in meas) or ("TestStep" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateTestMeasBuffer"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateTestMeasBufferCount:
        setTagalongData("ClientState", 1.0)
        setTagalongData("TestStep", 1.0)
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == 1.0:
        logFunc("Instrument is now measuring\n")
        logFunc("Now will wait for cavity pressure to stabilize\n")    
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateCavityPressureCount)
        cavityPressure = 0
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
    else:
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verify Cavity Pressure
if analyzerType in ["CFIDS", "FCDS", "FDDS", "FEDS"]:
    pressureSetpoint = 148.0

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrCavityPressure"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateCavityPressureCount:
        cavityPress_meas = meas["CavityPressure"]
        if cavityPressure != 3:
            if abs(cavityPress_meas - pressureSetpoint) >= 0.05:
                cavityPressure = 0
                NEXT = "StateInstrCavityPressure"
            else:
                cavityPressure += 1
                NEXT = "StateInstrCavityPressure"
        else:
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
            NEXT = "StateInstrCavityPressure"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateCavityPressureCount:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr\n")
        logFunc("Now will wait for etalon temperature to stabilize\n")
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateEtalonCertCount)
        etalonStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
"""
    
[StateInstrEtalonTemp]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrEtalonTemp"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateEtalonCertCount:
        initTemp = meas["EtalonTemp"]
        sleep(10.0)
        etalMeas = measGetBufferFirst()
        etalTemp = etalMeas["EtalonTemp"]
        if etalonStart != 3:
            etalonDiff = abs(etalTemp - initTemp)
            if etalonDiff > 0.0005:
                etalonStart = 0
                NEXT = "StateInstrEtalonTemp"
            else:
                etalonStart += 1
                NEXT = "StateInstrEtalonTemp"
        else:
            setTagalongData("ClientState", 1.0)
            etalonStart = 0
            clearMeasBuffer()
            NEXT = "StateInstrEtalonTemp"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateEtalonCertCount:
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateInstrAdjustCount)
        logFunc("Etalon temp stabilized to nominal temp fo 45.0 C\n")
        logFunc("Now will confirm adjust values are acceptable magnitude\n")
        #List for checking cm adjust values
        adjustParam = ["adjust_5", "ch4_high_adjust"]
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT="StateInstrAdjustCert"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateInstrAdjustCount:
        for adjustCount in range(len(adjustParam)):
            cmVal = meas[adjustParam[adjustCount]]
            if abs(cmVal) < 0.0003:
                instrAdjustStart += 1
        if instrAdjustStart == len(adjustParam):
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
        else:
            instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateInstrAdjustCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateH2OCheckCount)
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        logFunc("WLM Adjust magnitudes are acceptable\n")
        logFunc("Now will start H2O level check\n")
        clearMeasBuffer()        
        NEXT = "StateH2OCheck"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateH2OCheck"
else:
    checkH2OMeas.append(meas["H2O"])
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateH2OCheckCount:
        if (time.time() - h2oCheckTime) < 360.0:
            NEXT = "StateH2OCheck"
        else:
            aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
            if aveH2OVal > 0.1:
                logFunc("Peak H2O level is too high-Please advise\n")
                NEXT = "StateDone"
            else:
                setTagalongData("ClientState", 1.0)
                clearMeasBuffer()
                NEXT = "StateH2OCheck"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateH2OCheckCount:
        #Indication of test cycle type
        testType = "Measured"
        restartOccurred = False
        logFunc("H2O level check is suitable for test\n")
        logFunc("Now will commence Gas step sequence of 1D CH4 Interference test\n")
        clearMeasBuffer()
        NEXT = "StateDataArrayConfig"
    else:
        clearMeasBuffer()
        NEXT = "StateH2OCheck"
"""

[StateDataArrayConfig]
action = """
if analyzerType in ["CFIDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "12CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                        "peakheight_5", "ch4_splinemax", "HC_res2", "12CH4_raw", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", 
                                        "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "TestStep", "ClientState", "ReadyState", "Gas", "Range"],200)
        paramMeas = ["HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", "HP_12CH4", "HR_12CH4", "12CO2", "H2O", "peakheight_5", "ch4_splinemax", "HC_res2", "12CH4_raw",
                     "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
        paramMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "HP_12CH4":[], "HR_12CH4":[], "12CO2":[], "H2O":[], "peakheight_5":[], "ch4_splinemax":[], "HC_res2":[], "12CH4_raw":[], 
                          "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                          "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "HP_12CH4":[], "HR_12CH4":[], "12CO2":[], "H2O":[], "peakheight_5":[], "ch4_splinemax":[], "HC_res2":[], "12CH4_raw":[], 
                             "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                             "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "12CO2", "H2O","HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                       "peakheight_5", "ch4_splinemax", "HC_res2", "12CH4_raw"],200)
elif analyzerType in ["FCDS", "FDDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                        "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", 
                                        "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "TestStep", "ClientState", "ReadyState", "Gas", "Range"],200)
        paramMeas = ["HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", "H2O", "HP_12CH4", "HR_12CH4", "CO2", "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax",
                     "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
        paramMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "HR_12CH4":[], "CO2":[], "peakheight_5":[], "peak0_spec":[], "peak_24":[], "peak_30":[], "ch4_splinemax":[],
                          "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                          "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "HR_12CH4":[], "CO2":[], "peakheight_5":[], "peak0_spec":[], "peak_24":[], "peak_30":[], "ch4_splinemax":[],
                             "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                             "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O","HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw",  
                                       "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax"],200)
elif analyzerType in ["FEDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_FBDS_Lab", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O", "HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", 
                                        "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", 
                                        "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "TestStep", "ClientState", "ReadyState", "Gas", "Range"],200)
        paramMeas = ["HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw", "H2O", "HP_12CH4", "HR_12CH4", "CO2", "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax",
                     "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4"]
        paramMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "HR_12CH4":[], "CO2":[], "peakheight_5":[], "peak0_spec":[], "peak_24":[], "peak_30":[], "ch4_splinemax":[],
                          "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                          "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"HP_Delta_iCH4_Raw":[], "HR_Delta_iCH4_Raw":[], "H2O":[], "HP_12CH4":[], "HR_12CH4":[], "CO2":[], "peakheight_5":[], "peak0_spec":[], "peak_24":[], "peak_30":[], "ch4_splinemax":[],
                             "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], 
                             "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_FBDS_Lab", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "ch4_high_adjust", "HP_12CH4", "HR_12CH4", "CO2", "H2O","HP_Delta_iCH4_Raw", "HR_Delta_iCH4_Raw",  
                                       "peakheight_5", "peak0_spec", "peak_24", "peak_30", "ch4_splinemax"],200)									   

#MFC Step Cycle Start Integers
if restartOccurred == False:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    aveDone = False
    NEXT = "StateDataCollect"
else:
    NEXT = "StateRestartMeasCheck"
"""

[StateRestartMeasCheck]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateRestartMeasCheck"
else:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
    restartOccurred = False
    NEXT = "StateDataArrayConfig"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas) or ("ReadyState" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollect"
else:
    #Retrieve gas range and type
    if not gasRangeCheck:
        gasType = meas["Gas"]
        gasRange = meas["Range"]
        gasRangeCheck = True
    #Collect Data
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataCollectCount:
        for x in paramMeas:
            paramMeasArray[x].append(meas[x])
        NEXT = "StateDataCollect"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 2.0 and meas["TestStep"] == stateDataCollectCount:
        setTagalongData("TestStep", stateDataCollectComplete)
        setTagalongData("ClientState", 2.0)        
        NEXT = "StateDataCollectComplete"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateFlowDone:
        NEXT = "StateDataRegressionFit"
    else:
        NEXT = "StateDataCollect"
"""

[StateDataCollectComplete]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollectComplete"
else:
    if meas["ClientState"] == 2.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataCollectComplete:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateDataGenAve)
        clearMeasBuffer()
        NEXT = "StateDataGenAve"
    else:
        NEXT = "StateDataCollectComplete"
"""

[StateDataGenAve]
action = """
def aveData():
    for a in paramMeas:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataGenAve"
else:
    if aveDone == False:
        #Server will check clients' states
        paramDictList = []
        calVal = aveData()
        paramDict = dict(zip(paramMeas, paramDictList))
        paramDict["Comment"] = testType
        paramDict["Gas"] = gasType
        paramDict["Range"] = gasRange
        fileDataFunc(dict(paramDict))
        paramDictList[:] = []
        aveDone = True
        NEXT = "StateDataGenAve"
    elif aveDone == True:
        if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataGenAve:
            setTagalongData("ClientState", 1.0)
            NEXT = "StateDataGenAve"
        elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataGenAve:
            aveDone = False
            #Increase Step Count
            stateDataCollectCount += 1
            setTagalongData("TestStep", stateDataCollectCount)
            #Reset ClientState
            setTagalongData("ClientState", 0.0)
            NEXT = "StateDataCollect"
        else:
            NEXT = "StateDataGenAve"
"""

[StateDataRegressionFit]
action = """
#1D Analysis
def oneDimLinearFit(xAxis, yAxis, fitTitle):
    fit = polyfit(xAxis, yAxis, 1)
    measFitLinear = "Measured %s slope is %s\n" %(fitTitle, str(-fit[0]))
    measFitOffset = "Measured %s offset is %s\n" %(fitTitle, str(-fit[1]))
    logFunc("Signs have already been inverted\n")
    logFunc("%s"%(measFitLinear))
    logFunc("%s"%(measFitOffset))
    fileDataFunc(dict(zip("Comment","Signs have already been inverted")))
    fileDataFunc(dict(zip("Comment", "%s"%(measFitLinear))))
    fileDataFunc(dict(zip("Comment", "%s"%(measFitOffset))))
    return fit

#For 1D Interference
if gasRange == 2:
    if analyzerType in ["FCDS", "FDDS", "FEDS"]:
        fitCO2 = oneDimLinearFit(aveParamMeasArray["peak0_spec"], aveParamMeasArray["peak_24"], "peak0_spec vs peak_24")
        fitCO2 = [i for i in fitCO2]
        fitH2O = oneDimLinearFit(aveParamMeasArray["peak0_spec"], aveParamMeasArray["peak_30"], "peak0_spec vs peak_30")
        fitH2O = [i for i in fitH2O]
    elif analyzerType in ["CFIDS"]:
        fitCO2 = oneDimLinearFit(aveParamMeasArray["peak0_spec"], aveParamMeasArray["peak87_baseave"], "peak0_spec vs peak87_baseave")
        fitCO2 = [i for i in fitCO2]
        fitH2O = oneDimLinearFit(aveParamMeasArray["peak0_spec"], aveParamMeasArray["peak_30"], "peak0_spec vs peak_30")
        fitH2O = [i for i in fitH2O]
NEXT = "StatePlotResults"
"""

[StatePlotResults]
action  = """
def genPlot(xAxis, yAxis, titleName, xLabelName, yLabelName, zFit, plotName, testRun, testRange):
    figure()
    plot(xAxis, yAxis, "bo", xAxis, polyval(zFit, xAxis))
    ax = gca()
    title("%s"%(titleName), color = "black", fontweight = "bold")
    xlabel("%s"%(xLabelName), color = "b", fontweight = "bold")
    ylabel("%s"%(yLabelName), color = "b", fontweight = "bold")
    ax.text(average(xAxis), max(yAxis), "Slope: %f" %(zFit[0]), 
            horizontalalignment = "left", verticalalignment = "top", 
            fontsize = 10, fontweight = "bold")
    ax.text(average(xAxis), (max(yAxis)*0.90), "Intercept: %f" %(zFit[1]),
            horizontalalignment = "left", verticalalignment = "top", 
            fontsize = 10, fontweight = "bold")
    #Output Directory
    timeStr = time.strftime("%Y%m%d_%H%M%S")
    savefig((join(outputDir, "1D_" + testRange + "_InterferencePlot" + testRun + plotName + timeStr + ".png")))
    
#Output path & file generation
outputDir = r"C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceHR-CH4"
if not exists(outputDir): makedirs(outputDir)

#Will plot results regardless whether this test is a measurement or a validation
if gasRange == 2:
    testRange = "HighConc"
    if analyzerType in ["FCDS", "FDDS", "FEDS"]:
        fitHR_12CH4vsCO2 = polyfit(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["CO2"],1)
        genPlot(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["CO2"], 
                "HR_12CH4 vs CO2", "HR_12CH4 (ppm)", "CO2 (ppm)", fitHR_12CH4vsCO2, "HR_12CH4vsCO2", testType, testRange)
        fitHR_12CH4vsH2O = polyfit(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["H2O"],1)
        genPlot(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["H2O"], 
                "HR_12CH4 (ppm) vs H2O", "HR_12CH4 (ppm)", "H2O", fitHR_12CH4vsH2O, "HR_CH4vsH2O", testType, testRange)
    elif analyzerType in ["CFIDS"]:
        fitHR_12CH4vs12CO2 = polyfit(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["12CO2"],1)
        genPlot(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["12CO2"], 
                "HR_12CH4 vs 12CO2", "HR_12CH4 (ppm)", "12CO2 (ppm)", fitHR_12CH4vsCO2, "HR_12CH4vsCO2", testType, testRange)
        fitHR_12CH4vsH2O = polyfit(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["H2O"],1)
        genPlot(aveParamMeasArray["HR_12CH4"], aveParamMeasArray["H2O"], 
                "HR_12CH4 (ppm) vs H2O", "HR_12CH4 (ppm)", "H2O", fitHR_12CH4vsH2O, "HR_CH4vsH2O", testType, testRange)

if testType == "Measured":
    NEXT = "StateCoeffImplement"
elif testType == "Validation":
    NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
if gasRange == 2:
    if analyzerType in ["FCDS", "FDDS", "FEDS"]:
        #Write new Values to .ini File
        #.Ini file of Before and Proposed Values
        correctFitFile = r"C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceHR-CH4/%s_1D-HR_CorrectedFits_%s.ini" %(analyzerType, time.strftime("%Y%m%d_%H%M%S"))
        corrConfig = ConfigObj(correctFitFile)    
        #Need to create an installer with the right modes
        #Note: There is only 1 option for this test, which is "Air" background
        if gasType == 3.0:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/FitterConfig.ini"
        config = ConfigObj(configPath)
        oldFitValues = {"Peak30_offset": "%s" %(config["Peak30_offset"]), "Peak30_methane_linear": "%s" %(config["Peak30_methane_linear"]),
                        "Peak24_offset": "%s" %(config["Peak24_offset"]), "Peak24_methane_linear": "%s" %(config["Peak24_methane_linear"])}
        corrConfig["Old Fit Values"] = oldFitValues
        corrConfig.write()
        #Write New Values to Summary Coefficient Test File
        newFitValues = {"Peak30_offset": "%s" %(str(-fitH2O[1])), "Peak30_methane_linear": "%s "%(str(-fitH2O[0])),
                        "Peak24_offset": "%s" %(str(-fitCO2[1])), "Peak24_methane_linear": "%s "%(str(-fitCO2[0]))}
        corrConfig["New Fit Values"] = newFitValues
        corrConfig.write()
        config["Peak30_offset"] = str(-fitH2O[1])
        config["Peak30_methane_linear"] = str(-fitH2O[0])
        config["Peak24_offset"] = str(-fitCO2[1])
        config["Peak24_methane_linear"] = str(-fitCO2[0])
        config.write()
    elif analyzerType in ["CFIDS"]:
        #Write new Values to .ini File
        #.Ini file of Before and Proposed Values
        correctFitFile = r"C:/Picarro/G2000/InstrConfig/Integration/1DInterferenceHR-CH4/%s_1D-HR_CorrectedFits_%s.ini" %(analyzerType, time.strftime("%Y%m%d_%H%M%S"))
        corrConfig = ConfigObj(correctFitFile)
        #Need to create an installer with the right modes
        #Note: There is only 1 option for this test, which is "Air" background
        if gasType == 3.0:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/FitterConfig.ini"
        config = ConfigObj(configPath)
        oldFitValues = {"Peak30_offset": "%s" %(config["Peak30_offset"]), "Peak30_methane_linear": "%s" %(config["Peak30_methane_linear"]),
                        "Peak87_offset": "%s" %(config["Peak87_offset"]), "Peak87_methane": "%s" %(config["Peak87_methane"])}
        corrConfig["Old Fit Values"] = oldFitValues
        corrConfig.write()
        #Write New Values to Summary Coefficient Test File
        newFitValues = {"Peak30_offset": "%s" %(str(-fitH2O[1])), "Peak30_methane_linear": "%s "%(str(-fitH2O[0])),
                        "Peak87_offset": "%s" %(str(-fitCO2[1])), "Peak87_methane": "%s "%(str(-fitCO2[0]))}
        corrConfig["New Fit Values"] = newFitValues
        corrConfig.write()
        config["Peak30_offset"] = str(-fitH2O[1])
        config["Peak30_methane_linear"] = str(-fitH2O[0])
        config["Peak87_offset"] = str(-fitCO2[1])
        config["Peak87_methane"] = str(-fitCO2[0])
        config.write()
NEXT = "StateRestart"
"""

[StateRestart]
action = """
class exeRestart():
    def __init__(self, exeName, retryCountLimit):
        self.analyzerSoftwareEXE = exeName
        self.launchStatus = False
        self.programList = []
        self.retryCountLimit = retryCountLimit
        self.retryCount = 0
        self.restartAnalyzerSoftware()

    def restartAnalyzerSoftware(self):
        subprocess.Popen("C:\Picarro\G2000\Hostexe\SupervisorLauncher.exe -a -c C:\Picarro\G2000\AppConfig\Config\Utilities\SupervisorLauncher.ini", shell = False)
        time.sleep(30.0)
        self.launchStatus = True
        self.EnumProcesses()

    def EnumProcesses(self):
        arr = c_ulong * 256
        lpidProcess = arr()
        cb = sizeof(lpidProcess)
        cbNeeded = c_ulong()
        hModule = c_ulong()
        count = c_ulong()
        modname = c_buffer(30)
        PROCESS_QUERY_INFORMATION = 0x0400
        PROCESS_VM_READ = 0x0010
        
        #Call Enumprocesses to get hold of process id's
        psapi.EnumProcesses(byref(lpidProcess), cb, byref(cbNeeded))
        #Number of processes returned
        nReturned = cbNeeded.value/sizeof(c_ulong())
        pidProcess = [i for i in lpidProcess][:nReturned]

        for pid in pidProcess:
            #Get handle to the process based on PID
            hProcess = kernel.OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, False, pid)
            if hProcess:
                psapi.EnumProcessModules(hProcess, byref(hModule), sizeof(hModule), byref(count))
                psapi.GetModuleBaseNameA(hProcess, hModule.value, modname, sizeof(modname))
                self.programList.append("".join([ i for i in modname if i != "\x00"]))
                #Clean up
                for i in range(modname._length_):
                    modname[i]="\x00"
                kernel.CloseHandle(hProcess)
        self.checkList()

    def checkList(self):
        if self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) in self.programList:
            logFunc("Relaunch was successful!\n")
            return True
        elif self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) not in self.programList:
            logFunc("Relaunch not successful. Will try again\n")
            self.launchStatus = False
            self.retryCount += 1
            if self.retryCount != self.retryCountLimit:
                self.restartAnalyzerSoftware()
            else:
                logFunc("All relaunch attempts were not successful-Please advise\n")
                return False
#Instantiate exeRestart
try:
    start = exeRestart("supervisor.exe", 2)
    if start.checkList() == True:
        sleep(60.0)
        testType = "Validation"
        restartOccurred = True
        #Clear data from dictionaries
        for x in paramMeas:
            aveParamMeasArray[x][:] = []
            paramMeasArray[x][:] = []
        NEXT = "StateDataArrayConfig"
    else:
        attemptCount += 1
        if attemptCount < 2:
            NEXT = "StateRestart"
        else:
            logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
            NEXT = "StateDone"
except Exception, err:
    logFunc("%r"%(err))
    attemptCount += 1
    if attemptCount < 2:
        NEXT = "StateRestart"
    else:
        logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
        NEXT = "StateDone"
"""

[StateDone]
action="""
#Set indicators to 0 when done
setTagalongData("ClientState", 0.0)
setTagalongData("TestStep", 0.0)
setTagalongData("ReadyState", 0.0)
setTagalongData("SeqIdx", 0.0)
GUI.popInfo("1D HR CH4 Interference Test is now complete\n", "F(C&D)DS - Client1DInterference-CH4(HR)")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""