#BatchMode for iCH4 High Precision (2011-12-16)

[UserEditableParams]
# User inputs
num_disp_params = 0
0 = "standardDelta", "Standard Delta Value", "-40.0"
1 = "standard12CH4", "Standard 12CH4 Value", "0"
2 = "numSamplesPerStandard", "Number of Sample Repeats between Standards (0=No Standard Mode)", "1"

[Mode]
inject_mode=automatic

[Files]
output = "C:\IsotopicData\"

[Output]
sampleNum           = "Run Num"                 , %7s
sampleBagNum        = "Sample Bag"              , %10d
corrDelta           = "Corrected Delta"         , %15.3f
corr12CH4           = "Corrected 12CH4"         , %15.3f
meanDeltaSample     = "Sample HP Delta Mean"       , %17.3f
mean12CH4Sample     = "Sample HP 12CH4 Mean"       , %17.3f
mean13CH4Sample     = "Sample 13CH4 Mean"       , %17.3f
meanCO2Sample       = "Sample CO2 Mean"         , %16.3f
meanH2OSample       = "Sample H2O Mean"         , %16.3f
stdDeltaSample      = "Sample HP Delta Std"        , %16.3f
std12CH4Sample      = "Sample HP 12CH4 Std"        , %16.3f
std13CH4Sample      = "Sample 13CH4 Std"        , %16.3f
meanDeltaStandard   = "Standard HP Delta Mean"     , %19.3f
mean12CH4Standard   = "Standard HP 12CH4 Mean"     , %19.3f
mean13CH4Standard   = "Standard 13CH4 Mean"     , %19.3f
meanCO2Standard     = "Standard CO2 Mean"       , %19.3f
meanH2OStandard     = "Standard H2O Mean"       , %16.3f
stdDeltaStandard    = "Standard HP Delta Std"      , %18.3f
std12CH4Standard    = "Standard HP 12CH4 Std"      , %18.3f
actualDeltaStandard = "Actual Standard Delta"   , %21.3f
actual12CH4Standard = "Actual Standard 12CH4"   , %21.3f
valPos              = "Valve Position"          , %14s
resultTime          = "Date/Time"               , %15s
meanTime            = "Timestamp"               , %14.5f

[PostProcessing]
type = deltaCorr
output = C:\IsotopicData\Corrected\

[Setup]
initial = StateInitConfig
final = StateDone
error = StateError

[StateInitConfig]
action = """
numSamplesPerStandard = int(editParamDict["numSamplesPerStandard"])
standardDelta = float(editParamDict["standardDelta"])
standard12CH4 = float(editParamDict["standard12CH4"])
#standardDeltaOffset = 0.0
if numSamplesPerStandard > 0:
    runStandard = True
else:
    runStandard = False
numSamplesCompleted = 0
firstStandardCompleted = False

stepTimeA = 5
# Time delay in the end of state A after reaching flush pressure
stepTimeB = 10
# Time delay in the end of state B2 after reaching evacuate pressure (or the lowest cavity pressure)
sampleInjectTime = 20
# Time to inject sample (or standard) into the sample loop
expandSampleTime = 220
# Time to expand sample into cavity
stabilizeTime = 180
# Time to stabilize the sample inside the cavity before taking measurement
measurementTime = 360
# Time to run measurement
timeFormat = "%y/%m/%d %H:%M:%S"
# Start Count of repetituous cavity flushes
flushCount = 0

# Define pressure setpoints
flushPressure = 250
regularPressure = 140
evacuatePressure = 1
# Lowest pressure = 10.33

setMeasBuffer("analyze_FBDS", ["HP_12CH4", "13CH4", "CO2", "H2O", "HP_Delta_iCH4_Raw"], 50)
clearMeasBuffer()

GUI.setStatusText("")
skipPressureCheck()
setValveMask(0)
NEXT = "StateStart"
"""

[StateStart]
action = """
disableInstMgrAutoRestartFlow()
# Set valve configuration for initial start-up (only v4 open)
setMaxCavityPressureRate(10)
setInletValveMaxChange(500)
setInletValveGains(80, 1)
setValveMinDac("outlet", 0)
setValveMinDac("inlet", 0)
# Get inlet and outlet max DAC
inletValveMaxDac = getValveMinMaxDac("inlet")["max"]
outletValveMaxDac = getValveMinMaxDac("outlet")["max"]
t = 0
sampleBagHooked = False
sampleValveOpen = False
setValveMask(8)
NEXT = "StateSampleOrStandard"
"""

[StateSampleOrStandard]
action = """
# Determine if sample or standard should be taken in the current run.
# If sample should be taken, ask user to hook up the sample bag.
if runStandard:
    if not firstStandardCompleted:
        InjectValveMask = 22
        firstStandardCompleted = True
    else:
        if numSamplesCompleted < numSamplesPerStandard:
            InjectValveMask = 6
            numSamplesCompleted += 1
        else:
            InjectValveMask = 22
            numSamplesCompleted = 0
else:
    InjectValveMask = 6
if InjectValveMask == 6:
    logFunc("PLEASE HOOK UP SAMPLE BAG WITH VALVE CLOSED AND SELECT \"RESUME\" UNDER \"CONTROL\" TO CONTINUE...\n")
    pauseStartTime = time.time()
    pause()
    NEXT = "StatePauseOrGo"
else:
    sampleBagHooked = True
    logFunc("\nState A starts...\n")
    NEXT = "StateA"
"""

[StatePauseOrGo]
action="""
# Resume the coordinator operation after user follows the instruction and clicks "resume"
if runningFlag:
    currTime = time.time()
    if not sampleBagHooked:
        sampleBagHooked = True
        logFunc("\nState A starts...\n")
        NEXT = "StateA"
    elif not sampleValveOpen:
        sampleValveOpen = True
        logFunc("\nState D starts...\n")
        NEXT = "StateD"
else:
    sleep(1)
    pauseDur = time.time() - pauseStartTime
    if pauseDur > 43200:
        NEXT = "StateDone"
    else:
        NEXT = "StatePauseOrGo"
"""

[StateA]
action = """
# Flow N2 through cavity & fill sample loop with N2
setValveMask(1)
currOutletDac = getValveDacValues()["outletDacValue"]
currInletDac = getValveDacValues()["inletDacValue"]
if currInletDac == inletValveMaxDac:
    startInletValveControl(flushPressure, currOutletDac - 1000)
elif currInletDac == 0:
    if (currOutletDac < 25000) or (currOutletDac > outletValveMaxDac - 1000):
        startInletValveControl(flushPressure, 25000)
    else:
        startInletValveControl(flushPressure, currOutletDac + 1000)
else:
    startInletValveControl(flushPressure)
logFunc("Check pressure...\n")
if waitPressureStabilize(setpoint=flushPressure, tolerance=0.1, timeout=6, checkInterval=3, lockCount=1):
    logFunc("Wait for %.1f seconds\n" % stepTimeA)
    sleep(stepTimeA)
    logFunc("\nState B1 starts...\n")
    # Energize valve 2, 3, and 4
    setValveMask(14)
    # For unattended operation, do not open V2 (mask 12 instead of 14)
   # setValveMask(12)
    # Limit the pressure change rate
    setMaxCavityPressureRate(10)
    setInletValveMaxChange(1000)
    NEXT = "StateB1"
else:
    sleep(2)
    NEXT = "StateA"
"""

[StateB1]
action = """
# Pump out cavity,  gas sample loop, and sample inlet tube, until inlet valve fully closed
currInletDac = getValveDacValues()["inletDacValue"]
currOutletDac = getValveDacValues()["outletDacValue"]
if currInletDac == 0:
    logFunc("\nState B2 starts...\n")
    NEXT = "StateB2"
else:
    startInletValveControl(evacuatePressure, currOutletDac)
    sleep(10)
    NEXT = "StateB1"
"""

[StateB2]
action = """
# Keep pumping out until outlet valve fully open
# Energize valve 3, and 4
setValveMask(12)
# Manual valve control
setValveControlMode(3)
# Get currOutletDac from StateB1
outletIncSteps = arange(currOutletDac, outletValveMaxDac, 5000.0)
outletIncSteps = concatenate((outletIncSteps, array([outletValveMaxDac-500])))
for outletDac in outletIncSteps:
    setValveDacValue("outlet", outletDac)
    sleep(5)
logFunc("Wait for %.1f seconds\n" % stepTimeB)
sleep(stepTimeB)
logFunc("\nState C starts...\n")
NEXT = "StateC"
"""

[StateC]
action = """
# Ask user to open sample bag valve if running sample measurement
if InjectValveMask == 6:
    logFunc("PLEASE OPEN SAMPLE BAG VALVE AND SELECT \"RESUME\" UNDER \"CONTROL\" TO CONTINUE...\n")
    pauseStartTime = time.time()
    pause()
    NEXT = "StatePauseOrGo"
else:
    sampleValveOpen = True
    logFunc("\nState D starts...\n")
    NEXT = "StateD"
"""

[StateD]
action = """
# Inject sample or standard into gas loop
setValveMask(InjectValveMask)
if InjectValveMask == 6:
    logFunc("\nInjecting sample into sample loop\n")
else:
    logFunc("\nInjecting standard into sample loop\n")
sleep(sampleInjectTime)
logFunc("\nState E starts...\n")
NEXT = "StateE"
"""

[StateE]
action = """
# Expand sample or standard from gas loop into cavity, until pressure reaches 140 torr
# Ask user to close sample bag valve if running sample measurement
# Close I/O valves
setValveControlMode(3)
setValveDacValue("inlet", 0)
setValveDacValue("outlet", 0)
setValveMask(4)
setValveDacValue("inlet", 15500)
sleep(1.0)
setValveMinDac("inlet", 15000)
setMaxCavityPressureRate(20)
setInletValveMaxChange(500)
startInletValveControl(regularPressure-0.2, 0)
pressure = getCavityPressure()
startTime = time.time()
logFunc("Expanding sample into cavity...\n")
if InjectValveMask == 6:
    logFunc("\nPLEASE CLOSE SAMPLE BAG VALVE.\n")
pressureRateAdjusted = False
while (pressure < regularPressure-0.3) and ((time.time()-startTime) < expandSampleTime):
    if (pressure > regularPressure-60) and not pressureRateAdjusted:
        logFunc("\n")
        setMaxCavityPressureRate(0.1)
        setInletValveMaxChange(1000)
        pressureRateAdjusted = True
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += .25
    logFunc(".")
    sleep(0.25)
    pressure = getCavityPressure()
t = 0
logFunc("\nPressure locked at %.2f\n" % pressure)

#Flush cavity with standard 2 times before measurement
if InjectValveMask == 22:
    setValveControlMode(0)
    setValveMask(0)
    flushCount +=1
    if flushCount < 3:
        logFunc("Repeat Cavity flush...\n")
        sleep(180.0)
        #NEXT = "StateA"
        NEXT = "StateB1"
    else:
        flushCount = 0
        logFunc("\nState F starts...\n")
        NEXT = "StateF"
else:
    logFunc("\nState F starts...\n")
    NEXT = "StateF"
"""

[StateF]
action = """
# Stabilize the gas inside cavity until measurement starts
# Close I/O valves
setValveControlMode(0)
setValveMask(0)

startTime = time.time()
runTime = time.time()-startTime
printInterval = stabilizeTime/6.0
logFunc("%.1f seconds before measurement...\n" % stabilizeTime)
while runTime < stabilizeTime:
    sleep(printInterval)
    runTime = time.time()-startTime
    if stabilizeTime > runTime:
        logFunc("%.1f seconds before measurement...\n" % (stabilizeTime - runTime))

timeMark = time.time()
stopMeasTime = timeMark + measurementTime
timeCount = 0
concBuffer = {"12CH4":[], "13CH4":[], "CO2":[], "H2O":[], "HP_Delta_iCH4_Raw":[], "Time":[]}
clearMeasBuffer()
logFunc("\nRunning measurement...\n")
NEXT = "StateMeasurement"
"""

[StateMeasurement]
action = """
# Take measurement during measurement period
currTime = time.time()
if currTime - timeMark >= 30:
    timeCount += 1
    logFunc("Remaining time of measurement = %.1f seconds...\n" % (measurementTime-timeCount*30.0) )
    timeMark = currTime

if currTime < stopMeasTime:
    results = measGetBufferFirst()
    if not results:
        sleep(1.0)
        NEXT="StateMeasurement"
    else:
        concBuffer["HP_Delta_iCH4_Raw"].append(results["HP_Delta_iCH4_Raw"])
        concBuffer["12CH4"].append(results["HP_12CH4"])
        concBuffer["13CH4"].append(results["13CH4"])
        concBuffer["CO2"].append(results["CO2"])
        concBuffer["H2O"].append(results["H2O"])
        concBuffer["Time"].append(results["measTime"])
        NEXT="StateMeasurement"
else:
    logFunc("\nFinish measurement...\n")
    NEXT = "StatePostMeasurement"
"""

[StatePostMeasurement]
action = """
results = {}
# Report measurement on the coordinator GUI and log file. Correct the sample delta value. Gradually open the outlet valve until fully open.
meanHPCH4DeltaRaw = mean(concBuffer["HP_Delta_iCH4_Raw"])
stdHPCH4DeltaRaw = std(concBuffer["HP_Delta_iCH4_Raw"])
mean12CH4 = mean(concBuffer["12CH4"])
std12CH4 = std(concBuffer["12CH4"])
mean13CH4 = mean(concBuffer["13CH4"])
std13CH4 = std(concBuffer["13CH4"])
meanCO2 = mean(concBuffer["CO2"])
meanH2O = mean(concBuffer["H2O"])
meanTime = mean(concBuffer["Time"])

if InjectValveMask == 6:
    results["meanDeltaSample"] = meanHPCH4DeltaRaw
    results["mean12CH4Sample"] = mean12CH4
    results["mean13CH4Sample"] = mean13CH4
    results["meanCO2Sample"]   = meanCO2
    results["meanH2OSample"]   = meanH2O
    results["stdDeltaSample"] = stdHPCH4DeltaRaw
    results["std12CH4Sample"] = std12CH4
    results["std13CH4Sample"] = std13CH4
    results["sampleBagNum"] = 1
else:
    results["meanDeltaStandard"] = meanHPCH4DeltaRaw
    results["mean12CH4Standard"] = mean12CH4
    results["mean13CH4Standard"] = mean13CH4
    results["meanCO2Standard"]   = meanCO2
    results["meanH2OStandard"]   = meanH2O
    results["stdDeltaStandard"] = stdHPCH4DeltaRaw
    results["std12CH4Standard"] = std12CH4
    results["std13CH4Standard"] = std13CH4
    results["actualDeltaStandard"] = standardDelta
    results["actual12CH4Standard"] = standard12CH4

results["resultTime"] = strftime(timeFormat, localtime())
results["meanTime"] = meanTime
fileDataFunc(results)

setValveMinDac("inlet", 0)
setMaxCavityPressureRate(10)
setInletValveMaxChange(500)
currOutletDac = getValveDacValues()["outletDacValue"]
# Manual valve control
setValveControlMode(3)
outletIncSteps = arange(currOutletDac, outletValveMaxDac, 5000.0)
outletIncSteps = concatenate((outletIncSteps, array([outletValveMaxDac-500])))
for outletDac in outletIncSteps:
    setValveDacValue("outlet", outletDac)
    sleep(5)

logFunc("\nStart from the beginning...\n")
NEXT = "StateStart"
"""

[StateDone]
action="""
setValveMask(0)
setMaxCavityPressureRate(5)
setInletValveMaxChange(500)
sleep(10)
startOutletValveControl(regularPressure, 28000)
sleep(10)
startOutletValveControl(regularPressure, 33000)
sleep(10)
startOutletValveControl(regularPressure, 38000)
sleep(10)
startOutletValveControl(regularPressure, 43000)
sleep(10)
startOutletValveControl(regularPressure, 50000)
resumePressureCheck()
enableInstMgrAutoRestartFlow()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
