[Mode]
inject_mode=automatic

[Files]
output = "C:\UserData\Coordinator\PulseDetection"

[UserEditableParams]
num_disp_params = 0
0 = "timeWindow", "Time window (second)", "20.0"
1 = "thresHigh", "High threshold (ppm)", "5.0"
2 = "thresLow", "Low threshold (ppm)", "3.0"
3 = "replayDelay", "Time delay before replaying data (second)", "3.0"
4 = "replayTime", "Time to replay data (second)", "240.0"

[Output]
pulseNum                = "Pulse Id"            , %10s
measTime                = "Time Stamp"          , %15.3f
12CH4_high_precision    = "12CH4"               , %20.3f
Delta_Raw_iCH4          = "Delta iCH4"          , %20.3f
H2O                     = "H2O"                 , %20.3f
CO2                     = "CO2"                 , %20.3f
GPS_ABS_LAT             = "GPS Latitude"        , %20.4f
GPS_ABS_LONG            = "GPS Longitude"       , %20.4f
GPS_FIT                 = "GPS Quality"         , %10s

[Setup]
initial = StateInit
final = StateDone
error = StateError

[StateInit]
action = """
from collections import deque
timeWindow = float(editParamDict["timeWindow"])
thresHigh = float(editParamDict["thresHigh"])
thresLow = float(editParamDict["thresLow"])
replayDelay = float(editParamDict["replayDelay"])
replayTime = float(editParamDict["replayTime"])
concNameList = ["12CH4_high_precision", "Delta_Raw_iCH4", "H2O", "CO2", "GPS_ABS_LAT", "GPS_ABS_LONG", "GPS_FIT"]
setMeasBuffer("analyze_FBDS", concNameList, 50)
pulseNum = 0
GUI.setStatusText("")
NEXT = "StateStart"
"""

[StateStart]
action = """
setValveMask(2)
clearMeasBuffer()
# Each element is a (time, value) tuple
CH4_12Buff = deque()
logFunc("Searching pulses...\n")
NEXT = "StateDetectPulse"
"""

[StateDetectPulse]
action = """
results = measGetBufferFirst()
if not results:
    sleep(0.5)
    NEXT="StateDetectPulse"
else:
    newData = (results["measTime"], results["12CH4_high_precision"])
    CH4_12Buff.append(newData)
    # Maintain the size of buffer in terms of time
    while CH4_12Buff[0][0] < (newData[0] - timeWindow):
        CH4_12Buff.popleft()
        if len(CH4_12Buff) == 1:
            break

    # Analyzer the data in the buffer
    highTimestamps = [d[0] for d in CH4_12Buff if d[1] > thresHigh]
    lowTimestamps = [d[0] for d in CH4_12Buff if d[1] < thresLow]
    highTimestamps.sort()
    lowTimestamps.sort()
    pulseFound = False
    if len(lowTimestamps) > 0:
        for t in highTimestamps:
            if t > lowTimestamps[0] and t < lowTimestamps[-1]:
                pulseFound = True
                break

    if pulseFound:
        logFunc("A new pulse found! Wait for %f seconds to replay data.\n" % replayDelay)
        sleep(replayDelay)
        setValveMask(1)
        currTime = time.time()
        stopMeasTime = currTime + replayTime
        timeMark = currTime
        timeCount = 0
        pulseNum += 1
        clearMeasBuffer()
        logFunc("Start measuring the replayed data...\n")
        NEXT="StateMeasurement"
    else:
        NEXT="StateDetectPulse"
"""

[StateMeasurement]
action = """
currTime = time.time()
if currTime - timeMark >= 30:
    timeCount += 1
    logFunc("Remaining time of measurement = %.1f seconds...\n" % (replayTime-timeCount*30.0) )
    timeMark = currTime

if currTime < stopMeasTime:
    results = measGetBufferFirst()
    if not results:
        sleep(0.5)
        NEXT="StateMeasurement"
    else:
        results["pulseNum"] = pulseNum
        fileDataFunc(results)
        NEXT="StateMeasurement"
else:
    logFunc("Measurement completed...\n")
    NEXT="StateStart"
"""


[StateDone]
action="""
setValveMask(2)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
