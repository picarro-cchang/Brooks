[Mode]
inject_mode=automatic

[Files]
output = "C:\Picarro\IsotopicData\IsotopicData"

[UserEditableParams]
num_disp_params = 1
0 = "numSamples", "Total number of samples", "50"

[Output]
sampleNum           = "Sample Id"           , %10s
description         = "Description"         , %40s
reportDate          = "Date"                , %15s
reportTime          = "Time"                , %10s
12CO2_mean          = "12CO2 Mean (ppmv)"   , %20.3f
Delta_Raw_mean      = "Delta Mean (permil)" , %22.3f
status              = "Status"              , %10s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
def getRotPos():
    global RotValve
    try:
        RotValve.sendString("CP")
        time.sleep(2.0)
        cp = RotValve.getLine()
        pos = cp.split("= ")[-1]
    except:
        pos = "0"
    return pos
    
n2FillTime = 240.0
n2FillTime2 = 120.0
bagEvacTime = 60.0
postMeasTime = 120.0
endPauseTime = 3600.0

try:
    numSamples = int(editParamDict["numSamples"])+1
except:
    logFunc("!!ERROR: INVALID ENTRY OF NUMBER OF SAMPLES!!\n")
    raise Exception, "Invalid entry of number of samples"
if numSamples <= 1:
    logFunc("!!ERROR: INVALID ENTRY OF NUMBER OF SAMPLES!!\n")
    raise Exception, "Invalid entry of number of samples"
    
errorCodeMismatch = 64
errorCodeFailSend = 128
errorCodeFailGet = 256
checkPosTimeout = 9
checkPosInterval = 3
portCount = 1
sampleNum = 1
status = ""
lastSample = False
valveMaskSetTo0 = False
# Initialize serial interface for rotary valve
RotValve = SerIntrf(1)
RotValve.open()
# Define pulse analyzer
validTimeAfterTrigger = 108
validTimeBeforeEnd = 86

concNameList = ["12CO2", "Delta_Raw"]
                
pulseAnalyzerSet(source = "analyze_iCO2", concNameList = concNameList,
                 targetConc = "12CO2", thres1Pair = [400, 12000], thres2Pair = [350, 13000],
                 triggerType = "in", waitTime = 10.0,
                 validTimeAfterTrigger = validTimeAfterTrigger, validTimeBeforeEnd = validTimeBeforeEnd,
                 timeout = 172800, bufSize = 5000, numPointsToTrigger = 1, numPointsToRelease = 1, 
                 armCond = [-100, 100])
pulseAnalyzerStartRunning()
GUI.setStatusText("")

setValveMask(0)
#pauseStartTime = time.time()
#pause()
#logFunc("PLEASE MAKE SURE LIAISON BOX IS CONNECTED AND ON, THEN SELECT \"RESUME\" UNDER \"CONTROL\" MENU TO START THE PROCESS.\n")
GUI.popPause("Please make sure liaison box is CONNECTED and ON\n", "LIAISON BOX CONFIRMATION")
#NEXT = "StateWaitToStart"
NEXT = "StateBagFlush"
"""

[StateWaitToStart]
action = """
timeout = 60.0
if runningFlag:
    NEXT = "StateBagFlush"
    #NEXT = "StateFlush"
else:
    sleep(1.0)
    pauseDur = time.time() - pauseStartTime
    (d,r) = divmod(int(pauseDur),60)
    if r == 0:
        logFunc("Paused for %d minutes, please select \"Resume\" under \"Control\" menu to start the process.\n" % d)
    if pauseDur > timeout:
        logFunc("Time out after %.2f minutes. Process is being terminated with bag flush.\n" % (timeout/60.0))
        NEXT = "StateDone"
    else:
        NEXT = "StateWaitToStart"
"""

[StateBagFlush]
action = """
logFunc("Run bag flush...\n")
for pos in ["1", "2", "3", "1"]:
    try:
        if getRotPos() != pos:
            RotValve.sendString("GO%s" % pos)
            setRotValveMask(int(pos))
        sleep(15.0)
        RotValve.sendString("CP")
        cp = RotValve.getLine()
        logFunc(cp+"\n")
    except Exception, err:
        logFunc(err)
        #logFunc("!!ERROR: LIAISON BOX NOT ACCESSIBLE. MAKE SURE LIAISON BOX IS CONNECTED AND ON!!\n")
        GUI.popWarning("LIAISON BOX NOT ACCESSIBLE. MAKE SURE LIAISON BOX IS CONNECTED AND ON!!\n", "ERROR")
        raise Exception, "Liaison box not accessible"
NEXT = "StateFlush"
"""

[StateFlush]
action = """
port = str(portCount)
NEXT = "StateValCtrl"
"""

[StateValCtrl]
action = """
logFunc("\nState %s flush cycle 1 starts...\n" % (port,))
logFunc("Rotary valve: Go to position: %2s\n" % port)
currPos = getRotPos()
if currPos != port:
    try:
        RotValve.sendString("GO%s" % port)
        setRotValveMask(int(port))
    except:
        logFunc("Rotary valve: Failed to send valve position command via serial port\n")
        setRotValveMask(errorCodeFailSend)

sleep(checkPosInterval)
checkPosTime = checkPosInterval
matchPos = False
getPos = True
while checkPosTime <= checkPosTimeout:
    try:
        RotValve.sendString("CP")
        cp = RotValve.getLine()
        if cp.split("= ")[-1] == port:
            logFunc("Rotary valve: %s - matched\n" % cp)
            matchPos = True
            break
        else:
            logFunc("Rotary valve: %s - not matched (try again)\n" % cp)
            checkPosTime += checkPosInterval
            if checkPosTime <= checkPosTimeout:
                sleep(checkPosInterval)
            else:
                break
    except:
        checkPosTime += checkPosInterval
        if checkPosTime <= checkPosTimeout:
            sleep(checkPosInterval)
        else:
            getPos = False
            break

if not getPos:
    logFunc("Rotary valve: Failed to confirm position from serial port\n")
    setRotValveMask(errorCodeFailGet)
elif not matchPos:
    logFunc("Rotary valve: Failed to go to desired position\n")
    setRotValveMask(errorCodeMismatch)

if not (getPos and matchPos):
    logFunc("Unable to control rotary valve correctly!\n")
    NEXT = "StateDone"
else:
    if lastSample:
        setValveMask(12)
    else:
        setValveMask(28)
    logFunc("Collecting sample for %.1f minutes...\n" % (n2FillTime/60.0))
    sleep(n2FillTime)
    setValveMask(0)
    sleep(60.0)
    NEXT = "StateFlush2"
"""

[StateFlush2]
action = """
logFunc("Run bag flush cycle 2...\n")
if lastSample:
    setValveMask(12)
else:
    setValveMask(8)
sleep(n2FillTime2)
setValveMask(0)
sleep(60.0)
currTime = time.time()
stopMeasTime = currTime + bagEvacTime
logFunc("State %s measurement starts...\n" % port)
timeMark = time.time()
timeCount = 0
NEXT = "StateMeasurement"
"""

[StateMeasurement]
action = """
currTime = time.time()
if currTime - timeMark >= 30:
    timeCount += 1
    logFunc("Remaining time of measurement = %.1f seconds...\n" % (bagEvacTime-timeCount*30.0) )
    timeMark = currTime
    
if currTime < stopMeasTime:
    sleep(1.0)
    NEXT="StateMeasurement"
else:
    setValveMask(2)
    currTime = time.time()
    stopPostMeasTime = currTime + postMeasTime
    logFunc("State %s post-measurement starts...\n" % port)
    timeMark = currTime
    timeCount = 0
    NEXT = "StatePostMeasurement"
"""

[StatePostMeasurement]
action = """
currTime = time.time()
if currTime - timeMark >= 30:
    timeCount += 1
    logFunc("Remaining time of post-measurement = %.1f seconds...\n" % (postMeasTime-timeCount*30.0) )
    timeMark = currTime
    
if currTime < stopPostMeasTime:
    if not pulseAnalyzerGetDataReady():
        sleep(1.0)
        NEXT="StatePostMeasurement"
    else:
        logFunc("Pulse analysis data is ready\n")
        try:
            (startTime, endTime) = pulseAnalyzerGetPulseStartEndTime()
            setLineMarkerColor("red", startTime)
            setLineMarkerColor(None, endTime)
        except:
            pass
        results = pulseAnalyzerGetStatistics()
        if sampleNum > 1:
            results["sampleNum"] = sampleNum-1
            results["reportDate"] = strftime("%Y/%m/%d",localtime())
            results["reportTime"] = strftime("%H:%M:%S",localtime())
            c12Slope = results["12CO2_slope"]
            if c12Slope > -0.01 and c12Slope < 0.9:
                status = "Good"
            else:
                status = "Leak"
            results["status"] = status
            fileDataFunc(results)
            logFunc("\nFlushing pulse analyzer results buffer\n")
            pulseAnalyzerReset()
        else:
            pass
        if port == "1":
            portCount = 6
        else:
            portCount -= 1
        pauseStartTime = time.time()
        NEXT = "StatePauseOrGo"
else:
    if port == "1":
        portCount = 6
    else:
        portCount -= 1
    pauseStartTime = time.time()
    NEXT = "StatePauseOrGo"
"""

[StatePauseOrGo]
action="""
if runningFlag:
    valveMaskSetTo0 = False
    if sampleNum < numSamples:
        sampleNum += 1
        if sampleNum == numSamples:
            lastSample = True
        NEXT = "StateFlush"
    else:
        logFunc("Pause...\n")
        NEXT = "StateExtendedPause"
else:
    if not valveMaskSetTo0:
        setValveMask(0)
        valveMaskSetTo0 = True
        
    sleep(1.0)
    pauseDur = time.time() - pauseStartTime
    (d,r) = divmod(int(pauseDur),60)
    if r == 0:
        logFunc("Paused for %d minutes...\n" % d)
    if pauseDur > endPauseTime:
        NEXT = "StateDone"
    else:
        NEXT = "StatePauseOrGo"
"""

[StateExtendedPause]
action = """
sampleNum = 0
lastSample = False
pause()
pauseStartTime = time.time()
NEXT = "StatePauseOrGo"
"""

[StateDone]
action="""
setValveMask(0)
logFunc("Run bag flush...\n")
for pos in ["1", "2", "3", "1"]:
    if getRotPos() != pos:
        RotValve.sendString("GO%s" % pos)
        setRotValveMask(int(pos))
        sleep(15.0)
    RotValve.sendString("CP")
    cp = RotValve.getLine()
    logFunc(cp+"\n")
RotValve.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""