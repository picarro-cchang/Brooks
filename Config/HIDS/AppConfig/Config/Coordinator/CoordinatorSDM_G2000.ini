# 2010-02-19 alex  Added hand-shaking in sending pump commands
# 2010-03-11 alex  Added rotary valve control
# 2010-06-29 alex  Modified for G2000
[Mode]
inject_mode = auto

[Files]
output = C:/Picarro/SyringePumpData/WaterVapor
#max_num_lines = ""

[SerialPorts]
SDMPump = COM1
RotValve = COM2

[UserEditableParams]
num_disp_params = 2
0 = CalStdPump1, Calibration Standard for Pump1, SYRINGE PUMP CAL 1
1 = CalStdPump2, Calibration Standard for Pump2, SYRINGE PUMP CAL 2

[Output]
lineNum = Line, %8d
reportDate = Date, %10s
reportTime = Time, %10s
measTime = Timestamp, %14.5f
H2O = H2O, %14.3f
Delta_18_16 = d(18_16), %14.3f
Delta_D_H = d(D_H), %14.3f
DasTemp = DAS Temp, %7.2f
injectSpeed = Injection Speed, %15s
rotValMask = Rot Valve Mask, %15s
solValMask = Sol Valve Mask, %15d
calStd = Calibration Standard, %20s
source = Source, %15s
dataReset = Data Reset?, %8s

#line = Line, %6s
#analysis = Analysis, %10s
#timeCode = Time Code, %22s
#port = Port, %15s
#injNum = Inj Nr, %8d
#Delta_18_16_mean = d(18_16)Mean, %14.3f
#Delta_D_H_mean = d(D_H)Mean, %14.3f
#H2O_mean = H2O_Mean, %14.0f
#ignore = Ignore, %8d
#Good = Good, %5d
#Identifier 1 = Identifier 1, %40s
#Identifier 2 = Identifier 2, %40s
#gasConfig = Gas Configuration, %20s
#timestamp_mean = Timestamp Mean, %14.2f
#Delta_18_16_std = d(18_16)_SD, %14.3f
#Delta_D_H_std = d(D_H)_SD, %14.3f
#H2O_std = H2O_SD, %14.3f
#Delta_18_16_slope = d(18_16)_Sl, %14.3f
#Delta_D_H_slope = d(D_H)_Sl, %14.3f
#H2O_slope = H2O_Sl, %14.3f
#baseline_shift_mean = baseline_shift, %14.3f
#slope_shift_mean = slope_shift, %14.3f
#residuals_mean = residuals, %14.3f
#baseline_curvature_mean = baseline_curvature, %14.3f
#interval_mean = interval, %14.3f
#CH4_mean = ch4_ppm, %14.3f
#h16od_adjust_mean = h16od_adjust, %14.4f
#h16od_shift_mean = h16od_shift, %14.4f
#n2_flag_mean = n2_flag, %5d
#dasTemp = DAS Temp, %14.3f
#trayName = Tray, %10s
#sampleNum = Sample, %8s
#jobNum = Job, %8d
#methodName = Method, %10s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = '''
#concNameList = ["Delta_18_16", "Delta_D_H", "H2O", "baseline_shift", "slope_shift", "CH4", "residuals", "baseline_curvature", "h16od_adjust", "h16od_shift", "interval", "n2_flag"]

def waitForComplete(ser, pumpAddr, timeout=None):
    startTime = time.time()
    cont = False
    while not cont:
        if timeout != None:
            if time.time()-startTime > timeout:
                logFunc("Time out after %.2f seconds - pump %d is still busy." % (timeout, pumpAddr))
                break
        statCommand = "/%dQ\r\n" % pumpAddr
        ser.sendString(statCommand)
        #logFunc("Send status command %s" % statCommand)
        sleep(0.1)
        try:
            status = ser.getLine()
            if "@" not in status:
                logFunc("Pump %d is ready for next command.\n" % pumpAddr)
                cont = True
            else:
                sleep(0.5)
        except:
            logFunc("Pump %d didn't respond to status command.\n" % pumpAddr)
            sleep(0.5)
    return
    
def sendPumpCmd(ser, pumpAddr, command):
    logFunc("Send command %s to Pump %d.\n" % (command, pumpAddr))
    ser.sendString("/%d%s\r\n" % (pumpAddr, command))
    sleep(0.1)
    try:
        ser.getLine()
    except:
        pass

def sendAirPumpCmd(ser, command):
    logFunc("Send command %s to Air Pump.\n" % (command))
    ser.sendString("%s" % (command))
    sleep(0.1)
    try:
        ser.getLine()
    except:
        pass

activeFile = "C:/Picarro/SyringePump/Sequencer/active.seq"
defaultFile = "C:/Picarro/SyringePump/Sequencer/default.seq"
stepDict = {"0": "StatePump1Conc1",
            "1": "StatePump1Conc2",
            "2": "StatePump1Conc3",
            "3": "StatePump2Conc1",
            "4": "StatePump2Conc2",
            "5": "StatePump2Conc3",
            "6": "StateWaterVapor1",
            "7": "StateWaterVapor2"
            }
concDict = {"0": "-CONC1",
            "1": "-CONC2",
            "2": "-CONC3",
            "3": "-CONC1",
            "4": "-CONC2",
            "5": "-CONC3",
            "6": "1",
            "7": "2"
            }
CalStdPump1 = editParamDict["CalStdPump1"]
CalStdPump2 = editParamDict["CalStdPump2"]

# COM1 for pump control (RS-485)
pumpSerIntrf = SerIntrf(portDict["SDMPump"], baudrate=9600, xonxoff=0, timeout=1.0)
pumpSerIntrf.open()

setValveMask(0)
lineCount = 0
seqIdx = 0
pumpNum = 0 # 0 only in initialization. Normally it's 1,2,or -1 (vapor)
try:
    fd = open(activeFile, "r")
    fileContents = fd.readlines()
    fd.close()
except:
    fd = open(defaultFile, "r")
    fileContents = fd.readlines()
    fd.close()
    logFunc("Running default sequence.\n")
seqList = fileContents[:-2]
FlowRate = fileContents[-2].split()
enRot = eval(fileContents[-1].split("=")[1])
DispFlowRate = []
for i in range(6):
    id = "Pump%d Conc%d" % (i/3+1, i%3+1)
    DispFlowRate.append(FlowRate[i])
    logFunc("Flow rate for %s = %s\n" % (id, FlowRate[i]))
    FlowRate[i] = "V." + FlowRate[i].split(".")[1]

# COM2 for rotary valve (if enabled)
rotValve = None
if enRot:
    try:
        rotValve = SerIntrf(portDict["RotValve"], baudrate=9600, xonxoff=0, timeout=1.0)
        rotValve.open()
    except:
        pass

errorCodeFailSend = 128

errorCharList = [chr(i) for i in range(ord('a'),ord('o')+1)+range(ord('A'),ord('O')+1)]
numSeq = len(seqList)

setMeasBuffer("analyze_iH2O7200", ["H2O", "Delta_18_16", "Delta_D_H", "DasTemp"], 50)
clearMeasBuffer()

GUI.setStatusText("")
runExtraPumpSchemeA = False
NEXT = "StateGetNextStep"
'''

[StateGetNextStep]
action = '''
(durMinute, stepIdx, rotValCode) = seqList[seqIdx].split()[:3]
currSeqIdx = seqIdx
seqIdx = (seqIdx+1) % numSeq
if stepIdx == "-1":
    sleep(1)
    NEXT = "StateGetNextStep"
else:
    conc = concDict[stepIdx]
    dur = float(durMinute) * 60.0
    if dur == 0.0:
        sleep(1)
        NEXT = "StateGetNextStep"
    else:
        if enRot and rotValve != None:
            try:
                rotValve.sendString("CP")
                cp = rotValve.getLine()
                currPos = cp.split("= ")[-1]
            except:
                currPos = "0"
            if currPos != rotValCode:
                try:
                    logFunc("Rotary valve: Go to position: %2s\n" % rotValCode)
                    rotValve.sendString("GO%s" % rotValCode)
                    setRotValveMask(rotValCode)
                except:
                    logFunc("Rotary valve: Failed to send valve position command\n")
                    setRotValveMask(errorCodeFailSend)
                
        nextStep = stepDict[stepIdx]
        # Check if next step is from the same pump
        # pumpNum indicates the pump that just finised, pumpNum = -1 for ambient
        if (pumpNum == 1 and stepIdx not in ["0","1","2"]) or (pumpNum == 2 and stepIdx not in ["3","4","5"]):
            sleep(90.0)
            sendAirPumpCmd(pumpSerIntrf, "\RX")
            sleep(1.0)
            emptySyringeToBag = True
        else:
            #emptySyringeToBag = False
            emptySyringeToBag = True
            
        if (stepIdx in ["0","1","2"] and pumpNum != 1) or (stepIdx in ["3","4","5"] and pumpNum != 2):
            runExtraPumpSchemeA = True
        else:
            runExtraPumpSchemeA = False
            
        NEXT = nextStep
'''

[StatePump1Conc1]
action = '''
pumpNum = 1
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 2, "S23IA0R")
    
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 1, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 1, "%s,1R" % FlowRate[0])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[0]
    sendPumpCmd(pumpSerIntrf, 1, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 1, Concentration 1 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump1"
'''

[StatePump1Conc2]
action = '''
pumpNum = 1
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 2, "S23IA0R")
    
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 1, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 1, "%s,1R" % FlowRate[1])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[1]
    sendPumpCmd(pumpSerIntrf, 1, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 1, Concentration 2 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump1"
'''

[StatePump1Conc3]
action = '''
pumpNum = 1
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 2, "S23IA0R")
    
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 1, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 1, "%s,1R" % FlowRate[2])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 1, "ZR")
    waitForComplete(pumpSerIntrf, 1, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[2]
    sendPumpCmd(pumpSerIntrf, 1, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 1, Concentration 3 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump1"
'''

[StateGetMeasurementPump1]
action = '''
if time.time() < stopMeasTime:
    results = measGetBufferFirst()
    if not results:
        sleep(1.0)
        NEXT="StateGetMeasurementPump1"
    else:
        lineCount += 1
        results["reportDate"] = results["date"].split()[0]    
        results["reportTime"] = results["date"].split()[1]
        results["rotValMask"] = rotValCode
        results["solValMask"] = 6
        results["source"] = "Pump1"+conc
        results["calStd"] = CalStdPump1+conc
        results["lineNum"] = lineCount
        results["injectSpeed"] = DispFlowRate[int(stepIdx)]
        results["dataReset"] = str(measIsDataBad())
        fileDataFunc(results)
        NEXT="StateGetMeasurementPump1"
else:
    #pumpSerIntrf.sendString("/1T\r\n")
    sendPumpCmd(pumpSerIntrf, 1, "TR")
    waitForComplete(pumpSerIntrf, 1, 3.0)
    #sleep(2.0)
    #if emptySyringeToBag:
    #    sendPumpCmd(pumpSerIntrf, 1, "S23IA0R")
    #pumpSerIntrf.sendString("/1S23IA0R\r\n")
    logFunc("%s finished.\n" % nextStep)
    NEXT = "StateGetNextStep"
'''

[StatePump2Conc1]
action = '''
pumpNum = 2
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 1, "S23IA0R")
        
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 2, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 2, "%s,1R" % FlowRate[3])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[3]
    sendPumpCmd(pumpSerIntrf, 2, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 2, Concentration 1 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump2"
'''

[StatePump2Conc2]
action = '''
pumpNum = 2
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 1, "S23IA0R")
        
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 2, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 2, "%s,1R" % FlowRate[4])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[4]
    sendPumpCmd(pumpSerIntrf, 2, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 2, Concentration 2 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump2"
'''

[StatePump2Conc3]
action = '''
pumpNum = 2
if emptySyringeToBag:
    sendPumpCmd(pumpSerIntrf, 1, "S23IA0R")
        
logFunc("Step Number: %d\n" % (currSeqIdx+1))
if runExtraPumpSchemeA:
    logFunc("Run extra pump scheme A.\n")
    setValveMask(2)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA120000O%s,1A0R" % "V.07"
    sendPumpCmd(pumpSerIntrf, 2, command)
    sleep(375)
    sendPumpCmd(pumpSerIntrf, 2, "%s,1R" % FlowRate[5])
    sleep(60)
    setValveMask(6)
    sleep(90)
else:
    setValveMask(6)
    sendAirPumpCmd(pumpSerIntrf, "\RO")
    sendPumpCmd(pumpSerIntrf, 2, "ZR")
    waitForComplete(pumpSerIntrf, 2, 5.0)
    command = "S21IA90000O%s,1A0R" % FlowRate[5]
    sendPumpCmd(pumpSerIntrf, 2, command)
clearMeasBuffer()
logFunc("Run measurement for Pump 2, Concentration 3 for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementPump2"
'''

[StateGetMeasurementPump2]
action = '''
if time.time() < stopMeasTime:
    results = measGetBufferFirst()
    if not results:
        sleep(1.0)
        NEXT="StateGetMeasurementPump2"
    else:
        lineCount += 1
        results["reportDate"] = results["date"].split()[0]    
        results["reportTime"] = results["date"].split()[1]
        results["rotValMask"] = rotValCode
        results["solValMask"] = 6
        results["source"] = "Pump2"+conc
        results["calStd"] = CalStdPump2+conc
        results["lineNum"] = lineCount
        results["injectSpeed"] = DispFlowRate[int(stepIdx)]
        results["dataReset"] = str(measIsDataBad())
        fileDataFunc(results)
        NEXT="StateGetMeasurementPump2"
else:
    sendPumpCmd(pumpSerIntrf, 2, "TR")
    #pumpSerIntrf.sendString("/2T\r\n")
    waitForComplete(pumpSerIntrf, 2, 3.0)
    #sleep(2.0)
    #if emptySyringeToBag:
    #    sendPumpCmd(pumpSerIntrf, 2, "S23IA0R")
    #pumpSerIntrf.sendString("/2S23IA0R\r\n")
    logFunc("%s finished.\n" % nextStep)
    NEXT = "StateGetNextStep"
'''

[StateWaterVapor1]
action = '''
pumpNum = -1
logFunc("Step Number: %d\n" % (currSeqIdx+1))
setValveMask(0)
clearMeasBuffer()
logFunc("Run measurement for Water Vapor for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementWaterVapor"
'''

[StateWaterVapor2]
action = '''
pumpNum = -1
logFunc("Step Number: %d\n" % (currSeqIdx+1))
setValveMask(8)
clearMeasBuffer()
logFunc("Run measurement for Water Vapor for %s minutes.\n" % durMinute)
logFunc("Starting time = %s\n" % time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))
stopMeasTime = time.time() + dur
NEXT = "StateGetMeasurementWaterVapor"
'''

[StateGetMeasurementWaterVapor]
action = '''
if time.time() < stopMeasTime:
    results = measGetBufferFirst()
    if not results:
        sleep(1.0)
        NEXT="StateGetMeasurementWaterVapor"
    else:
        lineCount += 1
        results["reportDate"] = results["date"].split()[0]    
        results["reportTime"] = results["date"].split()[1]
        results["rotValMask"] = rotValCode
        if conc == "1":
            results["solValMask"] = 0
        else:
            results["solValMask"] = 8
        results["source"] = "AMBIENT"+conc
        results["lineNum"] = lineCount
        results["dataReset"] = str(measIsDataBad())
        fileDataFunc(results)
        NEXT="StateGetMeasurementWaterVapor"
else:
    logFunc("%s finished.\n" % nextStep)
    NEXT = "StateGetNextStep"
'''

[StateDone]
action = '''
sendPumpCmd(pumpSerIntrf, 1, "TR")
#pumpSerIntrf.sendString("/1T\r\n")
waitForComplete(pumpSerIntrf, 1, 3.0)
#sleep(2.0)
#pumpSerIntrf.sendString("/1S23IA0R\r\n")
#sleep(1.0)
sendPumpCmd(pumpSerIntrf, 2, "TR")
#pumpSerIntrf.sendString("/2T\r\n")
waitForComplete(pumpSerIntrf, 2, 3.0)
#sleep(2.0)
#pumpSerIntrf.sendString("/2S23IA0R\r\n")
#sleep(1.0)
#pumpSerIntrf.sendString("\RX")
sendAirPumpCmd(pumpSerIntrf, "\RX")
setValveMask(0)
pumpSerIntrf.close()
if enRot and rotValve != None:
    rotValve.close()
logFunc("Done!")
'''

[StateError]
action = '''
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
'''
