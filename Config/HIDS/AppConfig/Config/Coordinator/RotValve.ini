[PrimaryCal]
0 = 3, 20
1 = 14, 20
2 = 1, 20

[AmbientAir]
0 = 1, 20
1 = 8, 20
repeatNum = 3

[TargetTank]
0 = 6, 20
1 = 14, 20
2 = 2, 20
repeatNum = 2

[PrimaryCalTime]
primaryCalTime = 18:05:00

[Mode]
inject_mode=auto

[Output]
valPos       = "Position"               , %-12s
startDate    = "Start Date (GMT)"       , %12s
startTime    = "Start Time (GMT)"       , %12s
status       = "Status"                 , %-40s

[Files]
output = C:\UserData\RotValveLog

[Setup]
initial=StateInit
final=StateDone
error=StateError

[StateInit]
action="""
errorCodeMismatch = 64
errorCodeFailSend = 128
errorCodeFailGet = 256

checkPosTimeout = 9
checkPosInterval = 3

pcPorts = config["PrimaryCal"]
ttPorts = config["TargetTank"]
aaPorts = config["AmbientAir"]
pcIdx = 0
ttIdx = 0
aaIdx = 0
ttRepeatIdx = 0
aaRepeatIdx = 0

primaryCalTime = config["PrimaryCalTime"]
primaryTriggerTime = getSpecUTC(primaryCalTime["primaryCalTime"], "float")
triggerTime = getUTCTime("float") + 10
if triggerTime >= primaryTriggerTime:
    primaryTriggerTime += 86400
hasRunFirstPrimary = False

logFunc("First scheduled primary calibration time: %s (GMT)\n" % ctime(primaryTriggerTime))
logFunc("Starting time: %s (GMT)\n" % ctime(triggerTime))
# Initialize serial interface
SerIntrf = SerIntrf(1)
SerIntrf.open()
NEXT="StateMain"
"""

[StateMain]
action="""
currTime = getUTCTime("float")
if currTime >= primaryTriggerTime:
    NEXT="StateFixedPrimCal"  
elif currTime >= triggerTime:
    NEXT="StateScheduler"
else:
    sleep(1)
    NEXT="StateMain"
"""

[StateFixedPrimCal]
action="""
triggerTime = primaryTriggerTime
primaryTriggerTime += 86400
hasRunFirstPrimary = True
(port, duration) = pcPorts[str(0)]
pcIdx = 1
aaIdx = 0
ttIdx = 0
aaRepeatIdx = 0
ttRepeatIdx = 0
NEXT="StateValCtrl"
"""

[StateScheduler]
action="""
if pcIdx < len(pcPorts) and hasRunFirstPrimary:
    (port, duration) = pcPorts[str(pcIdx)]
    pcIdx += 1
elif aaRepeatIdx < int(aaPorts["repeatNum"]):
    (port, duration) = aaPorts[str(aaIdx)]
    if aaIdx == len(aaPorts)-2:
        aaRepeatIdx += 1                
        aaIdx = 0
    else:
        aaIdx += 1  
elif ttRepeatIdx < int(ttPorts["repeatNum"]):
    (port, duration) = ttPorts[str(ttIdx)] 
    if ttIdx == len(ttPorts)-2:
        ttRepeatIdx += 1
        ttIdx = 0
        if ttRepeatIdx < int(ttPorts["repeatNum"]):    
            aaIdx = 0
            aaRepeatIdx = 0            
    else:       
        ttIdx += 1
else:
    if hasRunFirstPrimary:
        (port, duration) = pcPorts[str(0)]
        pcIdx = 1
        aaIdx = 0
        ttIdx = 0
    else:
        (port, duration) = aaPorts[str(0)]
        pcIdx = 0
        aaIdx = 1                
        ttIdx = 0
    aaRepeatIdx = 0
    ttRepeatIdx = 0
  
NEXT="StateValCtrl"
"""

[StateValCtrl]
action="""
triggerTime += float(duration)

logFunc("Go to position: %2s (duration = %s seconds)\n" % (port, duration))
startDate = strftime("%Y-%m-%d", getUTCTime("tuple"))
startTime = strftime("%H:%M:%S", getUTCTime("tuple"))
status = ""
try:
    SerIntrf.sendString("CP")
    cp = SerIntrf.getLine()
    currPos = cp.split("= ")[-1]
except:
    currPos = "0"
    
if currPos != port:
    try:
        SerIntrf.sendString("GO%s" % port)
        setRotValveMask(port)
    except:
        status = status + "Failed to send command. "
        logFunc("Failed to send valve position command to serial port\n")
        setRotValveMask(errorCodeFailSend)

sleep(checkPosInterval)
checkPosTime = checkPosInterval
matchPos = False
getPos = True
while checkPosTime <= checkPosTimeout:
    try:
        SerIntrf.sendString("CP")
        cp = SerIntrf.getLine()
        if cp.split("= ")[-1] == port:
            logFunc("%s - matched\n" % cp)
            matchPos = True
            break
        else:
            logFunc("%s - not matched (try again)\n" % cp)
            checkPosTime += checkPosInterval
            if checkPosTime <= checkPosTimeout:
                sleep(checkPosInterval)
            else:
                break
    except:
        checkPosTime += checkPosInterval
        if checkPosTime <= checkPosTimeout:
            sleep(checkPosInterval)
        else:
            getPos = False
            break

if not getPos:
    status = status + "Failed to confirm position. "
    logFunc("Failed to confirm position from serial port\n")
    setRotValveMask(errorCodeFailGet)
elif not matchPos:
    status = status + "Failed to go to desired position. "
    logFunc("Failed to go to desired position\n")
    setRotValveMask(errorCodeMismatch)

if status == "":
    status = "OK"
    
output = {"valPos"   : port,
          "startDate": startDate, 
          "startTime": startTime,
          "status"   : status
          }
fileDataFunc(output)        
#logFunc("Next run time %s (GMT)\n" % time.ctime(triggerTime)) 
NEXT="StateMain"
"""

[StateDone]
action="""
SerIntrf.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
