[Mode]
inject_mode = automatic

[Files]
output = c:/IsotopeData/IsoWater
sequence = c:/windows/PicarroSeq.txt
prefix = P

[UserEditableParams]
num_disp_params = 0
0 = calLoopMax, Number of liquid injections for calibration, 5
1 = measurementTimeHours, Vapor measurement time (hours), 1

[ValveSequence]
steps = '''
init:
    0xFF,0x00,4     #shut all valves for 1 sec
    0xFF,0x0A,80   #pump out
    0xFF,0x09,40    #40 let dry gas in inlet
    0xFF,0x0A,100   #160 pump out
break1:
    0x0,0x00,00     #break for wet flush
wetFlush:
    0xFF,0x09,40    #40 let dry gas in inlet
    0xFF,0x0A,100   #160 pump out
wetFlushDone:
    0x0,0x00,00     #end break for wet flush
lastClean:
    0xFF,0x09,40    #40 let dry gas in inlet
    0xFF,0x0C,40    #40 flow through to DAS
    0xFF,0x0A,200   #240 pump out
    0xFF,0x08,4
lastCleanDone:
    0x00,0x00,0     #break
samplePrep:
    0xFF,0x08,120   #280 stay under vacuum after liquid injected
    0xFF,0x09,4     #pulse inlet for 1/4 sec
    0xFF,0x08,80   #wait for 30 sec
    0xFF,0x09,46    #[was pulse inlet for 1 sec]
    0xFF,0x08,200   #360 wait for 90 sec (2 min total wait)
sample:
    0xFF,0x0C,1350  #1320 sample for 4.5 min
    0xFF,0x08,4     #all closed
done:
    0x00,0x00,0     #break
vapor:
    0xFF,0x00,65535 # keep pumping out
    0xFF,0x00,65535
    0xFF,0x00,65535
    0xFF,0x00,65535 # keep pumping out
    0xFF,0x00,65535
    0xFF,0x00,65535
    0x00,0x00,0
septumVent:
    0xFF,0x0A,120   # pump out old sample
    0xFF,0x09,40    # vent with carrier gas
septumChange:
    0x00,0x00,0
'''
[Output]
line = Line, %6s
analysis = Analysis, %10s
timeCode = Time Code, %22s
port = Port, %15s
injNum = Inj Nr, %8d
Delta_17_16_mean = d(17_16)Mean, %14.3f
Delta_18_16_mean = d(18_16)Mean, %14.3f
Delta_D_H_mean = d(D_H)Mean, %14.3f
Excess_17_mean = E17_Mean, %14.3f
H2O_mean = H2O_Mean, %14.0f
ignore = Ignore, %8d
Good = Good, %5d
vapor_Delta_17_16 = Vapor d(17_16), %14.3f
vapor_Delta_18_16 = Vapor d(18_16), %14.3f
vapor_Delta_D_H = Vapor d(D_H), %14.3f
vapor_Excess_17 = Vapor E17, %14.3f
vapor_H2O = Vapor H2O, %14.0f
Identifier 1 = Identifier 1, %40s
Identifier 2 = Identifier 2, %40s
gasConfig = Gas Configuration, %20s
timestamp_mean = Timestamp Mean, %14.2f
Delta_17_16_std = d(17_16)_SD, %14.3f
Delta_18_16_std = d(18_16)_SD, %14.3f
Delta_D_H_std = d(D_H)_SD, %14.3f
Excess_17_std = E17_SD, %14.3f
H2O_std = H2O_SD, %14.3f
Delta_18_16_slope = d(18_16)_Sl, %14.3f
Delta_D_H_slope = d(D_H)_Sl, %14.3f
H2O_slope = H2O_Sl, %14.3f
baseline_shift_mean = baseline_shift, %14.3f
slope_shift_mean = slope_shift, %14.3f
residuals_mean = residuals, %14.3f
baseline_curvature_mean = baseline_curvature, %14.3f
interval_mean = interval, %14.3f
CH4_mean = ch4_ppm, %14.3f
h16od_adjust_mean = h16od_adjust, %14.4f
h16od_shift_mean = h16od_shift, %14.4f
n2_flag_mean = n2_flag, %5d
resistance = Resistance, %10s
dasTemp = DAS Temp, %14.3f
trayName = Tray, %10s
sampleNum = Sample, %8s
jobNum = Job, %8d
methodName = Method, %10s
errCode = Error Code, %8d
pulseGood = Pulse Good, %8s

[Setup]
initial = StateSetupBarnacle
final = StateDone
error = StateError
# script=CoordinatorScripts.py

[Trays]
tray1 = 1

[StateSetupBarnacle]
action = """
logFunc("Searching MPM...\n")
Barnacle = None
BarnacleFound = False
for p in range(2,100):
    if Barnacle:
        Barnacle.close()
        Barnacle = None
    try:
        Barnacle = SerIntrf(p, timeout=1, xonxoff=0)
        sleep(3)
    except:
        continue
    try:
        logFunc("Talking to COM%d...\n"%(p+1))
        Barnacle.sendString("sa")
        status = Barnacle.getLine()
        if "MPM" in status:
            logFunc("MPM found at COM%d...\n"%(p+1))
            BarnacleFound = True
            break
    except:
        pass

if not BarnacleFound:
    logFunc("MPM not found.\n")
    if Barnacle:
        Barnacle.close()
        Barnacle = None
    GUI.popWarning("MPM not found", "MPM not found")
    raise Exception, "MPM not found"

def getResistance():
    if Barnacle:
        Barnacle.sendString("sj")
        cnt = Barnacle.getLine()
        logFunc("Resistance: %s\n" % cnt)
        return cnt
    else:
        GUI.popWarning("MPM not found", "MPM not found")
        raise Exception, "MPM not found"

NEXT = "StateStart"
"""

[StateStart]
action = '''
# Select PWM level of Barnacle
pwmConfig = configObj(r"C:\Picarro\G2000\AppConfig\Config\Coordinator\PwmLevel.ini")
levelList = [i.upper() for i in pwmConfig.list_options("Level")]
lastLevel = pwmConfig.get("Last", "select")
if lastLevel not in levelList:
    defaultLevel = levelList[0]
else:
    defaultLevel = lastLevel
newLevel = GUI.popComboBox("Press \'OK\' after selecting power level", "Power Level Selection", "Power Level", levelList, defaultLevel)
if newLevel:
    pwmConfig.set("Last", "select", newLevel)
    pwmConfig.write()
logFunc("Selected Power Level: %s\n" % newLevel)
# Turn on Barnacle
cmd = pwmConfig.get("Level", newLevel)
Barnacle.sendString(cmd)
status = Barnacle.getLine()
logFunc("%s\n" % status)

calLoopMax = int(editParamDict["calLoopMax"])                           # Number of calibration samples
measurementTime = 3600.0*float(editParamDict["measurementTimeHours"])   # Seconds for measurement (between calibrations)
sendValveSequence(config["ValveSequence"])
setValveStep("none")
lineNum = 0
currentSampleNum = -1
currentTrayName  = ""
injNum = -1
dasTemp = 0.0
analysisTimeout = 120
maxWetFlushIter = 0

concNameList = ["Delta_17_16", "Delta_18_16", "Excess_17", "Delta_D_H", "H2O", "baseline_shift", "slope_shift", "CH4", "residuals", "baseline_curvature", "h16od_adjust", "h16od_shift", "interval", "n2_flag"]

pulseAnalyzerSet(source = "analyze_iH2O7200_lct", concNameList = concNameList,
                 targetConc = "H2O", thres1Pair = [6500, 30000], thres2Pair = [5500, 30000],
                 triggerType = "in", waitTime = 10.0,
                 validTimeAfterTrigger = 80, validTimeBeforeEnd = 15,
                 timeout = 172800, bufSize = 5000, numPointsToTrigger = 1, numPointsToRelease = 1)
pulseAnalyzerStartRunning()
setMeasBuffer("analyze_iH2O7200_lct", ["H2O", "Delta_17_16", "Delta_18_16", "Delta_D_H", "Excess_17", "DasTemp"], 50)
clearMeasBuffer()
GUI.setStatusText("")
pulseErrorCount = 0
numErrorsTriggerWarning = 5
warningTriggered = False
NEXT="StateAssertStartInit"
'''

[StateAssertStartInit]
action = '''
if calLoopMax == 0:
    NEXT = "StateStartMeasurement"
else:
    logFunc("Asserting start, cleaning evaporator\n")
    NEWAUTOSAMPLER.assertStart()
    setValveStep("init")
    calLoopIter = 0
    t = 0
    NEXT="StateWaitEvaporatorClean"
'''

[StateWaitEvaporatorClean]
action = '''
if (not warningTriggered) and (pulseErrorCount >= numErrorsTriggerWarning):
    GUI.popWarning("Pulse analysis has failed at least %d times in a row" % pulseErrorCount,
                   "Pulse Analysis Failure Warning")
    warningTriggered = True
    pulseErrorCount = 0

if not atValveStep("break1"):
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    logFunc("\nEvaporatorClean completed\n")
    t = 0
    logFunc("\nFlushing pulse analyzer results buffer\n")
    pulseAnalyzerReset()
    NEXT="StateStartWetFlushes"
'''

[StateStartWetFlushes]
action = '''
logFunc("Starting wet flushes\n")
#setValveStep("init")
wetFlushIter=0
NEXT="StateWetFlushContinue"
'''

[StateWetFlushContinue]
action = '''
if wetFlushIter<maxWetFlushIter:
    NEXT="StateWetFlushInject"
else:
    NEXT="StateLastCleaning"
'''

[StateWetFlushInject]
action = '''
logFunc("Asserting inject for wet flush %d, waiting for injected\n" % (wetFlushIter+1,))
NEWAUTOSAMPLER.assertInject()
t = 0
NEXT="StateWaitForWetFlushInjected"
'''

[StateWaitForWetFlushInjected]
action = '''
if not NEWAUTOSAMPLER.getInjected():
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForWetFlushInjected"
else:
    logFunc("\nReceived wet flush injected\n")
    NEWAUTOSAMPLER.deassertInject()
    setValveStep("wetFlush")
    t = 0
    NEXT="StateWaitEndFlushLoop"
'''

[StateWaitEndFlushLoop]
action = '''
if not atValveStep("wetFlushDone"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEndFlushLoop"
else:
    setValveStep("break1")
    wetFlushIter=wetFlushIter+1
    logFunc("\nWetFlushLoop %d completed\n" % (wetFlushIter,))
    NEXT="StateWetFlushContinue"
'''

[StateLastCleaning]
action = '''
logFunc("Performing last cleaning\n")
setValveStep("lastClean")
t = 0
NEXT="StateWaitForLastCleaning"
'''

[StateWaitForLastCleaning]
action = '''
if not atValveStep("lastCleanDone"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForLastCleaning"
else:
    NEXT="StateAssertInject"
'''

[StateAssertInject]
action = '''
pulseAnalyzerResetIfNotActive()
logFunc("\nAsserting inject, waiting for injected\n")
NEWAUTOSAMPLER.assertInject()
NEXT="StateWaitForInjected"
'''

[StateWaitForInjected]
action = '''
if not NEWAUTOSAMPLER.getInjected():
    logFunc(".")
    sleep(0.2)
    NEXT="StateWaitForInjected"
else:
    logFunc("\nReceived injected\n")
    NEWAUTOSAMPLER.deassertInject()
    NEXT="StateGetAutosamplerLog"
'''

[StateGetAutosamplerLog]
action = '''
timeCode, trayName, sampleNum, jobNum, methodName, errCode = NEWAUTOSAMPLER.getLog()
if trayName < 0:
    trayName = "Ink"
else:
    trayName += 1
injNum += 1
trayName = str(trayName)
if currentSampleNum != sampleNum or currentTrayName != trayName:
    incrAnalysisNumber()
    currentSampleNum = sampleNum
    currentTrayName  = trayName
    injNum = 1

seqNum = getAnalysisNumber()
prefix = getPrefix()
analysis = "%s-%d" % (prefix,seqNum)
lineNum += 1


gasConfig = "H2O"
autosampDict = dict(line=lineNum,analysis=analysis,timeCode=timeCode,gasConfig=gasConfig,injNum=injNum,
    trayName=trayName,sampleNum=sampleNum,jobNum=jobNum,methodName=methodName,errCode=errCode)
NEXT="StateSendValveSequence"
'''

[StateSendValveSequence]
action = '''
logFunc("Start gas sample preparation\n")
setValveStep("samplePrep")
t = 0
NEXT="StateWaitForStartAnalysis"
'''

[StateWaitForStartAnalysis]
action = '''
if not atValveStep("sample"):
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForStartAnalysis"
else:
    NEXT="StateStartBatchAnalysis"
'''

[StateStartBatchAnalysis]
action = '''
logFunc("\nSending sample to analyzer\n")
dasTemp = getDasTemperature()
t = 0
NEXT="StateWaitForGasSamplingDone"
'''

[StateWaitForGasSamplingDone]
action = '''
if not atValveStep("done"):
    if t % 30 == 0: 
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForGasSamplingDone"
else:
    logFunc("\nGas sampling complete\n")
    calLoopIter += 1
    if calLoopIter < calLoopMax:
        NEXT="StateCheckChangeSeptum"
    else:
        t = 0
        waitSteps = 0
        NEXT="StateWaitForLastCalAnalysisDone"
'''

[StateCheckChangeSeptum]
action = '''
if GUI.getChangeSeptumButtonState():
    NEXT="StateAssertStart"
else: # Change septum requested
    setValveStep("septumVent")
    NEXT = "StateChangeSeptum"
'''

[StateChangeSeptum]
action = '''
if not atValveStep("septumChange"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateChangeSeptum"
else:
    logFunc("\nReady to change septum\n")
    GUI.setChangeSeptumButtonText("Septum Changed")
    GUI.enableChangeSeptumButton()
    NEXT="StateNotifyChangeSeptum"
'''

[StateNotifyChangeSeptum]
action = '''
GUI.setStatusText(" CHANGE SEPTUM: Press 'Septum Changed' when complete.")
sleep(0.8)
NEXT="StateNotifyChangeSeptumFlash"
'''

[StateNotifyChangeSeptumFlash]
action = '''
if not GUI.getChangeSeptumButtonState():
    NEXT="StateChangeSeptumDone"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="StateNotifyChangeSeptum"
'''

[StateChangeSeptumDone]
action = '''
GUI.setStatusText("")
GUI.setChangeSeptumButtonText("Change Septum")
GUI.enableChangeSeptumButton()
NEXT="StateAssertStart"
'''

[StateAssertStart]
action = '''
logFunc("Asserting start, cleaning evaporator, waiting for results\n")
NEWAUTOSAMPLER.assertStart()
setValveStep("init")
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
'''

[StateWaitForAnalysisDone]
action = '''
if not pulseAnalyzerGetDataReady():
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForAnalysisDone"
    else:
        autosampDict["pulseGood"] = int(pulseAnalyzerIsDataGood())
        fileDataFunc(autosampDict)
        logFunc("\nAnalysis timeout\n")
        if not warningTriggered:
            pulseErrorCount += 1
        NEXT="StateWaitEvaporatorClean"
else:
    try:
        (startTime, endTime) = pulseAnalyzerGetPulseStartEndTime()
        setLineMarkerColor("red", startTime)
        setLineMarkerColor(None, endTime)
    except:
        pass
    results = pulseAnalyzerGetStatistics()

    pulseOK = True
    for concName in concNameList:
        if concName+"_mean" not in results:
            pulseOK = False
            logFunc("\nError occurred in pulse analysis\n")
            break

    try:
        results["Good"] = 5000.0 <= results["H2O_mean"] <= 23000.0
        results.update(autosampDict)
        results["ignore"] = -int(results["injNum"] <=3 or not results["Good"])
        results["dasTemp"] = dasTemp
        results["resistance"] = getResistance()
        results["pulseGood"] = int(pulseAnalyzerIsDataGood())
        logFunc("\nAnalysis done\n")
    except:
        pulseOK = False
        logFunc("\nError occurred in pulse analysis\n")
    
    fileDataFunc(results)
    
    if pulseOK:
        pulseErrorCount = 0
    elif not warningTriggered:
        pulseErrorCount += 1

    NEXT="StateWaitEvaporatorClean"
'''

[StateWaitForLastCalAnalysisDone]
action = '''
if not pulseAnalyzerGetDataReady():
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForLastCalAnalysisDone"
    else:
        autosampDict["pulseGood"] = int(pulseAnalyzerIsDataGood())
        fileDataFunc(autosampDict)
        logFunc("\nAnalysis timeout\n")
        NEXT="StateStartMeasurement"
else:
    try:
        (startTime, endTime) = pulseAnalyzerGetPulseStartEndTime()
        setLineMarkerColor("red", startTime)
        setLineMarkerColor(None, endTime)
    except:
        pass
    results = pulseAnalyzerGetStatistics()

    try:
        results["Good"] = 5000.0 <= results["H2O_mean"] <= 23000.0
        results.update(autosampDict)
        results["ignore"] = -int(results["injNum"] <=3 or not results["Good"])
        results["dasTemp"] = dasTemp
        results["resistance"] = getResistance()
        results["pulseGood"] = int(pulseAnalyzerIsDataGood())
        
        logFunc("\nAnalysis done\n")
    except:
        pulseOK = False
        logFunc("\nError occurred in pulse analysis\n")
    
    NEXT="StateStartMeasurement"
        
    fileDataFunc(results)
'''

[StateStartMeasurement]
action = '''
import time
setValveStep("vapor")
startMeasTime = time.time()
stopMeasTime = startMeasTime + measurementTime
logFunc("\nFlushing measurement system results buffer\n")
clearMeasBuffer()
logFunc("Starting measurement of ambient air\n")
logFunc("Measurement will be complete at %s\n" % time.ctime(stopMeasTime))
NEXT="StateGetMeasurementResult"
'''

[StateGetMeasurementResult]
action = '''
import time
if time.time() > stopMeasTime:
    NEXT="StateAssertStartInit"
else:
    results = measGetBufferFirst()
    if not results:
        sleep(1.0)
        NEXT="StateGetMeasurementResult"
    else:
        lineNum += 1
        NEXT="StateGetMeasurementResult"
        fileDataFunc({"vapor_Delta_17_16":float(results["Delta_17_16"]),
                      "vapor_Delta_18_16":float(results["Delta_18_16"]),
                      "vapor_Excess_17":float(results["Excess_17"]),
                      "line":int(lineNum),
                      "vapor_Delta_D_H":float(results["Delta_D_H"]),
                      "vapor_H2O":float(results["H2O"]),
                      "timestamp_mean":float(results["measTime"]),
                      #"timeCode":results["date"],
                      "timeCode": time.strftime("%Y/%m/%d %H:%M:%S", time.localtime(results["measTime"])),
                      "port":"Ambient"})
'''


[StateDone]
action = '''
# Turn off Barnacle
if Barnacle:
    Barnacle.sendString("sd000")
    Barnacle.close()
    
setValveStep(-1)
setValveMask(0)

logFunc("Done!")
'''

[StateError]
action = '''
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
'''
