# Based on CoordinatorLIMS_4_5MinPulse.ini
# 20100505
# modified for L1115 added 8 to all valve codes

[Mode]
inject_mode=manual

[Files]
output = "c:/IsotopeData/IsoWater"
sequence = "c:/windows/PicarroSeq.txt"
prefix = "P"

[ValveSequence]
steps="""
init:
    0xFF,0x08,4     #shut all valves for 1 sec
    0xFF,0x0a,80   #pump out
    0xFF,0x08,0     #40 let dry gas in inlet
    0xFF,0x08,0     #160 [was flow through to DAS]
    0xFF,0x09,40    #40 let dry gas in inlet
    0xFF,0x08,0    #40 flow through to DAS
    0xFF,0x0a,100   #160 pump out
    0xFF,0x08,0     #all closed
break1:
    0x00,0x00,0     #break
samplePrep:
    0xFF,0x08,120   #280 stay under vacuum after liquid injected
    0xFF,0x09,4     #pulse inlet for 1/4 sec
    0xFF,0x08,80   #wait for 30 sec
    0xFF,0x09,46    #[was pulse inlet for 1 sec]
    0xFF,0x08,200   #360 wait for 90 sec (2 min total wait)
sample:
    0xFF,0x0c,1080  #1320 sample for 4.5 min
    0xFF,0x08,4     #all closed
done:
    0x00,0x00,0     #break
septumVent:
    0xFF,0x0a,120    # pump out old sample
    0xFF,0x09,40    # vent with carrier gas
septumChange:
    0x00,0x00,0
"""
[Output]
lineNum = Line, %5d
sampleNum = "Sample", %8s
date="Date",%10s
time="Time",%10s
Delta_18_16_mean = d(18_16)Mean, %14.3f
Delta_D_H_mean = d(D_H)Mean, %14.3f
H2O_mean = H2O_Mean, %14.0f
Good = Good, %5d
Identifier 1 = Identifier 1, %40s
Identifier 2 = Identifier 2, %40s
timestamp_mean = Timestamp Mean, %14.2f
Delta_18_16_std = d(18_16)_SD, %14.3f
Delta_D_H_std = d(D_H)_SD, %14.3f
H2O_std = H2O_SD, %14.3f
Delta_18_16_slope = d(18_16)_Sl, %14.3f
Delta_D_H_slope = d(D_H)_Sl, %14.3f
H2O_slope = H2O_Sl, %14.3f
baseline_shift_mean = baseline_shift, %14.3f
slope_shift_mean = slope_shift, %14.3f
residuals_mean = residuals, %14.3f
baseline_curvature_mean = baseline_curvature, %14.3f
interval_mean = interval, %14.3f
CH4_mean = ch4_ppm, %14.3f
h16od_adjust_mean = h16od_adjust, %14.4f
h16od_shift_mean = h16od_shift, %14.4f
resistance = Resistance, %10s
n2_flag_mean = n2_flag, %5d

[Setup]
initial = StateSetupBarnacle
final=StateDone
error=StateError
# script=CoordinatorScripts.py

[StateSetupBarnacle]
action = """
logFunc("Searching MPM...\n")
Barnacle = None
BarnacleFound = False
for p in range(2,100):
    if Barnacle:
        Barnacle.close()
        Barnacle = None
    try:
        Barnacle = SerIntrf(p, timeout=1, xonxoff=0)
        sleep(3)
    except:
        continue
    try:
        logFunc("Talking to COM%d...\n"%(p+1))
        Barnacle.sendString("sa")
        status = Barnacle.getLine()
        if "MPM" in status:
            logFunc("MPM found at COM%d...\n"%(p+1))
            BarnacleFound = True
            break
    except:
        pass

if not BarnacleFound:
    logFunc("MPM not found.\n")
    if Barnacle:
        Barnacle.close()
        Barnacle = None
    GUI.popWarning("MPM not found", "MPM not found")
    raise Exception, "MPM not found"

def getResistance():
    if Barnacle:
        Barnacle.sendString("sj")
        cnt = Barnacle.getLine()
        logFunc("Resistance: %s\n" % cnt)
        return cnt
    else:
        GUI.popWarning("MPM not found", "MPM not found")
        raise Exception, "MPM not found"

NEXT = "StateStart"
"""

[StateStart]
action="""
# Select PWM level of Barnacle
pwmConfig = configObj(r"C:\Picarro\G2000\AppConfig\Config\Coordinator\PwmLevel.ini")
levelList = [i.upper() for i in pwmConfig.list_options("Level")]
lastLevel = pwmConfig.get("Last", "select")
if lastLevel not in levelList:
    defaultLevel = levelList[0]
else:
    defaultLevel = lastLevel
newLevel = GUI.popComboBox("Press \'OK\' after selecting power level", "Power Level Selection", "Power Level", levelList, defaultLevel)
if newLevel:
    pwmConfig.set("Last", "select", newLevel)
    pwmConfig.write()
logFunc("Selected Power Level: %s\n" % newLevel)
# Turn on Barnacle
cmd = pwmConfig.get("Level", newLevel)
Barnacle.sendString(cmd)
status = Barnacle.getLine()
logFunc("%s\n" % status)

GUI.setManualMode(True)
GUI.disableManualButton()
lineNum = 0
sendValveSequence(config["ValveSequence"])
setValveStep("none")
analysisTimeout = 120

concNameList = ["Delta_18_16", "Delta_D_H", "H2O", "baseline_shift", "slope_shift", "CH4", "residuals", "baseline_curvature", "h16od_adjust", "h16od_shift", "interval", "n2_flag"]

pulseAnalyzerSet(source = "analyze_iH2O7200", concNameList = concNameList,
                 targetConc = "H2O", thres1Pair = [6500, 30000], thres2Pair = [5500, 30000],
                 triggerType = "in", waitTime = 10.0,
                 validTimeAfterTrigger = 80, validTimeBeforeEnd = 10,
                 timeout = 172800, bufSize = 5000, numPointsToTrigger = 1, numPointsToRelease = 1)

pulseAnalyzerStartRunning()
GUI.setStatusText("")
pulseErrorCount = 0
numErrorsTriggerWarning = 5
warningTriggered = False
NEXT="StateAssertStartInit"
"""
[StateAssertStartInit]
action="""
logFunc("Cleaning evaporator\n")
setValveStep("init")
t = 0
NEXT="StateWaitEvaporatorClean"
"""

[StateWaitEvaporatorClean]
action="""
if (not warningTriggered) and (pulseErrorCount >= numErrorsTriggerWarning):
    GUI.popWarning("Pulse analysis has failed at least %d times in a row" % pulseErrorCount,
                   "Pulse Analysis Failure Warning")
    warningTriggered = True
    pulseErrorCount = 0

if not atValveStep("break1"):
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    logFunc("\nEvaporatorClean completed\n")
    t = 0
    logFunc("\nFlushing pulse analyzer results buffer\n")
    pulseAnalyzerReset()
    NEXT="StateAskForInjection"
"""

[StateAskForInjection]
action="""
GUI.enableManualButton()
GUI.setManualButtonText("Injected")
NEXT="State2"
"""

[State2]
action="""
if not GUI.getManualButtonState():
    NEXT="StateSendValveSequence"
else:
    GUI.setStatusText(" READY FOR INJECTION: Verify description, inject sample, then press 'Injected'.")
    sleep(0.8)
    NEXT="State3"
"""

[State3]
action="""
if not GUI.getManualButtonState():
    NEXT="StateSendValveSequence"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="State2"
"""

[StateSendValveSequence]
action="""
now = localtime()
date = strftime("%Y/%m/%d",now)
time = strftime("%H:%M:%S",now)
lineNum = lineNum + 1
GUI.setStatusText("")
GUI.setManualButtonText("Processing...")
sampleNum = GUI.getManualSampleNumber()
sampleDict = dict(date=date,time=time,sampleNum=sampleNum,lineNum=lineNum)
logFunc("Sample %d has been injected\n" % sampleNum)
logFunc("Start gas sample preparation\n")
setValveStep("samplePrep")
t = 0
NEXT="StateWaitForStartAnalysis"
"""

[StateWaitForStartAnalysis]
action="""
if not atValveStep("sample"):
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForStartAnalysis"
else:
    NEXT="StateStartBatchAnalysis"
"""

[StateStartBatchAnalysis]
action="""
logFunc("\nSending sample to analyzer\n")
t = 0
NEXT="StateWaitForGasSamplingDone"
"""

[StateWaitForGasSamplingDone]
action = """
if not atValveStep("done"):
    if t % 30 == 0: 
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForGasSamplingDone"
else:
    logFunc("\nGas sampling complete\n")
    t = 0
    NEXT="StateCheckChangeSeptum"
"""

[StateCheckChangeSeptum]
action="""
if GUI.getChangeSeptumButtonState():
    NEXT="StateAssertStart"
else: # Change septum requested
    setValveStep("septumVent")
    NEXT = "StateChangeSeptum"
"""

[StateChangeSeptum]
action = """
if not atValveStep("septumChange"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateChangeSeptum"
else:
    logFunc("\nReady to change septum\n")
    GUI.setChangeSeptumButtonText("Septum Changed")
    GUI.enableChangeSeptumButton()
    NEXT="StateNotifyChangeSeptum"
"""

[StateNotifyChangeSeptum]
action="""
GUI.setStatusText(" CHANGE SEPTUM: Press 'Septum Changed' when complete.")
sleep(0.8)
NEXT="StateNotifyChangeSeptumFlash"
"""

[StateNotifyChangeSeptumFlash]
action="""
if not GUI.getChangeSeptumButtonState():
    NEXT="StateChangeSeptumDone"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="StateNotifyChangeSeptum"
"""

[StateChangeSeptumDone]
action="""
GUI.setStatusText("")
GUI.setChangeSeptumButtonText("Change Septum")
GUI.enableChangeSeptumButton()
NEXT="StateAssertStart"
"""

[StateAssertStart]
action="""
logFunc("Cleaning evaporator, waiting for results\n")
setValveStep("init")
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
"""

[StateWaitForAnalysisDone]
action = """
if not pulseAnalyzerGetDataReady():
    if t % 30 == 0:
        logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForAnalysisDone"
    else:
        fileDataFunc(sampleDict)
        logFunc("\nAnalysis timeout\n")
        if not warningTriggered:
            pulseErrorCount += 1
        NEXT="StateWaitEvaporatorClean"
else:
    try:
        (startTime, endTime) = pulseAnalyzerGetPulseStartEndTime()
        setLineMarkerColor("red", startTime)
        setLineMarkerColor(None, endTime)
    except:
        pass
    results = pulseAnalyzerGetStatistics()

    pulseOK = True
    for concName in concNameList:
        if concName+"_mean" not in results:
            pulseOK = False
            logFunc("\nError occurred in pulse analysis\n")
            break

    try:
        results["Good"] = 5500.0 <= results["H2O_mean"] <= 23000.0
        results.update(sampleDict)
        results["resistance"] = getResistance()
        fileDataFunc(results)
        logFunc("\nAnalysis done\n")
    except:
        pulseOK = False
        logFunc("\nError occurred in pulse analysis\n")

    if pulseOK:
        pulseErrorCount = 0
    elif not warningTriggered:
        pulseErrorCount += 1

    NEXT="StateWaitEvaporatorClean"
"""

[StateDone]
action="""
# Turn off Barnacle
if Barnacle:
    Barnacle.sendString("sd000")
    Barnacle.close()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
