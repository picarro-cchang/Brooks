# 2010-09-09 alex lee  This coordinator is used to run a baseline cal.
# 2017-1-18 Sze capture the screen by using scrot :: sudo apt-get install scrot

[UserEditableParams]
num_disp_params = 0
0 = "measTime", "Measurement time (minutes)", "60"

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/I2000/InstrConfig/BaselineCal/BaselineCal"

[Output]


[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action="""
#LOW_LOSS_VAR_THRES = 0.1
#LOSS_VAR_BUFFER_SIZE = 2
measTime = float(editParamDict["measTime"])*60.0
LOW_LOSS_VAR_THRES = 0.5
LOSS_VAR_BUFFER_SIZE = 1

rootDir = r"/home/picarro/I2000/InstrConfig"
toolDir = os.path.join(rootDir,r"Integration/BaselineTools")
parentDir = os.path.join(rootDir,r"Integration/BaselineHF")
fitterConfigFile = os.path.join(rootDir,r"Calibration/InstrCal/FitterConfig.ini")

fitterIniFile = "FitterHFBaseline.ini"
testFitterIniFile = "TesterHFBaseline.ini"
postProcessFile = "postProcessHF_v3.py"
proposedFile = "FitterConfig_Proposed.ini"
screenShotFile = "TesterOutput.png"
rdfDir = os.path.join(parentDir, "RDF")
rdfDir = strftime(os.path.join(rdfDir,"%Y-%m-%d"))

if not os.path.exists(rdfDir): os.makedirs(rdfDir)
NEXT = "StateNormal" # StateNormal     #  For normal operation.  StateBypassCollection is for testing or reanalysis
"""

[StateBypassCollection]
action="""
outputDir = strftime(os.path.join(parentDir,"Testing_Dir"))
h5FileList = [os.path.join(outputDir, f) for f in os.listdir(outputDir) if f.endswith(".h5")]
NEXT = "StateRunFitter"
"""

[StateNormal]
action="""
GUI.popPause("Verify that Dry Nitrogen is hooked to the instrument Inlet and flowing", "Check Dry Nitrogen")
stopDataLog("BaselineCal")
concList = ["uLossMin", "uLossMax", "uLossVar"]
setMeasBuffer("analyze_baseline_cal", concList, 100)
outputDir = strftime(os.path.join(parentDir,"%Y%m%d_%H%M%S"))
if not os.path.exists(outputDir): os.makedirs(outputDir)

t = 0
sleepTime = 1.0
logFunc("Waiting for fitter to report concentrations")
NEXT = "StateWaitForFitterReporting"
"""

[StateWaitForFitterReporting]
action="""
meas = measGetBufferFirst()
if not meas:
    if t % 30 == 0: logFunc("\n%3.1f s " % (t*sleepTime))
    t += 1
    logFunc(".")
    sleep(sleepTime)
    NEXT="StateWaitForFitterReporting"
else:
    logFunc("\n")
    clearMeasBuffer()
    uLossVarBuffer = []
    t = 0
    logFunc("Making sure inlet sample has low concentration\n")
    NEXT = "StateStartDryN2"
"""

[StateStartDryN2]
action="""
meas = measGetBufferFirst()
if not meas:
    if t % 30 == 0: logFunc("\n%3.1f s " % (t*sleepTime))
    t += 1
    logFunc(".")

    sleep(sleepTime)
    NEXT="StateStartDryN2"
else:
    logFunc('\n')
    uLossVarBuffer.append(meas["uLossVar"])
    if len(uLossVarBuffer) >= LOSS_VAR_BUFFER_SIZE:
        uLossVarBuffer = uLossVarBuffer[-LOSS_VAR_BUFFER_SIZE:]
        uLossVarMean = mean(uLossVarBuffer)
        if uLossVarMean < LOW_LOSS_VAR_THRES:
            for f in os.listdir(rdfDir):
                try:
                    os.remove(os.path.join(rdfDir, f))
                except:
                    pass
            startDataLog("BaselineCal")
            endTime = time.time() + measTime
            logFunc("Start measuring...\n")
            NEXT = "StateWaitTillDone"
        else:
            NEXT="StateStartDryN2"
    else:
        NEXT="StateStartDryN2"
"""

[StateWaitTillDone]
action="""
if time.time() > endTime:
    logFunc("Run Time completed.\n")
    NEXT = "StateMoveRDF"
else:
    sleep(sleepTime)
    NEXT = "StateWaitTillDone"
"""

[StateMoveRDF]
action="""
h5FileList = []
for f in os.listdir(rdfDir):   
    if f.endswith(".h5"):
        try:
            sourcePath = os.path.join(rdfDir, f)
            destPath = os.path.join(outputDir, f)
            os.rename(sourcePath, destPath)
            h5FileList.append(destPath)
        except:
            pass
logFunc("%s\n" % h5FileList)
stopDataLog("BaselineCal")
NEXT = "StateRunFitter"
"""

[StateRunFitter]
action = """
def runFitter():
    os.system(r"python -O /home/picarro/I2000/Host/pydCaller/Fitter.py -v -c %s" % os.path.join(toolDir, fitterIniFile))
    
import threading
logFunc("Starting fitter process\n")

thread1 = threading.Thread(target=runFitter)
thread1.setDaemon(True)
thread1.start()
logFunc("Sending spectra for baseline fit\n")

for i in range(10):
    sleep(1.0)
    try:
        fitter = FitterRPC(50181)
        break
    except Exception, e:
        continue
else:
    logFunc("Fitter RPC error")
    raise e
sleep(1.0)
fitter.setH5Files(h5FileList)
fitter.fitSpectrum()
sleep(30)

# Terminate the new fitter process
logFunc("Stopping fitter process\n")
fitterID = fitter.getProcessID()
#os.system(r"taskkill /F /PID %d" % fitterID)
os.system("kill -9 %d" % fitterID)
#fitter.stopServer()
sleep(5)  # Wait for log files to close   
NEXT="StatePostProcess"
"""

[StatePostProcess]
action="""
def runPostProcess():
    os.chdir(toolDir)
    os.system("python " + os.path.join(toolDir, postProcessFile))
logFunc("Start PostProcessing program\n")
thread2 = threading.Thread(target=runPostProcess)
thread2.setDaemon(True)
thread2.start()
thread2.join()
logFunc("PostProcessing program ends\n")
NEXT="StateRunTestFitter"
"""

[StateRunTestFitter]
action = """

def runTestFitter():
    os.system(r"python -O /home/picarro/I2000/Host/pydCaller/Fitter.py -v -c %s" % os.path.join(toolDir, testFitterIniFile))
        
import threading
logFunc("Starting fitter process\n")
thread1 = threading.Thread(target=runTestFitter)
thread1.setDaemon(True)
thread1.start()

logFunc("Sending spectra to test baseline parameters\n")
for i in range(10):
    sleep(1.0)
    try:
        fitter = FitterRPC(50181)
        break
    except Exception, e:
        continue
else:
    logFunc("Fitter RPC error")
    raise e
sleep(1.0)
fitter = FitterRPC(50181)
fitter.setH5Files(h5FileList)
fitter.fitSpectrum()
sleep(30)
logFunc("Taking screen capture\n")
fitter.maximizeViewer()
sleep(2)

try:
    #grabScreenshot(os.path.join(outputDir, screenShotFile))
    os.system("scrot "+ os.path.join(outputDir, screenShotFile))
    
except Exception, err:
    logFunc("ERROR: %r\n" % err)

sleep(2)
fitter.restoreViewer()

# Terminate the new fitter process
fitterID = fitter.getProcessID()
os.system("kill -9 %d" % fitterID)
#os.system(r"taskkill /F /PID %d" % fitterID)
#fitter.stopServer()
logFunc("Stopping fitter process\n")

sleep(5)  # Wait for log files to close   
NEXT="StateMoveFiles"
"""

[StateMoveFiles]
action="""
logFunc("Moving result files to correct directories\n")
for fileWild in ["*.h5", "*.csv"]:
    try:
        moveWildToDir(join(parentDir,fileWild),outputDir)
    except Exception, err:
        logFunc("ERROR: %r\n" % err)

    for f in os.listdir(toolDir):                    
        if f.endswith(".png"):
            sourcePath = os.path.join(toolDir, f)
            destPath = os.path.join(outputDir, f)
            if os.path.exists(destPath):
                os.unlink(destPath)
            os.rename(sourcePath, destPath)
        elif f.startswith("FitterConfig"):
            sourcePath = os.path.join(toolDir, f)
            destPath = os.path.join(outputDir, proposedFile)
            if os.path.exists(destPath):
                os.unlink(destPath)
            os.rename(sourcePath, destPath)
            GUI.popPause("Replace \"%s\" with \"%s\" if fit results look OK.\n" \
                % (fitterConfigFile,destPath), "Update FitterConfig.ini")
NEXT="StateDone"
"""        

[StateDone]
action="""
stopDataLog("BaselineCal")
GUI.popInfo("Baseline calibration completed after running %.2f minutes" % (measTime/60.0), "Baseline Calibration Completed")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
