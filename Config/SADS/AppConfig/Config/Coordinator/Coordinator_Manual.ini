[Mode]
inject_mode=manual

[ValveSequence]
steps="""
init:
    0xFF,0x00,4 #shut all valves for 1 sec
    0xFF,0x02,80 #pump out
    0xFF,0x01,40 #let dry gas in inlet
    0xFF,0x02,40 #[was flow through to DAS]
    0xFF,0x02,120 #pump out
    0xFF,0x01,40 #40 let dry gas in inlet
    0xFF,0x04,40 #40 flow through to DAS
    0xFF,0x02,160 #160 pump out
    0xFF,0x01,40 #let dry gas in inlet
    0xFF,0x04,40 #flow through to DAS
    0xFF,0x02,240 #pump out
    0xFF,0x00,0 #preload with N2 before injection
    0xFF,0x00,0 #partial pump out to leave low pressure N2 preload
    0xFF,0x00,0 #all closed
break:
    0x00,0x00,0 #break
samplePrep:    
    0xFF,0x00,280 #stay under vacuum after liquid injected
    0xFF,0x01,4 #pulse inlet for 1/4 sec
    0xFF,0x00,120 #wait for 30 sec
    0xFF,0x01,14 #[was pulse inlet for 1 sec]
    0xFF,0x01,4 #[was close inlet for 2 sec]
    0xFF,0x01,18 #open inlet for remainder of 6 sec total
    0xFF,0x00,360 #wait for 90 sec (2 min total wait)
sample:
    0xFF,0x04,600 #sample for 2.5 min (changed from 1320)
    0xFF,0x00,4 #all closed
done:
    0x00,0x00,0     #break
septumVent:
    0xFF,0x02,120   # pump out old sample
    0xFF,0x01,40    # vent with carrier gas
septumChange:
    0x00,0x00,0
"""

[Output]
date="Date",%10s
time="Time",%10s
sampleNum="Sample",%8s
D_1816_mean="d(18_16)Mean",%14.3f
D_DH_mean="d(D_H)Mean",%14.3f
Good="Good",%14d
H2O_mean="H2O_Mean",%14.0f
DAYS_SINCE_JAN_mean="days_Mean",%14.5f
D_1816_std_dev="d(18_16)_SD",%14.3f
D_DH_std_dev="d(D_H)_SD",%14.3f
H2O_std_dev="H2O_SD",%14.0f
D_1816_slope="d(18_16)_Sl",%14.3f
D_DH_slope="d(D_H)_Sl",%14.3f
H2O_slope="H2O_Sl",%14.2f
dummy=" ",%2s
description="Description",%-40s

[Setup]
initial=StateStart
final=StateDone
error=StateError
script=CoordinatorScripts.py

[StateStart]
action="""
GUI.disableManualButton()
GUI.setStatusText("")
sendValveSequence(config["ValveSequence"])
setValveStep("none")
analysisTimeout = 120
HOST = "localhost"
PORT = 51020
FITTER = Comms(HOST,PORT)
NEXT="StateAssertStartInit"
"""
[StateAssertStartInit]
action="""
logFunc("Cleaning evaporator\n")
setValveStep("init")
t = 0
NEXT="StateWaitEvaporatorClean"
"""

[StateWaitEvaporatorClean]
action="""
if not atValveStep("break"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitEvaporatorClean"
else:
    logFunc("\nEvaporatorClean completed\n")
    t = 0
    logFunc("\nFlushing fitter results buffer\n")
    FITTER.clearPulseBuffer()
    NEXT="StateFlushFitResultsBuffer"
"""

[StateFlushFitResultsBuffer]
action="""
FITTER.getBufferFirst()
if FITTER.results:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateFlushFitResultsBuffer"
else:
    NEXT="StateAskForInjection"
"""

[StateAskForInjection]
action="""
GUI.enableManualButton()
GUI.setManualButtonText("Injected")
NEXT="State2"
"""

[State2]
action="""
if not GUI.getManualButtonState():
    NEXT="StateSendValveSequence"
else:    
    GUI.setStatusText(" READY FOR INJECTION: Verify description, inject sample, then press 'Injected'.")
    sleep(0.8)
    NEXT="State3"
"""

[State3]
action="""
if not GUI.getManualButtonState():
    NEXT="StateSendValveSequence"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="State2"
"""

[StateSendValveSequence]
action="""
now = localtime()
injDate = strftime("%Y/%m/%d",now)
injTime = strftime("%H:%M:%S",now)
sampleNum = GUI.getManualSampleNumber()
sampDict = dict(date=injDate,time=injTime,sampleNum=sampleNum)
GUI.setStatusText("")
GUI.setManualButtonText("Processing...")
logFunc("Sample %d has been injected\n" % sampleNum)
logFunc("Start gas sample preparation\n")
setValveStep("samplePrep")
t = 0
NEXT="StateWaitForStartAnalysis"
"""

[StateWaitForStartAnalysis]
action="""
if not atValveStep("sample"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForStartAnalysis"
else:
    NEXT="StateStartBatchAnalysis"
"""

[StateStartBatchAnalysis]
action="""
logFunc("\nSending sample to analyzer\n")
t = 0
NEXT="StateWaitForGasSamplingDone"
"""

[StateWaitForGasSamplingDone]
action = """
if not atValveStep("done"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateWaitForGasSamplingDone"
else:
    logFunc("\nGas sampling complete\n")
    NEXT="StateCheckChangeSeptum"
"""

[StateCheckChangeSeptum]
action="""
if GUI.getChangeSeptumButtonState():
    NEXT="StateAssertStart"
else: # Change septum requested
    setValveStep("septumVent")
    NEXT = "StateChangeSeptum"
"""

[StateChangeSeptum]
action = """
if not atValveStep("septumChange"):
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    NEXT="StateChangeSeptum"
else:
    logFunc("\nReady to change septum\n")
    GUI.setChangeSeptumButtonText("Septum Changed")
    GUI.enableChangeSeptumButton()
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateNotifyChangeSeptum]
action="""
GUI.setStatusText(" CHANGE SEPTUM: Press 'Septum Changed' when complete.")
sleep(0.8)
NEXT="StateNotifyChangeSeptumFlash"
"""

[StateNotifyChangeSeptumFlash]
action="""
if not GUI.getChangeSeptumButtonState():
    NEXT="StateChangeSeptumDone"
else:
    GUI.setStatusText("")
    sleep(0.2)
    NEXT="StateNotifyChangeSeptum"
"""
    
[StateChangeSeptumDone]
action="""
GUI.setStatusText("")
GUI.setChangeSeptumButtonText("Change Septum")
GUI.enableChangeSeptumButton()
NEXT="StateAssertStart"
"""

[StateAssertStart]
action="""
logFunc("Cleaning evaporator, waiting for results\n")
setValveStep("init")
waitSteps = 0
t = 0
NEXT="StateWaitForAnalysisDone"
"""

[StateWaitForAnalysisDone]
action = """
FITTER.getBufferFirst()
if not FITTER.results:
    if t % 30 == 0: logFunc("\n%3d s " % t)
    t += 1
    logFunc(".")
    sleep(1.0)
    waitSteps += 1
    if waitSteps < analysisTimeout:
        NEXT="StateWaitForAnalysisDone"
    else:
        fileDataFunc(sampDict)
        logFunc("\nAnalysis timeout\n")
        NEXT="StateWaitEvaporatorClean"
else:
    FITTER.results["Good"] = 17000.0 <= FITTER.results["H2O_mean"] <= 23000.0
    FITTER.results.update(sampDict)
    fileDataFunc(FITTER.results)
    logFunc("\nAnalysis done\n")
    NEXT="StateWaitEvaporatorClean"
"""

[StateDone]
action="""
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
