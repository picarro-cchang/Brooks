############################################################################################################################################
#Date:             Date Modified:          Notes:               
#20140711          E.Lai                   iCO2-iCH4: 2D CH4-H2O Analysis Test
#20140714          E.Lai                   Updated coordinator to include FCDS/FDDS analyzer types
############################################################################################################################################
[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/2DInterferenceHP-CH4_H2O/2DInterferenceHP-CH4_H2O"

[Output]
#iCH4 Param
HP_12CH4            = HP_12CH4,             %10.4f
HP_13CH4            = HP_13CH4,             %10.4f
13CH4               = 13CH4,                %10.4f
HP_Delta_iCH4_Raw   = HP_Delta_iCH4_Raw,    %10.4f
H2O                 = H2O,                  %10.4f
peak30_spec         = peak30_spec,          %10.4f
peakheight_5        = peakheight_5,         %10.4f
ch4_splinemax       = ch4_splinemax,        %10.4f
#MFC Param
Mode                = Mode,                 %15s
SeqIdx              = SeqIdx,               %10s
ActFlow1            = ActFlow1,             %10.2f
ActFlow2            = ActFlow2,             %10.2f
ActFlow3            = ActFlow3,             %10.2f
ActFlow4            = ActFlow4,             %10.2f
SetFlow1            = SetFlow1,             %10.2f
SetFlow2            = SetFlow2,             %10.2f
SetFlow3            = SetFlow3,             %10.2f
SetFlow4            = SetFlow4,             %10.2f
#Comment
Comment             = Comment,              %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from pylab import*
from ctypes import*
from os import makedirs
from os.path import exists, join 
from configobj import ConfigObj
import subprocess
import time

#PSAPI.DLL
psapi = windll.psapi
#Kernel32.DLL
kernel = windll.kernel32
#AnalyzerType
analyzerType = getAnalyzerType()

#User selects analyzer type
if analyzerType in ["CFIDS"]:
    logFunc("Instrument is an iCO2,iCH4 analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    clearMeasBuffer()
    NEXT = "StateStartParameters"
elif analyzerType in ["FCDS", "FDDS"]:
    logFunc("Instrument is an iCH4 analyzer\n")
    logFunc("Now will wait for instrument to start measuring\n")
    #Turn on H2O valve (v2)
    setValveMask(2)
    clearMeasBuffer()
    NEXT = "StateStartParameters"
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateStartParameters]
action = """
#Test State Count
stateTestMeasBufferCount = 1
stateCavityPressureCount = 2
stateEtalonCertCount = 3
stateInstrAdjustCount = 4
stateH2OCheckCount = 5
stateFlowDone = 6
stateDataGenAve = 7
stateDataCollectComplete = 8
stateRestart = 9
stateDataCollectCount = 10

#Initial CMAdjust Points
if analyzerType in ["CFIDS"]:
    adjustParam = ["adjust_5", "adjust_30", "adjust_0"]
elif analyzerType in ["FCDS", "FDDS"]:
    adjustParam = ["adjust_30", "adjust_5"]
NEXT = "StateMeasBuffer"
"""

[StateMeasBuffer]
action = """
try:
    setTagalongData("ClientState", 0.0)
    setTagalongData("TestStep", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
except Exception, err:
    logFunc("Cannot tag parameter into datastream\n")
    logFunc("Will try again\n")
    NEXT = "StateMeasBuffer"
if analyzerType in ["CFIDS"]:
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "adjust_30", "adjust_0", "HP_12CH4", "HP_13CH4", "H2O", "HP_Delta_iCH4_Raw", 
                                    "peak30_spec", "peakheight_5", "ch4_splinemax", "ClientState", "TestStep", "ReadyState", "SeqIdx"],200)
elif analyzerType in ["FCDS", "FDDS"]:
    setMeasBuffer("analyze_FBDS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_5", "adjust_30", "HP_12CH4", "13CH4", "H2O", "HP_Delta_iCH4_Raw", 
                                    "peak30_spec", "peakheight_5", "ch4_splinemax", "ClientState", "TestStep", "ReadyState", "SeqIdx"],200)
clearMeasBuffer()
logFunc("Insert status indicators for client status and state status\n")
setTagalongData("TestStep", stateTestMeasBufferCount)
NEXT = "StateTestMeasBuffer"
"""

[StateTestMeasBuffer]
action = """
meas = measGetBufferFirst()
#Verify Buffer has the right data parameters
if not meas or ("ReadyState" not in meas) or ("HP_Delta_iCH4_Raw" not in meas) or ("TestStep" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateTestMeasBuffer"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateTestMeasBufferCount:
        setTagalongData("ClientState", 1.0)
        setTagalongData("TestStep", 1.0)
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == 1.0:
        logFunc("Instrument is now measuring\n")
        logFunc("Now will wait for cavity pressure to stabilize\n")    
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateCavityPressureCount)
        cavityPressure = 0
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
    else:
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verify Cavity Pressure
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrCavityPressure"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateCavityPressureCount:
        cavityPress_meas = meas["CavityPressure"]
        if cavityPressure != 3:
            if abs(cavityPress_meas - 148.0) >= 0.05:
                cavityPressure = 0
                NEXT = "StateInstrCavityPressure"
            else:
                cavityPressure += 1
                NEXT = "StateInstrCavityPressure"
        else:
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
            NEXT = "StateInstrCavityPressure"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateCavityPressureCount:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr\n")
        logFunc("Now will wait for etalon temperature to stabilize\n")
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateEtalonCertCount)
        etalonStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
"""
    
[StateInstrEtalonTemp]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrEtalonTemp"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateEtalonCertCount:
        initTemp = meas["EtalonTemp"]
        sleep(10.0)
        etalMeas = measGetBufferFirst()
        etalTemp = etalMeas["EtalonTemp"]
        if etalonStart != 3:
            etalonDiff = abs(etalTemp - initTemp)
            if etalonDiff > 0.0005:
                etalonStart = 0
                NEXT = "StateInstrEtalonTemp"
            else:
                etalonStart += 1
                NEXT = "StateInstrEtalonTemp"
        else:
            setTagalongData("ClientState", 1.0)
            etalonStart = 0
            clearMeasBuffer()
            NEXT = "StateInstrEtalonTemp"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateEtalonCertCount:
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateInstrAdjustCount)
        logFunc("Etalon temp stabilized to nominal temp fo 45.0 C\n")
        logFunc("Now will confirm adjust values are acceptable magnitude\n")
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT="StateInstrAdjustCert"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateInstrAdjustCount:
        for adjustCount in range(len(adjustParam)):
            cmVal = meas[adjustParam[adjustCount]]
            if abs(cmVal) < 0.0003:
                instrAdjustStart += 1
        if instrAdjustStart == len(adjustParam):
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
        else:
            instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateInstrAdjustCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateH2OCheckCount)
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        logFunc("WLM Adjust magnitudes are acceptable\n")
        logFunc("Now will start H2O level check\n")
        clearMeasBuffer()        
        NEXT = "StateH2OCheck"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateH2OCheck"
else:
    checkH2OMeas.append(meas["H2O"])
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateH2OCheckCount:
        if (time.time() - h2oCheckTime) < 360.0:
            NEXT = "StateH2OCheck"
        else:
            aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
            if aveH2OVal < 2.5:
                GUI.popPause("Peak H2O level is too low. Please advise.\n","Client_2DInterfCO2")
                NEXT = "StateDone"
            else:
                setTagalongData("ClientState", 1.0)
                clearMeasBuffer()
                NEXT = "StateH2OCheck"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateH2OCheckCount:
        #Indication of test cycle type
        testType = "Measured"
        restartOccurred = False
        logFunc("H2O level check is suitable for test\n")
        logFunc("Now will commence Gas step sequence of 2D CO2 Interference test\n")
        clearMeasBuffer()
        NEXT = "StateDataArrayConfig"
    else:
        clearMeasBuffer()
        NEXT = "StateH2OCheck"
"""

[StateDataArrayConfig]
action = """
if analyzerType in ["CFIDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_FBDS", ["HP_12CH4", "HP_13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax", 
                                        "SeqIdx", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4",
                                        "TestStep", "ClientState", "ReadyState"],200)
        paramMeas = ["HP_12CH4", "HP_13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax", 
                     "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4"]
        paramMeasArray = {"HP_12CH4":[], "HP_13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[], 
                          "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"HP_12CH4":[], "HP_13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[],
                             "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_FBDS", ["HP_12CH4", "HP_13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax"],200)
elif analyzerType in ["FCDS", "FDDS"]:
    if restartOccurred == False:
        setMeasBuffer("analyze_FBDS", ["HP_12CH4", "13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax", 
                                        "SeqIdx", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4",
                                        "TestStep", "ClientState", "ReadyState"],200)
        paramMeas = ["HP_12CH4", "13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax", 
                     "SeqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "ActFlow4", "SetFlow1", "SetFlow2", "SetFlow3", "SetFlow4"]
        paramMeasArray = {"HP_12CH4":[], "13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[], 
                          "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
        aveParamMeasArray = {"HP_12CH4":[], "13CH4":[], "HP_Delta_iCH4_Raw":[], "H2O":[], "peak30_spec":[], "peakheight_5":[], "ch4_splinemax":[],
                             "SeqIdx":[], "SetFlow1":[], "SetFlow2":[], "SetFlow3":[], "SetFlow4":[], "ActFlow1":[], "ActFlow2":[], "ActFlow3":[], "ActFlow4":[]}
    elif restartOccurred == True:
        setMeasBuffer("analyze_FBDS", ["HP_12CH4", "13CH4", "HP_Delta_iCH4_Raw", "H2O", "peak30_spec", "peakheight_5", "ch4_splinemax"],200)

#MFC Step Cycle Start Integers
if restartOccurred == False:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    aveDone = False
    NEXT = "StateDataCollect"
else:
    NEXT = "StateRestartMeasCheck"
"""

[StateRestartMeasCheck]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateRestartMeasCheck"
else:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    restartOccurred = False
    NEXT = "StateDataArrayConfig"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas) or ("ReadyState" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollect"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataCollectCount:
        for x in paramMeas:
            paramMeasArray[x].append(meas[x])
        NEXT = "StateDataCollect"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 2.0 and meas["TestStep"] == stateDataCollectCount:
        setTagalongData("TestStep", stateDataCollectComplete)
        setTagalongData("ClientState", 2.0)        
        NEXT = "StateDataCollectComplete"
    elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateFlowDone:
        NEXT = "StateDataMultiLinearFit"
    else:
        NEXT = "StateDataCollect"
"""

[StateDataCollectComplete]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollectComplete"
else:
    if meas["ClientState"] == 2.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataCollectComplete:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateDataGenAve)
        clearMeasBuffer()
        NEXT = "StateDataGenAve"
    else:
        NEXT = "StateDataCollectComplete"
"""

[StateDataGenAve]
action = """
#Definition to calculate mean of each conc step 
def aveData():
    for a in paramMeas:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataGenAve"
else:
    if aveDone == False:
        #Server will check clients' states
        paramDictList = []
        calVal = aveData()
        paramDict = dict(zip(paramMeas, paramDictList))
        paramDict["Comment"] = testType
        fileDataFunc(dict(paramDict))
        paramDictList[:] = []
        aveDone = True
        NEXT = "StateDataGenAve"
    elif aveDone == True:
        if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataGenAve:
            setTagalongData("ClientState", 1.0)
            NEXT = "StateDataGenAve"
        elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataGenAve:
            aveDone = False
            #Increase Step Count
            stateDataCollectCount += 1
            setTagalongData("TestStep", stateDataCollectCount)
            #Reset ClientState
            setTagalongData("ClientState", 0.0)
            NEXT = "StateDataCollect"
        else:
            NEXT = "StateDataGenAve"
"""

[StateDataMultiLinearFit]
action = """
peak30Bilinear = []
for a in range(len(aveParamMeasArray["peak30_spec"])):
    peak30Bilinear.append((aveParamMeasArray["peakheight_5"][a]*aveParamMeasArray["peak30_spec"][a]))
pPrime = [1]*len(aveParamMeasArray["ch4_splinemax"])
valueMatrix = column_stack([aveParamMeasArray["ch4_splinemax"], aveParamMeasArray["peak30_spec"], peak30Bilinear, pPrime])
coeff = linalg.lstsq(valueMatrix, aveParamMeasArray["peakheight_5"])
#Append Coefficients to .csv file
ch4SplineMaxCoeff = "%s"%(-coeff[0][0])
peak30SpecCoeff = "%s"%(-coeff[0][1])
peak30BilinearCoeff = "%s"%(-coeff[0][2])
yIntercept = "%s"%(-coeff[0][3])
fileDataFunc(dict(Comment = "Signs have already been negated\n"))
fileDataFunc(dict(Comment = "CH4 SplineMax coefficient: %s\n"%(ch4SplineMaxCoeff)))
fileDataFunc(dict(Comment = "Peak30 coefficient: %s\n"%(peak30SpecCoeff)))
fileDataFunc(dict(Comment = "Peak30_Spec * Peakheight_5 bilinear coefficient: %s\n"%(peak30BilinearCoeff)))
fileDataFunc(dict(Comment = "Y-Intercept coefficient: %s\n"%(yIntercept)))
logFunc("Signs have already been negated\n")
logFunc("CH4 SplineMax coefficient: %s\n"%(ch4SplineMaxCoeff))
logFunc("Peak30 coefficient: %s\n"%(peak30SpecCoeff))
logFunc("Peak30_Spec and Peakheight_5 bilinear coefficient: %s\n"%(peak30BilinearCoeff))
logFunc("Y-Intercept coefficient: %s\n"%(yIntercept))
NEXT = "StatePlotResults"
"""

[StatePlotResults]
action = """
p_pH2OVal = []
outputDir = r"C:/Picarro/G2000/InstrConfig/Integration/2DInterferenceHP-CH4_H2O"
timeStr = time.strftime("%Y%m%d_%H%M%S")
#Plot configuration
figure()
subplot(211)
hp12CH4Sensitivity = polyfit(aveParamMeasArray["HP_12CH4"], aveParamMeasArray["HP_Delta_iCH4_Raw"],1)
curveFitCH4 = polyval(hp12CH4Sensitivity, aveParamMeasArray["HP_12CH4"])
plot(aveParamMeasArray["HP_12CH4"], aveParamMeasArray["HP_Delta_iCH4_Raw"], "o", aveParamMeasArray["HP_12CH4"], curveFitCH4)
text(float(0.15), (max(aveParamMeasArray["HP_Delta_iCH4_Raw"])- float(0.75)), "HP Delta Raw Sensitivity to HP_12CH4: %f per mil/ppm HP_12CH4" %(round(hp12CH4Sensitivity[0],4)), fontsize = 10, fontweight = "bold")   
xlabel("HP_12CH4 ", color = "b")
ylabel("HP_Delta_iCH4_Raw (permil)", color = "b")
subplot(212)
h2oSensitivity = polyfit(aveParamMeasArray["H2O"], aveParamMeasArray["HP_Delta_iCH4_Raw"],1)
curveFitCH4 = polyval(h2oSensitivity, aveParamMeasArray["H2O"])
plot(aveParamMeasArray["H2O"], aveParamMeasArray["HP_Delta_iCH4_Raw"], "o", aveParamMeasArray["H2O"], curveFitCH4)
text(float(0.15), (max(aveParamMeasArray["HP_Delta_iCH4_Raw"])- float(0.75)), "HP Delta Raw Sensitivity to H2O: %f per mil/percent volume H2O" %(round(h2oSensitivity[0],4)), fontsize = 10, fontweight = "bold")   
xlabel("H2O ", color = "b")
ylabel("HP_Delta_iCH4_Raw (permil)", color = "b")
savefig((join(outputDir,"2D(CH4_H2O)-InterferencePlot" + timeStr + ".png")))
if testType == "Measured":
    NEXT = "StateCoeffImplement"
elif testType == "Validation":
    NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
#.Ini file of Before and Proposed Values
correctFitFile = r"C:/Picarro/G2000/InstrConfig/Integration/2DInterferenceHP-CH4_H2O/%s-2D_CH4_H2O-CorrectedFits_%s.ini" %(analyzerType, timeStr)
corrConfig = ConfigObj(correctFitFile)

# Write new Values to .ini File
configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal.ini"
config = ConfigObj(configPath)
#Old Values
oldFitValues = {"Peak5_water_lin_low_conc": "%s" %(config["Data"]["Peak5_water_lin_low_conc"]),
                "Peak5_water_bilin_low_conc": "%s" %(config["Data"]["Peak5_water_bilin_low_conc"])}
corrConfig["Old Fit Values"] = oldFitValues
corrConfig.write()
#New Fit Values
config["Data"]["Peak5_water_lin_low_conc"] = peak30SpecCoeff
config["Data"]["Peak5_water_bilin_low_conc"] = peak30BilinearCoeff
config.write()
#Write New Values to Summary Coefficient Test File
newFitValues = {"Peak5_water_lin_low_conc": "%s"%(str(peak30SpecCoeff)),
                "Peak5_water_bilin_low_conc": "%s"%(str(peak30BilinearCoeff))}
corrConfig["New Fit Values"] = newFitValues
corrConfig.write()
NEXT = "StateRestart"
"""

[StateRestart]
action = """

class exeRestart():
    def __init__(self, exeName, retryCountLimit):
        self.analyzerSoftwareEXE = exeName
        self.launchStatus = False
        self.programList = []
        self.retryCountLimit = retryCountLimit
        self.retryCount = 0
        self.restartAnalyzerSoftware()

    def restartAnalyzerSoftware(self):
        subprocess.Popen("C:\Picarro\G2000\Hostexe\SupervisorLauncher.exe -a -c C:\Picarro\G2000\AppConfig\Config\Utilities\SupervisorLauncher.ini", shell = False)
        time.sleep(30.0)
        self.launchStatus = True
        self.EnumProcesses()

    def EnumProcesses(self):
        arr = c_ulong * 256
        lpidProcess = arr()
        cb = sizeof(lpidProcess)
        cbNeeded = c_ulong()
        hModule = c_ulong()
        count = c_ulong()
        modname = c_buffer(30)
        PROCESS_QUERY_INFORMATION = 0x0400
        PROCESS_VM_READ = 0x0010
        
        #Call Enumprocesses to get hold of process id's
        psapi.EnumProcesses(byref(lpidProcess), cb, byref(cbNeeded))
        #Number of processes returned
        nReturned = cbNeeded.value/sizeof(c_ulong())
        pidProcess = [i for i in lpidProcess][:nReturned]

        for pid in pidProcess:
            #Get handle to the process based on PID
            hProcess = kernel.OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, False, pid)
            if hProcess:
                psapi.EnumProcessModules(hProcess, byref(hModule), sizeof(hModule), byref(count))
                psapi.GetModuleBaseNameA(hProcess, hModule.value, modname, sizeof(modname))
                self.programList.append("".join([ i for i in modname if i != "\x00"]))
                #Clean up
                for i in range(modname._length_):
                    modname[i]="\x00"
                kernel.CloseHandle(hProcess)
        self.checkList()

    def checkList(self):
        if self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) in self.programList:
            logFunc("Relaunch was successful!\n")
            return True
        elif self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) not in self.programList:
            logFunc("Relaunch not successful. Will try again\n")
            self.launchStatus = False
            self.retryCount += 1
            if self.retryCount != self.retryCountLimit:
                self.restartAnalyzerSoftware()
            else:
                logFunc("All relaunch attempts were not successful-Please advise\n")
                return False
#Instantiate exeRestart
try:
    start = exeRestart("supervisor.exe", 2)
    if start.checkList() == True:
        sleep(60.0)
        testType = "Validation"
        restartOccurred = True
        #Clear data from dictionaries
        for x in paramMeas:
            aveParamMeasArray[x][:] = []
            paramMeasArray[x][:] = []
        NEXT = "StateDataArrayConfig"
    else:
        attemptCount += 1
        if attemptCount < 2:
            NEXT = "StateRestart"
        else:
            logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
            NEXT = "StateDone"
except Exception, err:
    logFunc("%r"%(err))
    attemptCount += 1
    if attemptCount < 2:
        NEXT = "StateRestart"
    else:
        logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
        NEXT = "StateDone"
"""

[StateDone]
action="""
#Set indicators to 0 when done
setTagalongData("ClientState", 0.0)
setTagalongData("TestStep", 0.0)
setTagalongData("ReadyState", 0.0)
setTagalongData("SeqIdx", 0.0)
GUI.popInfo("2D Interference Test is now complete\n","CFIDS,F(C&D)DS - Client2DInterference-CH4_H2O")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""