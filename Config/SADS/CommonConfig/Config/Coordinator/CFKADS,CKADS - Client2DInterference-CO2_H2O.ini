############################################################################################################################################
#Date:             Date Modified:          Notes:               
#20130309          E.Lai                   iCO2: 2D Water & H2O Analysis Test
#20140226          E.Lai                   Updated coordinator to work with 1.4.0-22
#20140531          E.Lai                   Updated coordinator to include CKADS analyzer
#20150611          E.Lai                   Updated coordinator to include an option for analyzer flow
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "analyzer_pressure", "Pressure(Normal or Low)", "Normal"

[Mode]
inject_mode=automatic

[Files]
output = 'C:/Picarro/G2000/InstrConfig/Integration/2DInterference_CO2_H2O/2DInterference-CO2_H2O'

[Output]
#iCO2 Param
12CO2               = 12CO2,                %10.4f
13CO2               = 13CO2,                %10.4f
Delta_Raw           = Delta_Raw,            %10.4f
H2O                 = H2O,                  %10.4f
peak87_baseave_spec = peak87_baseave_spec,  %10.4f
peak88_baseave      = peak88_baseave,       %10.4f
peak_75             = peak_75,              %10.4f
#CFKADS, CKADS Param
peak_14             = peak_14,              %10.4f
b_h2o_pct           = b_h2o_pct,            %10.4f
peak84_raw          = peak84_raw,           %10.4f
CH4                 = CH4,                  %10.4f
CO                  = CO,                   %10.4f
CO2                 = CO2,                  %10.4f
#MFC Param
SeqIdx              = SeqIdx,               %10s
ActFlow1            = ActFlow1,             %10.2f
ActFlow2            = ActFlow2,             %10.2f
ActFlow3            = ActFlow3,             %10.2f
SetFlow1            = SetFlow1,             %10.2f
SetFlow2            = SetFlow2,             %10.2f
SetFlow3            = SetFlow3,             %10.2f
#Comment
Comment             = Comment,              %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = '''
#Import Python Modules
from numpy import*
from pylab import*
from ctypes import*
from os import makedirs
from os.path import exists, join 
from configobj import ConfigObj
import subprocess
import time

#PSAPI.DLL
psapi = windll.psapi
#Kernel32.DLL
kernel = windll.kernel32
#AnalyzerType
analyzerType = getAnalyzerType()

#User selects analyzer type
if analyzerType in ['CBDS', 'CFFDS', 'CFGDS']:
    logFunc('Instrument is an iCO2 (C12,C13) analyzer\n')
    logFunc('Now will wait for instrument to start measuring\n')
    clearMeasBuffer()
    NEXT = 'StateStartParameters'  
elif analyzerType in ['CFKADS', 'CFKBDS']:
    logFunc('Instrument is a CFKADS (CO2,CH4,H2O,CO) analyzer\n')
    logFunc('Now will wait for instrument to start measuring\n')
    clearMeasBuffer()
    NEXT = 'StateStartParameters'
elif analyzerType in ['CKADS']:
    logFunc('Instrument is a CKADS (CO2,H2O,CO) analyzer\n')
    logFunc('Now will wait for instrument to start measuring\n')
    clearMeasBuffer()
    NEXT = 'StateStartParameters'
else:
    logFunc('Instrument Type is not supported\n')
    NEXT='StateDone'    
'''

[StateStartParameters]
action = '''
#Test State Count
stateTestMeasBufferCount = 1
stateCavityPressureCount = 2
stateEtalonCertCount = 3
stateCOSquishCount = 4
stateInstrAdjustCount = 5
stateH2OCheckCount = 6
stateFlowDone = 7
stateDataGenAve = 8
stateDataCollectComplete = 9
stateRestart = 10
stateDataCollectCount = 11

#Initial CMAdjust Points
if analyzerType in ['CFKADS', 'CFKBDS']:
    adjustParam = ['co2_adjust', 'ch4_adjust', 'h2o_adjust', 'co_adjust']
elif analyzerType in ['CFFDS', 'CFGDS']:
    adjustParam = ['adjust_87', 'adjust_88', 'adjust_75']
elif analyzerType in ['CKADS']:
    adjustParam = ['co2_adjust', 'co_adjust']
NEXT = 'StateMeasBuffer'
'''

[StateMeasBuffer]
action = '''
try:
    setTagalongData('ClientState', 0.0)
    setTagalongData('TestStep', 0.0)
    setTagalongData('ReadyState', 0.0)
    setTagalongData('SeqIdx', 0.0)
    setTagalongData('ActFlow1', 0.0)
    setTagalongData('ActFlow2', 0.0)
    setTagalongData('ActFlow3', 0.0)
    setTagalongData('ActFlow4', 0.0)
    setTagalongData('SetFlow1', 0.0)
    setTagalongData('SetFlow2', 0.0)
    setTagalongData('SetFlow3', 0.0)
    setTagalongData('SetFlow4', 0.0)
except Exception, err:
    logFunc('Cannot tag parameter into datastream\n')
    logFunc('Will try again\n')
    NEXT = 'StateMeasBuffer'
if analyzerType in ['CFKADS', 'CFKBDS']:
    setMeasBuffer('analyze_CFKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 'co2_adjust', 'ch4_adjust', 
                                        'co_adjust', 'h2o_adjust', 'CH4', 'CO', 'CO2', 'co_squish', 'H2O', 'ReadyState', 'ClientState', 'TestStep', 'SeqIdx'],200)
elif analyzerType in ['CFFDS', 'CFGDS']:
    setMeasBuffer('analyze_iCO2', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'adjust_87', 'adjust_88', 'adjust_75', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75',
                                    '12CO2', '13CO2', 'H2O', 'Delta_Raw', 'ReadyState', 'ClientState', 'TestStep', 'SeqIdx'],200)
elif analyzerType in ['CKADS']:
    setMeasBuffer('analyze_CKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 'co2_adjust', 
                                        'co_adjust', 'CO', 'CO2', 'co_squish', 'H2O', 'ReadyState', 'ClientState', 'TestStep', 'SeqIdx'],200)
clearMeasBuffer()
logFunc('Insert status indicators for client status and state status\n')
setTagalongData('TestStep', stateTestMeasBufferCount)
NEXT = 'StateTestMeasBuffer'
'''

[StateTestMeasBuffer]
action = '''
meas = measGetBufferFirst()
if analyzerType in ['CFFDS', 'CFGDS']:
    species = '13CO2'
elif analyzerType in ['CFKADS', 'CFKBDS', 'CKADS']:
    species = 'CO'

#Verify Buffer has the right data parameters
if not meas or ('ReadyState' not in meas) or (species not in meas) or ('TestStep' not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateTestMeasBuffer'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateTestMeasBufferCount:
        setTagalongData('ClientState', 1.0)
        setTagalongData('TestStep', 1.0)
        clearMeasBuffer()
        NEXT = 'StateTestMeasBuffer'
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == 1.0:
        logFunc('Instrument is now measuring\n')
        logFunc('Now will wait for cavity pressure to stabilize\n')    
        setTagalongData('ClientState', 0.0)
        setTagalongData('TestStep', stateCavityPressureCount)
        cavityPressure = 0
        clearMeasBuffer()
        NEXT = 'StateInstrCavityPressure'
    else:
        clearMeasBuffer()
        NEXT = 'StateTestMeasBuffer'
'''

[StateInstrCavityPressure]
action = '''
meas = measGetBufferFirst()
#Verify Cavity Pressure
if analyzerType in ['CBDS', 'CFFDS', 'CFGDS']:
    a = 'Delta_Raw'
else:
    a = 'CO'
    analyzer_pressure = str(editParamDict["analyzer_pressure"])
if analyzer_pressure == "Normal":
    pressureSetpoint = 140.0
else:
    pressureSetpoint = 40.0

if not meas or (a not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateInstrCavityPressure'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateCavityPressureCount:
        cavityPress_meas = meas['CavityPressure']
        if cavityPressure != 3:
            if abs(cavityPress_meas - pressureSetpoint) >= 0.05:
                cavityPressure = 0
                NEXT = 'StateInstrCavityPressure'
            else:
                cavityPressure += 1
                NEXT = 'StateInstrCavityPressure'
        else:
            setTagalongData('ClientState', 1.0)
            clearMeasBuffer()
            NEXT = 'StateInstrCavityPressure'
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateCavityPressureCount:
        logFunc('Cavity Pressure has reached setpoint of 140 Torr\n')
        logFunc('Now will wait for etalon temperature to stabilize\n')
        setTagalongData('ClientState', 0.0)
        setTagalongData('TestStep', stateEtalonCertCount)
        etalonStart = 0
        clearMeasBuffer()
        NEXT = 'StateInstrEtalonTemp'
    else:
        clearMeasBuffer()
        NEXT = 'StateInstrCavityPressure'
'''
    
[StateInstrEtalonTemp]
action = '''
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateInstrEtalonTemp'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateEtalonCertCount:
        initTemp = meas['EtalonTemp']
        sleep(10.0)
        etalMeas = measGetBufferFirst()
        etalTemp = etalMeas['EtalonTemp']
        if etalonStart != 3:
            etalonDiff = abs(etalTemp - initTemp)
            if etalonDiff > 0.0005:
                etalonStart = 0
                NEXT = 'StateInstrEtalonTemp'
            else:
                etalonStart += 1
                NEXT = 'StateInstrEtalonTemp'
        else:
            setTagalongData('ClientState', 1.0)
            etalonStart = 0
            clearMeasBuffer()
            NEXT = 'StateInstrEtalonTemp'
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateEtalonCertCount:
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        setTagalongData('ClientState', 0.0)
        #setTagalongData('TestStep', stateCOSquishCount)
        setTagalongData('TestStep', stateInstrAdjustCount)
        logFunc('Etalon temp stabilized to nominal temp fo 45.0 C\n')
        #logFunc('Now will confirm CO squish term is within tolerance specification\n')
        #if analyzerType in ['CFKADS', 'CFKBDS', 'CKADS']:
        #    logFunc('Now will confirm CO squish term is within tolerance specification\n')
        #    NEXT = 'StateCOSquish'
        #else:
        #    logFunc('Now will confirm adjust values are acceptable magnitude\n')
        #    NEXT = 'StateInstrAdjustCert'
        logFunc('Now will confirm adjust values are acceptable magnitude\n')
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = 'StateInstrAdjustCert'
    else:
        clearMeasBuffer()
        NEXT = 'StateInstrEtalonTemp'
'''

[StateCOSquish]
action = '''
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateCOSquish'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateCOSquishCount:
        currTime = time.time()
        if (currTime - squishStartTime) < 300.0:
            squishList.append(meas['co_squish'])
        else:
            squishAve = average(squishList)
            if squishAve < 0.0025:
                squishCount += 1
                squishStartTime = currTime
                if squishCount == 1:
                    squishList[:] = []
                    setTagalongData('ClientState', 1.0)
                    NEXT = 'StateCOSquish'
                else:
                    NEXT = 'StateCOSquish'
            else:
                squishCount = 0
                squishList[:] = []
                clearMeasBuffer()
                NEXT = 'StateCOSquish'
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateCOSquishCount:
        setTagalongData('ClientState', 0.0)
        setTagalongData('TestStep', stateInstrAdjustCount)
        logFunc('CO Squish is within tolerance\n')
        logFunc('Now will confirm adjust values are acceptable magnitude\n')
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = 'StateInstrAdjustCert'
    else:
        clearMeasBuffer()
        NEXT = 'StateCOSquish'
'''

[StateInstrAdjustCert]
action = '''
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT='StateInstrAdjustCert'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateInstrAdjustCount:
        for adjustCount in range(len(adjustParam)):
            cmVal = meas[adjustParam[adjustCount]]
            if abs(cmVal) < 0.0003:
                instrAdjustStart += 1
        if instrAdjustStart == len(adjustParam):
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
        else:
            instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateInstrAdjustCount:
        setTagalongData('ClientState', 0.0)
        setTagalongData('TestStep', stateH2OCheckCount)
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        logFunc('WLM Adjust magnitudes are acceptable\n')
        logFunc('Now will start H2O level check\n')
        clearMeasBuffer()        
        NEXT = 'StateH2OCheck'
    else:
        clearMeasBuffer()
        NEXT = 'StateInstrAdjustCert'
'''

[StateH2OCheck]
action = '''
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateH2OCheck'
else:
    checkH2OMeas.append(meas['H2O'])
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateH2OCheckCount:
        if (time.time() - h2oCheckTime) < 360.0:
            NEXT = 'StateH2OCheck'
        else:
            aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
            if aveH2OVal < 2.5:
                GUI.popPause('Peak H2O level is too low. Please advise.\n','Client_2DInterfCO2')
                NEXT = 'StateDone'
            else:
                setTagalongData('ClientState', 1.0)
                clearMeasBuffer()
                NEXT = 'StateH2OCheck'
    elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateH2OCheckCount:
        #Indication of test cycle type
        testType = 'Measured'
        restartOccurred = False
        logFunc('H2O level check is suitable for test\n')
        logFunc('Now will commence Gas step sequence of 2D CO2 Interference test\n')
        clearMeasBuffer()
        NEXT = 'StateDataArrayConfig'
    else:
        clearMeasBuffer()
        NEXT = 'StateH2OCheck'
'''

[StateDataArrayConfig]
action = '''
if analyzerType in ['CFKADS', 'CFKBDS']:
    if restartOccurred == False:
        setMeasBuffer('analyze_CFKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 
                                            'CH4', 'CO', 'CO2', 'co_squish', 'H2O', 'SetFlow1', 'SetFlow2', 'SetFlow3', 
                                            'SeqIdx', 'ActFlow1', 'ActFlow2', 'ActFlow3', 'TestStep', 'ClientState', 'ReadyState'],200)
        paramMeas = ['peak_14', 'b_h2o_pct', 'peak84_raw', 'CH4', 'CO2', 'CO', 'SeqIdx', 
                        'SetFlow1', 'SetFlow2', 'SetFlow3', 'ActFlow1', 'ActFlow2', 'ActFlow3']
        paramMeasArray = {'peak_14':[], 'b_h2o_pct':[], 'peak84_raw':[], 'CH4':[], 'CO2':[], 'CO':[], 
                            'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
        aveParamMeasArray = {'peak_14':[], 'b_h2o_pct':[], 'peak84_raw':[], 'CH4':[], 'CO2':[], 'CO':[], 
                                'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
    elif restartOccurred == True:
        setMeasBuffer('analyze_CFKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 
                                            'CH4', 'CO', 'CO2', 'co_squish', 'H2O'],200)
elif analyzerType in ['CFFDS', 'CFGDS']:
    if restartOccurred == False:
        setMeasBuffer('analyze_iCO2', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75',
                                        '12CO2', '13CO2', 'H2O', 'CH4', 'Delta_Raw', 'SeqIdx', 'SetFlow1', 'SetFlow2', 'SetFlow3', 
                                        'ActFlow1', 'ActFlow2', 'ActFlow3', 'TestStep', 'ClientState', 'ReadyState'],200)
        paramMeas = ['12CO2', '13CO2', 'CH4', 'H2O', 'Delta_Raw', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75', 'SeqIdx', 
                        'SetFlow1', 'SetFlow2', 'SetFlow3', 'ActFlow1', 'ActFlow2', 'ActFlow3']
        paramMeasArray = {'12CO2':[], '13CO2':[], 'CH4':[], 'H2O':[], 'Delta_Raw':[], 'peak87_baseave_spec':[], 'peak88_baseave':[], 'peak_75':[], 
                            'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
        aveParamMeasArray = {'12CO2':[], '13CO2':[], 'CH4':[], 'H2O':[], 'Delta_Raw':[], 'peak87_baseave_spec':[], 'peak88_baseave':[], 'peak_75':[], 
                            'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
    elif restartOccurred == True:
        setMeasBuffer('analyze_iCO2', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak87_baseave_spec', 'peak88_baseave', 'peak_75',
                                        '12CO2', '13CO2', 'H2O', 'CH4'],200)

elif analyzerType in ['CKADS']:
    if restartOccurred == False:
        setMeasBuffer('analyze_CKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 
                                            'CO', 'CO2', 'co_squish', 'H2O', 'SeqIdx', 'SetFlow1', 'SetFlow2', 'SetFlow3', 
                                            'ActFlow1', 'ActFlow2', 'ActFlow3', 'TestStep', 'ClientState', 'ReadyState'],200)
        paramMeas = ['peak_14', 'b_h2o_pct', 'peak84_raw', 'CO2', 'CO', 'SeqIdx', 
                        'SetFlow1', 'SetFlow2', 'SetFlow3', 'ActFlow1', 'ActFlow2', 'ActFlow3']
        paramMeasArray = {'peak_14':[], 'b_h2o_pct':[], 'peak84_raw':[], 'CO2':[], 'CO':[], 
                            'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
        aveParamMeasArray = {'peak_14':[], 'b_h2o_pct':[], 'peak84_raw':[], 'CO2':[], 'CO':[], 
                                'SeqIdx':[], 'SetFlow1':[], 'SetFlow2':[], 'SetFlow3':[], 'ActFlow1':[], 'ActFlow2':[], 'ActFlow3':[]}
    elif restartOccurred == True:
        setMeasBuffer('analyze_CKADS', ['EtalonTemp', 'DasTemp', 'CavityPressure', 'peak84_raw', 'b_h2o_pct', 'peak_14', 
                                            'CO', 'CO2', 'co_squish', 'H2O'],200)

#MFC Step Cycle Start Integers
if restartOccurred == False:
    clearMeasBuffer()
    setTagalongData('TestStep', stateDataCollectCount)
    setTagalongData('ClientState', 0.0)
    aveDone = False
    NEXT = 'StateDataCollect'
else:
    NEXT = 'StateRestartMeasCheck'
'''

[StateRestartMeasCheck]
action = '''
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateRestartMeasCheck'
else:
    clearMeasBuffer()
    setTagalongData('TestStep', stateDataCollectCount)
    setTagalongData('ClientState', 0.0)
    setTagalongData('ReadyState', 0.0)
    setTagalongData('SeqIdx', 0.0)
    setTagalongData('ActFlow1', 0.0)
    setTagalongData('ActFlow2', 0.0)
    setTagalongData('ActFlow3', 0.0)
    setTagalongData('ActFlow4', 0.0)
    setTagalongData('SetFlow1', 0.0)
    setTagalongData('SetFlow2', 0.0)
    setTagalongData('SetFlow3', 0.0)
    setTagalongData('SetFlow4', 0.0)
    restartOccurred = False
    NEXT = 'StateDataArrayConfig'
'''

[StateDataCollect]
action = '''
meas = measGetBufferFirst()
#Collect Data
if not meas or ('SeqIdx' not in meas) or ('ReadyState' not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateDataCollect'
else:
    if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateDataCollectCount:
        for x in paramMeas:
            paramMeasArray[x].append(meas[x])
        NEXT = 'StateDataCollect'
    elif meas['ClientState'] == 0.0 and meas['ReadyState'] == 2.0 and meas['TestStep'] == stateDataCollectCount:
        setTagalongData('TestStep', stateDataCollectComplete)
        setTagalongData('ClientState', 2.0)        
        NEXT = 'StateDataCollectComplete'
    elif meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateFlowDone:
        if analyzerType in ['CFKADS', 'CFKBDS', 'CKADS']:
            NEXT = 'StateDataCOMultiLinearFit'
        elif analyzerType in ['CFFDS', 'CFGDS']:
            NEXT = 'StateDataCBMultiLinearFit'
    else:
        NEXT = 'StateDataCollect'
'''

[StateDataCollectComplete]
action = '''
meas = measGetBufferFirst()
#Collect Data
if not meas or ('SeqIdx' not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateDataCollectComplete'
else:
    if meas['ClientState'] == 2.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateDataCollectComplete:
        setTagalongData('ClientState', 0.0)
        setTagalongData('TestStep', stateDataGenAve)
        clearMeasBuffer()
        NEXT = 'StateDataGenAve'
    else:
        NEXT = 'StateDataCollectComplete'
'''

[StateDataGenAve]
action = '''
#Definition to calculate mean of each conc step 
def aveData():
    for a in paramMeas:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

meas = measGetBufferFirst()
#Collect Data
if not meas or ('SeqIdx' not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = 'StateDataGenAve'
else:
    if aveDone == False:
        #Server will check clients' states
        paramDictList = []
        calVal = aveData()
        paramDict = dict(zip(paramMeas, paramDictList))
        paramDict['Comment'] = testType
        fileDataFunc(dict(paramDict))
        paramDictList[:] = []
        aveDone = True
        NEXT = 'StateDataGenAve'
    elif aveDone == True:
        if meas['ClientState'] == 0.0 and meas['ReadyState'] == 0.0 and meas['TestStep'] == stateDataGenAve:
            setTagalongData('ClientState', 1.0)
            NEXT = 'StateDataGenAve'
        elif meas['ClientState'] == 1.0 and meas['ReadyState'] == 1.0 and meas['TestStep'] == stateDataGenAve:
            aveDone = False
            #Increase Step Count
            stateDataCollectCount += 1
            setTagalongData('TestStep', stateDataCollectCount)
            #Reset ClientState
            setTagalongData('ClientState', 0.0)
            NEXT = 'StateDataCollect'
        else:
            NEXT = 'StateDataGenAve'
'''

[StateDataCBMultiLinearFit]
action = '''
crossproduct = []
pPrime = []
#Calculate Cross-product Term for Multi-Linear Regression
for crossVal in range(len(aveParamMeasArray['peak87_baseave_spec'])):
    crossproduct.append(aveParamMeasArray['peak87_baseave_spec'][crossVal]*aveParamMeasArray['peak_75'][crossVal])
    pPrime.append(1.0)
    
#Calculate Coefficients of multivariate Regression
valueMatrix = column_stack([aveParamMeasArray['peak87_baseave_spec'], aveParamMeasArray['peak_75'], crossproduct, pPrime])
coeff = linalg.lstsq(valueMatrix, aveParamMeasArray['peak88_baseave'])
#Append Coefficients to .csv file
peak88Offset = 'peak88Offset = %s'%(-coeff[0][3])
peak88WaterLinear  = 'peak88WaterLinear = %s'%(-coeff[0][1])
peak88Bilinear = 'peak88Bilinear = %s'%(-coeff[0][2])
fileDataFunc(dict(Comment = '%s\n'%(peak88Offset)))
fileDataFunc(dict(Comment = '%s\n'%(peak88WaterLinear)))
fileDataFunc(dict(Comment = '%s\n'%(peak88Bilinear)))
NEXT = 'StatePlotResults'
'''

[StateDataCOMultiLinearFit]
action = '''
#Calculate Fit of data points
def fitAnalyze(fitList, dataA, dataB, fitType):
    for coeffCount in range(0,8):
        fit = polyfit(dataA[coeffCount][0], dataB[coeffCount][0], fitType)
        fitList[coeffCount].append(fit)
        
def dataPartition(measList, dataList):
    for coeffCount in range(0,8):
        measList[coeffCount].append((dataList[(coeffCount*5):(coeffCount*5 + 5)]))
        
#Calculate AveCO2
peakConstant = 0.706630873
analyzePeak14 = [x*(peakConstant) for x in aveParamMeasArray['peak_14']]
aveCO2Steps = []
for co2Count in range(0,8):
    aveCO2Val = average(analyzePeak14[(co2Count*5):(co2Count*5 + 5)])
    aveCO2Steps.append(aveCO2Val)
        
#2nd Order Polynomial Fit of of peak84Raw, H2OPCT
peak84List = [[],[],[],[],[],[],[],[]]
h2oList = [[],[],[],[],[],[],[],[]]

peak84Part = dataPartition(peak84List, aveParamMeasArray['peak84_raw'])
h2oPart = dataPartition(h2oList, aveParamMeasArray['b_h2o_pct'])

quadCoeffList = [[],[],[],[],[],[],[],[]]

quadCoeff = fitAnalyze(quadCoeffList, h2oList, peak84List, 2)
#Average Quad Tern from Polynomial Fits
aveQuadCoeff = average((quadCoeffList[1][0][0], quadCoeffList[2][0][0], quadCoeffList[3][0][0]))  
#Linear Value after calculating out Polynomial Term
linearPeak84 = []
linearPeak84List = [[],[],[],[],[],[],[],[]]

for linPeakCount in range(len(aveParamMeasArray['peak84_raw'])):
    linearPeak84.append((aveParamMeasArray['peak84_raw'][linPeakCount] -((aveParamMeasArray['b_h2o_pct'][linPeakCount]**2)*aveQuadCoeff)))
linearPeak84Part = dataPartition(linearPeak84List, linearPeak84)
#Linear Fit    
linPeak84Coeff = [[],[],[],[],[],[],[],[]]

linFit = fitAnalyze(linPeak84Coeff, h2oList, linearPeak84List, 1)
#Linear Regression of first order polynomials
linearCO2Slopes = []

for co2SlopeCount in range(len(linPeak84Coeff)):
    linearCO2Slopes.append(linPeak84Coeff[co2SlopeCount][0][0])
(coH2OCO2Slope, coH2OCO2Intercept) = polyfit(aveCO2Steps, linearCO2Slopes, 1)  
#Append Comments to .csv file
fileDataFunc(dict(Comment = 'co_water_quadratic = %f'%(-aveQuadCoeff)))
fileDataFunc(dict(Comment = 'co_water_linear = %f'%(-coH2OCO2Intercept)))
fileDataFunc(dict(Comment = 'co_water_co2 = %f'%(-coH2OCO2Slope)))
NEXT = 'StatePlotResults'
'''

[StatePlotResults]
action = '''
p_pH2OVal = []
outputDir = r'C:/Picarro/G2000/InstrConfig/Integration/2DInterference_CO2_H2O'
timeStr = time.strftime('%Y%m%d_%H%M%S')
if analyzerType in ['CBDS', 'CFFDS', 'CFGDS']:
    p_pVal = min(aveParamMeasArray['Delta_Raw']) - max(aveParamMeasArray['Delta_Raw'])
    figure()
    subplot(211)
    stepCount = int(len(aveParamMeasArray['12CO2'])/5)
    for concCount in range(stepCount):
        plot(aveParamMeasArray['12CO2'][(5*concCount):((5*concCount)+5)], aveParamMeasArray['Delta_Raw'][(5*concCount):((5*concCount)+5)], 'o-')
    xlabel('C12 ppm', color = 'g')
    ylabel('Delta Raw (permil)', color = 'g')
    text(float(0.15), (max(aveParamMeasArray['Delta_Raw'])- float(0.20)), 'Peak to Peak over Conc. Range: %f' %(p_pVal), fontsize = 10, fontweight = 'bold')
    title('Conc & H2O vs. Delta (%s)'%(testType), color = 'black', fontweight = 'bold')
    subplot(212)
    for ppH2OCount in range(stepCount):
        h2oSens = polyfit(aveParamMeasArray['H2O'][(5*ppH2OCount):((5*ppH2OCount)+5)], aveParamMeasArray['Delta_Raw'][(5*ppH2OCount):((5*ppH2OCount)+5)], 1)
        p_pH2OVal.append(round(h2oSens[0],5))
    for h2oCount in range(stepCount):
        plot(aveParamMeasArray['H2O'][(5*h2oCount):((5*h2oCount)+5)], aveParamMeasArray['Delta_Raw'][(5*h2oCount):((5*h2oCount)+5)], 'o-')
    text(float(0.15), (max(aveParamMeasArray['Delta_Raw'])- float(0.20)), 'H2O Sensitivity Values: %s' %(p_pH2OVal), fontsize = 8, fontweight = 'bold')   
    xlabel('H2O Peak ', color = 'b')
    ylabel('Delta Raw (permil)', color = 'b')
    savefig((join(outputDir,'CO2InterferencePlot' + timeStr + '.png')))
    if testType == 'Measured':
        NEXT = 'StateCoeffImplement'
    elif testType == 'Validation':
        NEXT = 'StateDone'
    
elif analyzerType in ['CFKADS', 'CFKBDS', 'CKADS']:
    figure()
    measCONoise = std(aveParamMeasArray['CO'])
    coNoise = 'Measured 5Min Ave CO Noise = %f'%(measCONoise)
    fileDataFunc(dict(Comment = coNoise))
    stepIndex = range(1, (len(aveParamMeasArray['CO'])+1))
    #Plot1
    figure()
    plot(stepIndex, aveParamMeasArray['CO'], 'o-', color = 'b')
    xlabel('Concentration Step Index', color = 'g')
    ylabel('CO Corr', color = 'g')
    title('CO Corr')
    savefig((join(outputDir, 'CO_Plot' + timeStr + '.png')))
    #Plot2    
    figCO = plt.figure()
    ax1 = figCO.add_subplot(111)
    ax1.plot(stepIndex, aveParamMeasArray['CO2'], 'b')
    ax1.set_title('Measured CO2 and CO (%s)'%(testType), fontweight = 'bold')
    ax1.grid(True, color = 'gray')
    ax1.set_xlabel('Concentration Step Index')
    ax1.set_ylabel('CO2(ppm)', color = 'b', fontweight = 'bold')
    ax2 = ax1.twinx()
    ax2.plot(stepIndex, aveParamMeasArray['CO'], 'g')
    ax2.set_ylabel('CO(ppm)', color = 'g', fontweight = 'bold')
    savefig((join(outputDir, 'CO2_CO_MeasPlot' + timeStr + '.png')))    
    if testType == 'Measured':
        NEXT = 'StateCoeffImplement'
    elif testType == 'Validation':
        NEXT = 'StateDone'
'''

[StateCoeffImplement]
action = '''
#.Ini file of Before and Proposed Values
correctFitFile = r'C:/Picarro/G2000/InstrConfig/Integration/2DInterference_CO2_H2O/%s_2DCorrectedFits_%s.ini' %(analyzerType, timeStr)
corrConfig = ConfigObj(correctFitFile)

if analyzerType in ['CBDS', 'CFFDS', 'CHADS', 'CFGDS']:
    # Write new Values to .ini File
    configPath = 'C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\FitterConfig.ini'
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {'Peak88_offset': '%s' %(config['Peak88_offset']),
                    'Peak88_water_linear': '%s' %(config['Peak88_water_linear']),
                    'Peak88_bilinear': '%s' %(config['Peak88_bilinear'])}
    corrConfig['Old Fit Values'] = oldFitValues
    corrConfig.write()
    #New Fit Values
    config['Peak88_offset'] = str(-coeff[0][3])
    config['Peak88_water_linear'] = str(-coeff[0][1])
    config['Peak88_bilinear'] = str(-coeff[0][2])
    config.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {'Peak88_offset': '%s'%(str(-coeff[0][3])),
                    'Peak88_water_linear': '%s'%(str(-coeff[0][1])),
                    'Peak88_bilinear': '%s'%(str(-coeff[0][2]))}
    corrConfig['New Fit Values'] = newFitValues
    corrConfig.write()
    NEXT = 'StateRestart'
    
else:
    # Write new Values to .ini File
    if analyzer_pressure == "Normal":
        if analyzerType in ['CFKADS', 'CFKBDS']:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS.ini"
        elif analyzerType in ['CKADS']:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS.ini"
    else:
        if analyzerType in ["CFKADS", "CFKBDS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CFKADS_low_pressure.ini"
        elif analyzerType in ["CKADS"]:
            configPath = r"C:/Picarro/G2000/InstrConfig/Calibration/InstrCal/InstrCal_CKADS_low_pressure.ini"
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {'co_water_linear': '%s' %(config['Data']['co_water_linear']), 
                    'co_water_quadratic': '%s' %(config['Data']['co_water_quadratic']), 
                    'co_water_co2': '%s' %(config['Data']['co_water_co2'])}
    corrConfig['Old Fit Values'] = oldFitValues
    corrConfig.write()    
    #New Values
    config['Data']['co_water_linear'] = str(-coH2OCO2Intercept)    
    config['Data']['co_water_quadratic'] = str(-aveQuadCoeff)
    config['Data']['co_water_co2'] = str(-coH2OCO2Slope)
    config.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {'co_water_linear': '%s' %(str(-coH2OCO2Intercept)), 
                    'co_water_quadratic': '%s' %(str(-aveQuadCoeff)), 
                    'co_water_co2': '%s' %(str(-coH2OCO2Slope))}
    corrConfig['New Fit Values'] = newFitValues
    corrConfig.write()
    NEXT = 'StateRestart'    
'''

[StateRestart]
action = '''

class exeRestart():
    def __init__(self, exeName, retryCountLimit):
        self.analyzerSoftwareEXE = exeName
        self.launchStatus = False
        self.programList = []
        self.retryCountLimit = retryCountLimit
        self.retryCount = 0
        self.restartAnalyzerSoftware()

    def restartAnalyzerSoftware(self):
        subprocess.Popen('C:\Picarro\G2000\Hostexe\SupervisorLauncher.exe -a -c C:\Picarro\G2000\AppConfig\Config\Utilities\SupervisorLauncher.ini', shell = False)
        time.sleep(30.0)
        self.launchStatus = True
        self.EnumProcesses()

    def EnumProcesses(self):
        arr = c_ulong * 256
        lpidProcess = arr()
        cb = sizeof(lpidProcess)
        cbNeeded = c_ulong()
        hModule = c_ulong()
        count = c_ulong()
        modname = c_buffer(30)
        PROCESS_QUERY_INFORMATION = 0x0400
        PROCESS_VM_READ = 0x0010
        
        #Call Enumprocesses to get hold of process id's
        psapi.EnumProcesses(byref(lpidProcess), cb, byref(cbNeeded))
        #Number of processes returned
        nReturned = cbNeeded.value/sizeof(c_ulong())
        pidProcess = [i for i in lpidProcess][:nReturned]

        for pid in pidProcess:
            #Get handle to the process based on PID
            hProcess = kernel.OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, False, pid)
            if hProcess:
                psapi.EnumProcessModules(hProcess, byref(hModule), sizeof(hModule), byref(count))
                psapi.GetModuleBaseNameA(hProcess, hModule.value, modname, sizeof(modname))
                self.programList.append(''.join([ i for i in modname if i != '\x00']))
                #Clean up
                for i in range(modname._length_):
                    modname[i]='\x00'
                kernel.CloseHandle(hProcess)
        self.checkList()

    def checkList(self):
        if self.launchStatus == True and '%s'%(self.analyzerSoftwareEXE) in self.programList:
            logFunc('Relaunch was successful!\n')
            return True
        elif self.launchStatus == True and '%s'%(self.analyzerSoftwareEXE) not in self.programList:
            logFunc('Relaunch not successful. Will try again\n')
            self.launchStatus = False
            self.retryCount += 1
            if self.retryCount != self.retryCountLimit:
                self.restartAnalyzerSoftware()
            else:
                logFunc('All relaunch attempts were not successful-Please advise\n')
                return False
#Instantiate exeRestart
try:
    start = exeRestart('supervisor.exe', 2)
    if start.checkList() == True:
        sleep(60.0)
        testType = 'Validation'
        restartOccurred = True
        #Clear data from dictionaries
        for x in paramMeas:
            aveParamMeasArray[x][:] = []
            paramMeasArray[x][:] = []
        NEXT = 'StateDataArrayConfig'
    else:
        attemptCount += 1
        if attemptCount < 2:
            NEXT = 'StateRestart'
        else:
            logFunc('Analyzer failed to relaunch analyzer software-Please advise\n')
            NEXT = 'StateDone'
except Exception, err:
    logFunc('%r'%(err))
    attemptCount += 1
    if attemptCount < 2:
        NEXT = 'StateRestart'
    else:
        logFunc('Analyzer failed to relaunch analyzer software-Please advise\n')
        NEXT = 'StateDone'
'''

[StateDone]
action='''
#Set indicators to 0 when done
setTagalongData("ClientState", 0.0)
setTagalongData("TestStep", 0.0)
setTagalongData("ReadyState", 0.0)
setTagalongData("SeqIdx", 0.0)
GUI.popInfo('2D Interference Test is now complete\n','2D Interference Coordinator')
logFunc('Done!')
'''

[StateError]
action='''
logFunc('Error %s in state %s\n' % (ERROR_MSG,ERROR_STATE))
NEXT = 'StateDone'
'''