############################################################################################################################################
#Date:              Date Modified:          Notes:               
#20130115           E.Lai                   1D CO2 Analysis Test
############################################################################################################################################
[UserEditableParams]
num_disp_params = 0
0 = "validationMode", "Is Tester running a Validation Test (Y or N)", "Y"

#[FlowSeq_1percentUnWeighted]
[FlowSeq]
0  =   300.0,           06.4,        193.6
1  =   300.0,           06.8,        193.2
2  =   300.0,           09.4,        190.6
3  =   300.0,           12.0,        188.0
4  =   300.0,           16.7,        183.3
5  =   300.0,           21.4,        179.6
6  =   300.0,           28.4,        171.6
7  =   300.0,           35.3,        164.7
8  =   300.0,           28.4,        171.6
9  =   300.0,           21.4,        179.6
10  =  300.0,           16.7,        183.3
11  =  300.0,           12.0,        188.0
12  =  300.0,           09.4,        190.6
13  =  300.0,           06.8,        193.2
14  =  300.0,           06.4,        193.6

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/1DInterference/1D_Interference"

[SerialPorts]
MFC = COM2

[Output]
#iCO2 Param
12CO2Mean      = 12CO2Mean,        %10.4f
13CO2Mean      = 13CO2Mean,        %10.4f
DeltaMean      = DeltaMean,        %10.4f
h2oMean        = h2oMean,          %10.4f
c12PeakMean    = c12PeakMean,      %10.4f
c13PeakMean    = c13PeakMean,      %10.4f
h2oPeakMean    = h2oPeakMean,      %10.4f
ratioMean      = ratioMean,        %2.5f
#CFKADS, CKADS Param
peak_14        = peak_14,          %10.4f
h2oPct         = h2oPct,           %10.4f
peak84Raw      = peak84Raw,        %10.4f
CH4            = CH4,              %10.4f
CO             = CO,               %10.4f
CO2            = CO2,              %10.4f
#MFC Param
seqIdx         = seqIdx,           %10s
ActFlow1       = ActFlow1,         %10.2f
ActFlow2       = ActFlow2,         %10.2f
SetFlow1       = SetFlow1,         %10.2f
SetFlow2       = SetFlow2,         %10.2f
#Comment
Comment        = Comment,          %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join 
from time import strftime
from configobj import ConfigObj
#from pylab import figure, plot, grid, xlabel, ylabel, title, savefig, text
from pylab import*
import serial
import os
#Output path & file generation
outputDir = "C:/Picarro/G2000/InstrConfig/Integration/1DInterference"
if not exists(outputDir): makedirs(outputDir)
timeStr = strftime("%Y%m%d_%H%M%S")
#Range List to determine the     
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#Validation Confirmation
validationModeStatus = str(editParamDict["validationMode"])
if validationModeStatus == 'Y' or validationModeStatus == 'y':
    testType = 'Validation'
else:
    testType = 'Measured'
#List of Defintions to command MFC
#definition to open MFC Channel
def openChannel():
    for ch in range(1,5):
        mfcIntrf.sendString("ON %d" % (ch))
        return ch
#Definition to set flow rate of channel        
def setFlow(flowList):
    for ch in range(1,3):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d" % (ch, setpoint))
#Definition to read the actual flow rate of that particular MFC channel        
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0
#Definition to kill .exe in Supervisor Tree
def exeKill(exe):
    try:
        os.system("taskkill /im %s /f"%(exe))
    except Exception, err:
        logFunc(err)
        logFunc('Instrument cannot disable .exe - Please advise.\n')
    sleep(2.0)
#Definition to calculate mean of each conc step    
def aveData(paramTableMeasList):
    for a in range(len(paramTableMeasList)):
        paramDictList.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
        if paramTableList[a] == "c12PeakMean":
            analyzeC12Peak.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "c13PeakMean":
            analyzeC13Peak.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []  
        elif paramTableList[a] == "h2oPeakMean":
            analyzeH2OPeak.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "DeltaMean":
            analyzeDelta.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "peak_14":
            analyzePeak14.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "h2oPct":
            analyzeH2OPct.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "peak84Raw":
            analyzePeak84Raw.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "CH4":
            analyzeCH4.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "CO2":
            analyzeCO2.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []
        elif paramTableList[a] == "CO":
            analyzeCO.append(average(paramTableMeasList[a][int(0.45*len(paramTableMeasList[a])):]))
            paramTableMeasList[a][:] = []             
        else:
            paramTableMeasList[a][:] = []
            
#AnalyzerType
analyzerType = getAnalyzerType()
validation = False
#.Ini file of Before and Proposed Values
correctFitFile = 'C:\\Picarro\\G2000\\InstrConfig\\Integration\\1DInterference\\%s_1DCorrectedFits.ini' %(analyzerType)
corrConfig = ConfigObj(correctFitFile)    
#Flow Sequence 
flowSeq = config["FlowSeq"]
lenSeq  = len(flowSeq)
logFunc('Their are %s steps in 2D Interference test.\n'%(lenSeq))
seqIdx  = 0
#User selects analyzer type
if analyzerType in ["CBDS", "CFFDS"]:
    if analyzerType == "CBDS":
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_87", "adjust_88", "12CO2", "13CO2", "Delta_Raw", "H2O", "c12_pzt_ave", "c13_pzt_ave", "peak_91", "peak87_baseave_spec", "peak88_baseave", "Ratio_Raw"],200)
    elif analyzerType == "CFFDS":
        setMeasBuffer("analyze_iCO2", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_87", "adjust_88", "12CO2", "13CO2", "Delta_Raw", "H2O", "c12_pzt_ave", "c13_pzt_ave", "peak_75", "peak87_baseave_spec", "peak88_baseave", "Ratio_Raw"],200)
    logFunc("Instrument is an iCO2 (C12,C13) analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"  
elif analyzerType in ["CFKADS", "CFKBDS"]:
    setMeasBuffer("analyze_CFKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "co2_adjust", "ch4_adjust", "co_adjust", "h2o_adjust", "CH4", "CO", "CO2", "co_squish", "H2O"],200)
    logFunc("Instrument is a CFKADS (CO2,CH4,H2O,CO) analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"  
elif analyzerType in ["CKADS"]:
    setMeasBuffer("analyze_CKADS", ["EtalonTemp", "DasTemp", "CavityPressure", "peak84_raw", "b_h2o_pct", "peak_14", "co2_adjust","co_adjust", "CO", "CO2", "co_squish", "H2O"],200)
    logFunc("Instrument is a CKADS (CO2,H2O,CO) analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"
elif analyzerType in ["CHADS"]:
    setMeasBuffer("analyze_CHADS", ["EtalonTemp", "DasTemp", "CavityPressure", "adjust_87", "adjust_88", "12CO2", "13CO2", "DeltaC13_Raw", "H2O", "c12_pzt_ave", "c13_pzt_ave", "peak_12", "peak87_baseave_spec", "peak88_baseave"],200)
    logFunc("Instrument is an isotopic CO2 (C12,C13) & H2O (Delta D) analyzer.\n")
    logFunc("Now will wait for instrument to start measuring.\n")
    clearMeasBuffer()
    NEXT = "StateTestMFC"   
else:
    logFunc("Instrument Type is not supported.\n")
    NEXT="StateDone"    
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()
#Test to see if analyzer can communicate with MFC
exe = 'ValveSequencer.exe'
valveSeqKill = exeKill(exe)

try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2.\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: % on MFC Controller. Please advise.\n'%(mfcOpenChannel))
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,4):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum Flow Rate of MFC Channel[%s] is %s.\n'%(ch,channelRangeList[ch-1]))
    NEXT = "StateWaitMeasuring"    
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot retrieve max flow rate of MFC channels. Please advise.\n')
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart = 0
    instrAdjustStart = 0
    if analyzerType in ["CBDS", "CFFDS", "CHADS"]:
        adjustParam = ["adjust_87", "adjust_88"]
    elif analyzerType in ["CFKADS", "CFKBDS"]:
        adjustParam = ["co2_adjust", "ch4_adjust", "h2o_adjust", "co_adjust"]
    elif analyzerType in ["CKADS"]:
        adjustParam = ["co2_adjust", "co_adjust"]        
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure
if analyzerType in ["CHADS"]:
    a = "DeltaC13_Raw"
elif analyzerType in ["CBDS", "CFFDS"]:
    a = "Delta_Raw"        
else:
    a = "CO"
if not meas or (a not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 140.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""        
    
[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]
    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0005:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"
    else:
        logFunc("Instrument Etalon Temp is settled to nominal temp of 45.0 C.\n")
        squishStartTime = time.time()
        squishList = []
        squishCount = 0
        clearMeasBuffer()
        if analyzerType in ["CFKADS", "CFKBDS", "CKADS"]:
            logFunc('Set MFC Controllers to flow ambient level concentrations of CO2 and H2O.\n') 
            checkFlow = [0.0, 0.0, 0.0]
            setFlow(checkFlow)
            logFunc('Now will confirm CO squish term is within tolerance specification.\n')
            NEXT = "StateCOSquish"
        else:    
            NEXT = "StateInstrAdjustCert"
"""

[StateCOSquish]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateCOSquish"
else:
    currTime = time.time()
    if (currTime - squishStartTime) < 60.0:
        squishList.append(meas['co_squish'])
    else:
        squishAve = average(squishList)
        if squishAve < 0.0025:
            squishCount += 1
            squishStartTime = currTime
            if squishCount == 2:
                squishList[:] = []
                NEXT = "StateInstrAdjustCert"
            else:
                NEXT = "StateCOSquish"
        else:
            squishCount = 0
            squishList[:] = []
            if (currTime - squishStartTime) > 600.0:
                GUI.popPause("CO Squish value is not within tolerance. Please advis.\n","2D Interference Coordinator")
                NEXT = "StateDone"
            else:    
                NEXT = "StateCOSquish"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrAdjustCert"
else:
    for adjustCount in range(len(adjustParam)):
        cmVal = meas[adjustParam[adjustCount]]
        if abs(cmVal) > 0.0003:
            logFunc("Waiting for WLM to center.\n")
            instrAdjustStart = 0
            NEXT = "StateInstrAdjustCert"
        else:
            instrAdjustStart += 1
    if instrAdjustStart == len(adjustParam):
        logFunc("Verified Instrument WLM is centered.\n")
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        checkFlow = [6.4, 193.6]
        setFlow(checkFlow)
        #Measured Value Lists
        setFlow1Meas = []; setFlow2Meas = []; setFlow3Meas = []
        actFlow1Meas = []; actFlow2Meas = []; actFlow3Meas = []; seqIdxMeas = []
        if analyzerType in ["CBDS", "CFFDS", "CHADS"]:
            c12Meas = []; c13Meas = []; deltaMeas  = []; h2oMeas = []
            c12PeakMeas = []; c13PeakMeas = []; h2oPeakMeas = []; ratioMeas = []
            if analyzerType == "CBDS":
                paramMeas = ["12CO2", "13CO2", "Delta_Raw", "H2O", "peak87_baseave_spec", "peak88_baseave", "peak_91", "Ratio_Raw"]
                paramTableMeasList = [c12Meas, c13Meas, deltaMeas, h2oMeas, c12PeakMeas, c13PeakMeas, h2oPeakMeas, ratioMeas, 
                                        seqIdxMeas, actFlow1Meas, actFlow2Meas, actFlow3Meas, setFlow1Meas, setFlow2Meas, setFlow3Meas]
                paramTableList = ["12CO2Mean", "13CO2Mean", "DeltaMean", "h2oMean", "c12PeakMean", "c13PeakMean", "h2oPeakMean", "ratioMean", 
                                        "seqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "SetFlow1", "SetFlow2", "SetFlow3"]                
            elif analyzerType == "CFFDS":
                paramMeas = ["12CO2", "13CO2", "Delta_Raw", "H2O", "peak87_baseave_spec", "peak88_baseave", "peak_75", "Ratio_Raw"]
                paramTableMeasList = [c12Meas, c13Meas, deltaMeas, h2oMeas, c12PeakMeas, c13PeakMeas, h2oPeakMeas, ratioMeas, 
                                        seqIdxMeas, actFlow1Meas, actFlow2Meas, actFlow3Meas, setFlow1Meas, setFlow2Meas, setFlow3Meas]
                paramTableList = ["12CO2Mean", "13CO2Mean", "DeltaMean", "h2oMean", "c12PeakMean", "c13PeakMean", "h2oPeakMean", "ratioMean", 
                                        "seqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "SetFlow1", "SetFlow2", "SetFlow3"]
            elif analyzerType == "CHADS":
                paramMeas = ["12CO2", "13CO2", "DeltaC13_Raw", "H2O", "peak87_baseave_spec", "peak88_baseave", "peak_12"]
                paramTableMeasList = [c12Meas, c13Meas, deltaMeas, h2oMeas, c12PeakMeas, c13PeakMeas, h2oPeakMeas, 
                                        seqIdxMeas, actFlow1Meas, actFlow2Meas, actFlow3Meas, setFlow1Meas, setFlow2Meas, setFlow3Meas]
                paramTableList = ["12CO2Mean", "13CO2Mean", "DeltaMean", "h2oMean", "c12PeakMean", "c13PeakMean", "h2oPeakMean", 
                                        "seqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "SetFlow1", "SetFlow2", "SetFlow3"]
        #List of values to generate coefficients
            analyzeC12Peak = []; analyzeC13Peak = []; analyzeH2OPeak = []; analyzeDelta = []
            clearMeasBuffer()
            logFunc('Start H2O Check\n')
            NEXT = "StateH2OCheck"           
        elif analyzerType in ["CFKADS", "CFKBDS"]:
            peak14Meas = []; h2oPctMeas = []; peak84RawMeas = []; ch4Meas = []; co2Meas = []; coMeas = []
            paramMeas = ["peak_14", "b_h2o_pct", "peak84_raw", "CH4", "CO2", "CO"]
            paramTableMeasList = [peak14Meas, h2oPctMeas, peak84RawMeas, ch4Meas, co2Meas, coMeas, seqIdxMeas, actFlow1Meas, actFlow2Meas, actFlow3Meas, 
                                    setFlow1Meas, setFlow2Meas, setFlow3Meas]
            paramTableList = ["peak_14", "h2oPct", "peak84Raw", "CH4", "CO2", "CO", "seqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "SetFlow1", "SetFlow2", "SetFlow3"]
        #List of values to generate coefficients
            analyzePeak14 = []; analyzeH2OPct = []; analyzePeak84Raw = []; analyzeCH4 = []; analyzeCO2 = []; analyzeCO = []
            clearMeasBuffer()
            logFunc('Start H2O Check\n')            
            NEXT = "StateH2OCheck"
        elif analyzerType in ["CKADS"]:
            peak14Meas = []; h2oPctMeas = []; peak84RawMeas = []; co2Meas = []; coMeas = []
            paramMeas = ["peak_14", "b_h2o_pct", "peak84_raw", "CO2", "CO"]
            paramTableMeasList = [peak14Meas, h2oPctMeas, peak84RawMeas, co2Meas, coMeas, seqIdxMeas, actFlow1Meas, actFlow2Meas, actFlow3Meas, 
                                    setFlow1Meas, setFlow2Meas, setFlow3Meas]
            paramTableList = ["peak_14", "h2oPct", "peak84Raw", "CO2", "CO", "seqIdx", "ActFlow1", "ActFlow2", "ActFlow3", "SetFlow1", "SetFlow2", "SetFlow3"]
        #List of values to generate coefficients
            analyzePeak14 = []; analyzeH2OPct = []; analyzePeak84Raw = []; analyzeCO2 = []; analyzeCO = []
            clearMeasBuffer()
            logFunc('Start H2O Check\n')            
            NEXT = "StateH2OCheck"            
    else:
        instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()
if (time.time() - h2oCheckTime) < 360.0:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateH2OCheck"
    else:
        checkH2OMeas.append(meas["H2O"])
        NEXT = "StateH2OCheck"
        
else:
    if analyzerType in ["CHADS"]:
        aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
        if aveH2OVal < 17000:
            logFunc('Measured H2O Peak Level is %d\n'%(aveH2OVal))
            GUI.popPause("Peak H2O level is too low. Please advise.\n","Coordinator2DInterference")
            NEXT = "StateDone"
        else:
            logFunc('Measured H2O Peak is sufficient for test.\n')
            clearMeasBuffer()
            cycleCount = 0
            NEXT = "StateSetMFC"    
    else:
        aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
        if aveH2OVal > 0.1:
            logFunc('Measured H2O Peak Level is %d\n'%(aveH2OVal))
            GUI.popPause("Peak H2O level is too high. Please advise.\n","Coordinator2DInterference")
            NEXT = "StateDone"
        else:
            logFunc('Measured H2O Peak is sufficient.\n')
            clearMeasBuffer()
            cycleCount = 0
            NEXT = "StateSetMFC"
"""        

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(duration, f1, f2) = flowSeq[str(seqIdx)]
channelsFlowRate = [float(f) for f in [f1, f2]]
logFunc('Set MFC Channels to respective Flow Rates: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
 
if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        for paramCount in range(len(paramMeas)):
            paramTableMeasList[paramCount].append(meas[(paramMeas[paramCount])])
        seqIdxMeas.append(seqIdx)        
        for ch in range(1,3):
            command = "FL %d" %ch
            mfcIntrf.sendString(command)
            ret = mfcIntrf.getLine()
            retConvert = channelRangeList[ch-1]*float(ret)/1000.0
            if ch == 1:
                setFlow1Meas.append(channelsFlowRate[0])
                actFlow1Meas.append(getFlow(ch))
            elif ch == 2:
                setFlow2Meas.append(channelsFlowRate[1])
                actFlow2Meas.append(getFlow(ch))
        NEXT = "StateDataCollect"
            
else:
    if seqIdx == (len(flowSeq)-1) or seqIdx == 0:
        cycleCount +=1
    if cycleCount == 1:    
        seqIdx = seqIdx+1
    else:
        seqIdx = seqIdx-1    
    logFunc('Next seqIdx: %s\n'%(seqIdx))       
    NEXT = "StateDataGenAve"
"""

[StateDataGenAve]
action = """
paramDictList = []

#Write Data to .csv file
calVal = aveData(paramTableMeasList)
paramDict = dict(zip(paramTableList, paramDictList))
fileDataFunc(dict(paramDict))
paramDictList[:] = []
clearMeasBuffer()
    
#Transition to Linear Regression Fit
if cycleCount != 3:                    
    NEXT = "StateSetMFC"
else:
    NEXT = "StateDataLinearRegressionFit"
"""

[StateDataLinearRegressionFit]
action = """
#Definition to plot CO2 vs CO
def gen1DPlot(x,y):
    #Plot of CO2 vs CO
    figure()
    plot(x, y, 'bo', x, polyval(concFit, x))
    title('%s'%(plotTitle), color = 'black', fontweight = 'bold')
    xlabel('%s'%(xAxisTitle), color = 'b', fontweight = 'bold')
    ylabel('%s'%(yAxisTitle), color = 'b', fontweight = 'bold')
    text(350, (max(y)-(max(y)*0.25)), '%s' %(testType), fontsize = 10, fontweight = 'bold')
    text(350, (max(y)-(max(y)*0.65)), 'Slope (200 to 1800 ppm CO2): %f' %(concFit[0]), fontsize = 10, fontweight = 'bold')
    text(350, (max(y)-(max(y)*1.05)), 'Intercept (200 to 1800 ppm CO2): %f' %(concFit[1]), fontsize = 10, fontweight = 'bold')
    if testType == 'Validation':
        text(350, (max(y)-(max(y)*1.45)), '%s' %(testResult), fontsize = 10, fontweight = 'bold', color = '%s' %(resultColor))
    #Output Directory
    savefig((join(outputDir, "1DInterferencePlot" + timeStr + ".png")))

#This fit is to detmerine the CO_CO2 offset and slope to be plugged in to the InstrCal File.
peakFit = polyfit(analyzeCO2, analyzePeak84Raw, 1)
#This fit is to determine the sensitivity of CO on CO2.
concFit = polyfit(analyzeCO2, analyzeCO, 1)
#Result of test
if testType == 'Validation':
    if concFit[0] > 0.00125:
        testResult = 'Please advise: test failed. Slope > 0.00125 ppm CO2/ ppm CO.'
        resultColor = 'red'
    else:
        testResult = 'Please proceed: test passed. Slope < 0.00125 ppm CO2/ ppm CO.'
        resultColor = 'green'
signWarning = 'Signs have been negated.\n'
measFitOffset = 'Measured "co_offset" with Peak84 is %f.\n' %(-peakFit[1])
measFitSlope = 'Measured "co_co2_linear" with Peak84 is %f.\n'%(-peakFit[0])
logFunc('%s'%(signWarning))
logFunc('%s'%(measFitOffset))
logFunc('%s'%(measFitSlope))
fileDataFunc(dict(Comment = signWarning))
fileDataFunc(dict(Comment = measFitOffset))
fileDataFunc(dict(Comment = measFitSlope))
#Plot Data
plotTitle = 'CO2 ppm vs CO ppm'
xAxisTitle = 'CO2 ppm'
yAxisTitle = 'CH4 ppm'
gen1DPlot(analyzeCO2, analyzeCO)

if validationModeStatus == 'N' or validationModeStatus == 'n':
    if analyzerType in ["CBDS", "CFFDS", "CHADS"]:
        NEXT = "StateCoeffImplement"
    elif analyzerType in ["CFKADS", "CFKBDS", "CKADS"]:
        NEXT = "StateCoeffImplement"
elif validationModeStatus == 'Y' or validationModeStatus == 'y':
    NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
if analyzerType in ["CBDS", "CFFDS", "CHADS"]:
    #Write new Values to .ini File 
    if analyzerType in ["CFKADS", "CFKBDS"]:
        configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\InstrCal_CFKADS.ini"
    elif analyzerType in ["CKADS"]:
        configPath = "C:\Picarro\G2000\InstrConfig\Calibration\InstrCal\InstrCal_CKADS.ini"  
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {'co_offset': '%s' %(config['Data']['co_offset']),
                    'co_co2_linear': '%s' %(config['Data']['co_co2_linear'])}
    corrConfig['Old Fit Values'] = oldFitValues
    corrConfig.write()    
    #New Values
    config['Data']['co_offset'] = str(-fit[1])
    config['Data']['co_co2_linear'] = str(-fit[0])  
    config.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {'co_offset': '%s' %(str(-fit[1])), 
                    'co_co2_linear': '%s' %(str(-fit[0]))}
    corrConfig['New Fit Values'] = newFitValues
    corrConfig.write()
    NEXT = "StateDone"    
"""

[StateDone]
action="""
GUI.popInfo("1D Interference Test is now complete.\n", "1D Interference Coordinator")
endFlowState = [0.0, 0.0, 0.0]
setFlow(endFlowState)
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""