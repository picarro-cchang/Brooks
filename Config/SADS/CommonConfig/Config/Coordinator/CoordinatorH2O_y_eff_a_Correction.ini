############################################################################################################################################
#Date:              Date Modified:          Notes:
#20110211           E.Lai                   H2O_y_eff_a Data Collection
############################################################################################################################################
[UserEditableParams]
num_disp_params = 1
0 = "gasSource", "Gas Source [1 = N2, 2 = ZA]", "1"

[FlowSeq]
0  =        300.0,          010.0,          060.0,          0240.0
1  =        300.0,          010.0,          060.0,          1000.0
2  =        300.0,          010.0,          060.0,          0240.0
3  =        300.0,          010.0,          060.0,          0060.0
4  =        300.0,          010.0,          060.0,          0020.0
[FlowSeq2]
0  =        300.0,          010.0,          060.0,          0240.0
1  =        300.0,          010.0,          060.0,          1000.0
2  =        300.0,          010.0,          060.0,          0240.0
3  =        300.0,          010.0,          060.0,          0060.0
4  =        300.0,          010.0,          060.0,          0020.0

[Mode]
inject_mode=automatic

[Files]
output = "/home/picarro/SI2000/InstrConfig/Integration/H2O_y_eff_a/H2O_y_eff_a"

[SerialPorts]
MFC = COM2

[Output]
#General Param
measTime        = Timestamp,            %10.4f
EtalonTemp      = EtalonTemp,           %10.4f
CavityPressure  = CavityPressure,       %10.4f
CavityTemp      = CavityTemp,           %10.4f
pzt_stdev       = pzt_stdev,            %10.4f
h2o_ppmv        = h2o_ppmv,             %10.4f
#iH2O Param
h2o_spline_max  = h2o_spline_max,       %10.4f
h2o_y_eff_a     = h2o_y_eff_a,          %10.4f
#MFC Param
seqIdx          = SeqIdx,               %10d
gasSource       = gasSource,            %10s
actFlow1        = ActFlow1,             %10.2f
actFlow2        = ActFlow2,             %10.2f
actFlow3        = ActFlow3,             %10.2f
setFlow1        = SetFlow1,             %10.2f
setFlow2        = SetFlow2,             %10.2f
setFlow3        = SetFlow3,             %10.2f
#Comment
Comment         = Comment,              %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from os import makedirs
from os.path import exists, join
from time import strftime
from pylab import plot, grid, xlabel, ylabel, title, savefig

h2o_y_eff_a_Buffer = []
h2o_spline_max_Buffer = []

gasSource = int(editParamDict["gasSource"])
timeStr = strftime("%Y%m%d_%H%M%S")
#Range List to determine the
rangeCode = range(10)
rangeFlow = [1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0]
#Create Flow Dict
rangeTable = dict(zip(rangeCode, rangeFlow))
#Find ComPort of MFC
#definition to open MFC Channel
def openChannel():
    for ch in range(1,4):
        mfcIntrf.sendString("ON %d" % (ch))
        return ch
#Definition to set flow rate of channel
def setFlow(flowList):
    for ch in range(1,4):
        setpoint = round((flowList[ch-1]/channelRangeList[ch-1])*1000.0)
        mfcIntrf.sendString("FS %d %d" % (ch, setpoint))
#Defintiion to read the actual flow rate of that particular MFC channel
def getFlow(ch):
    command = "FL %d" % ch
    mfcIntrf.sendString(command)
    ret = mfcIntrf.getLine()
    return channelRangeList[ch-1]*float(ret)/1000.0

#Flow Sequence
if  gasSource == 1:
    flowSeq = config["FlowSeq2"]
else:
    flowSeq = config["FlowSeq"]
lenSeq  = len(flowSeq)
logFunc('Their are %s steps in 2D Interference test'%(lenSeq))
seqIdx  = 0
#User selects analyzer type
setMeasBuffer("analyze_iH2O", ["EtalonTemp", "CavityTemp", "CavityPressure", "pzt_stdev", "h2o_ppmv", "h2o_spline_max", "h2o_y_eff_a"],200)
logFunc("Instrument is an iH2O analyzer.\n")
logFunc("Now will wait for instrument to start measuring.\n")
NEXT = "StateTestMFC"
"""

[StateTestMFC]
action = """
#Open port
mfcIntrf = SerIntrf(portDict["MFC"])
mfcIntrf.open()
#Test to see if analyzer can communicate with MFC
try:
    mfcOpenChannel = openChannel()
    logFunc('Established Communication with COM2.\n')
except Exception, err:
    logFunc(err)
    logFunc('Analyzer cannot open channel: %s on MFC Controller. Please advise.\n'%(mfcOpenChannel))
#If analyzer sees MFC controller, retrieve max flow from all channels
try:
    channelRangeList = []
    #Determine flow range of each MFC channel
    for ch in range(1,4):
        command = "RA %d R" %ch
        mfcIntrf.sendString(command)
        returnVal = mfcIntrf.getLine()
        channelRangeList.append(rangeTable[int(returnVal)])
        logFunc('Maximum flow rate of MFC channel[%s] is %s.\n'%(ch,(rangeTable[int(returnVal)])))
    NEXT = "StateWaitMeasuring"
except Exception, err:
    logFunc(err)
    logFunc("Analyzer cannot retrieve max flow rate of MFC channels. Please advise.\n")
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
#Wait for Instrument to start measuring
if not meas or ("h2o_spline_max" not in meas):
    sleep(1.0)
    logFunc('.')
    NEXT = "StateWaitMeasuring"
else:
    logFunc("Instrument is now measuring.\n")
    logFunc("Now will wait for instrument to reach steady state.\n")
    #Initial CMAdjust Points
    cavityPressure = 0
    etalonStart    = 0
    instrAdjustStart = 0
    NEXT = "StateInstrCavityPressure"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verifiy Cavity Pressure is stable
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT = "StateInstrCavityPressure"
else:
    cavityPress_meas = meas["CavityPressure"]
    if cavityPressure != 3:
        if abs(cavityPress_meas - 35.0) >= 0.05:
            logFunc("Waiting for Cavity Pressure to settle.\n")
            cavityPressure = 0
            NEXT = "StateInstrCavityPressure"
        else:
            logFunc(".")
            cavityPressure += 1
            NEXT = "StateInstrCavityPressure"
    else:
        logFunc("Cavity Pressure has reached setpoint of 35.0 Torr.\n")
        NEXT = "StateInstrEtalonCert"
"""

[StateInstrEtalonCert]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc('.')
    NEXT="StateInstrEtalonCert"
else:
    initTemp = meas["EtalonTemp"]
    sleep(10.0)
    etalMeas = measGetBufferFirst()
    etalTemp = etalMeas["EtalonTemp"]

    if etalonStart != 3:
        etalonDiff = abs(etalTemp - initTemp)
        if etalonDiff > 0.0015:
            logFunc("Waiting for Etalon Temp to settle.\n")
            etalonStart = 0
            NEXT = "StateInstrEtalonCert"
        else:
            logFunc(".")
            etalonStart += 1
            NEXT = "StateInstrEtalonCert"

    else:
        logFunc("Instrument Etalon Temp is has stabilized.\n")
        clearMeasBuffer()
        if gasSource == 1:
            setValveMask(4)
        elif gasSource == 2:
            setValveMask(20)
        NEXT = "StateSetMFC"
"""

[StateSetMFC]
action = """
#Step Sequence of flow rates and durations
(duration, f1, f2, f3) = flowSeq[str(seqIdx)]
channelsFlowRate = [float(f) for f in [f1, f2, f3]]
logFunc('Set MFC Channels to their respective flows: %s\n'%(channelsFlowRate))
setFlow(channelsFlowRate)
stopTime = time.time() + float(duration)
NEXT = "StateDataCollect"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()

if time.time() < stopTime:
    if not meas:
        sleep(1.0)
        logFunc('.')
        NEXT = "StateDataCollect"
    else:
        if seqIdx == 0:
            NEXT = "StateDataCollect"
        else:
            meas["seqIdx"] = seqIdx
            h2o_y_eff_a_Buffer.append(meas["h2o_y_eff_a"])
            h2o_spline_max_Buffer.append(meas["h2o_spline_max"])
            for ch in range(1,4):
                meas["actFlow%d"%ch] = getFlow(ch)
                meas["setFlow%d"%ch] = channelsFlowRate[ch-1]
            if gasSource == 1:
                meas["gasSource"] = "N2"
            elif gasSource == 2:
                meas["gasSource"] = "ZA"
            fileDataFunc(meas)

else:
    if seqIdx == lenSeq-1:
        logFunc("Gal Peak Data Acquisition complete.\n")

        outputDir = "/home/picarro/SI2000/InstrConfig/Integration/H2O_y_eff_a"
        #outputDir = strftime(parentDir + "/%Y%m%d_%H%M%S")

        def protfit(x,y):
            if len(x)>0:
                xmin, xmax, xptp = min(x), max(x), ptp(x)
                ymin, ymax, yptp = min(y), max(y), ptp(y)
                win = (y>=ymin+0.1*yptp) & (y<=ymax-0.2*yptp) & (x>=xmin+0.1*xptp) & (x<=xmax-0.2*xptp)
                if sum(win)>0:
                    return polyfit(x[win],y[win],1)
            return (0.0,0.0)

        fit = protfit(asarray(h2o_spline_max_Buffer),asarray(h2o_y_eff_a_Buffer))


        yRange = asarray([min(h2o_spline_max_Buffer),max(h2o_spline_max_Buffer)])
        #plot(h2o_spline_max_Buffer,h2o_y_eff_a_Buffer,'.')
        plot(h2o_spline_max_Buffer,h2o_y_eff_a_Buffer,'.',yRange,polyval(fit,yRange))
        grid(True)
        xlabel('h2o_spline_max')
        ylabel('h2o_y_eff_a')
        title('Gas Source is %s, Slope = %.3e, Intercept = %.3f'  % (gasSource, fit[0],fit[1]))
        savefig(join(outputDir,"h2o_y_eff_a_" + timeStr + ".png"))

        NEXT = "StateDone"
    else:
        clearMeasBuffer()
        seqIdx = seqIdx+1
        logFunc('Moving to next Seq. Step: %d\n'%(seqIdx))
        NEXT = "StateSetMFC"
"""

[StateDone]
action="""
GUI.popInfo("H2O_y_eff_a Data Acquisition is now complete.\n","CoordinatorH2OyeffaAnalysis")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
