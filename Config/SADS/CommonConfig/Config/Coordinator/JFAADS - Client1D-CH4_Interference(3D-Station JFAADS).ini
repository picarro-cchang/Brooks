############################################################################################################################################
#Date:              Date Modified:          Notes:
#20140401           E.Lai                   JFAADS: 1D CH4 Interference - Client
#20140626           E.Lai                   JFAADS: Updated coordinator with pass/fail criteria
#20140708           E.Lai                   JFAADS: Set indicators to 0 when in StateDone
############################################################################################################################################
[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/1DInterference_CH4/1DInterference_CH4"

[Output]
CO2                 = CO2,                 %10.4f
H2O                 = H2O,                 %10.4f
N2O                 = N2O,                 %10.4f
NH3                 = NH3,                 %10.4f
CH4                 = CH4,                 %10.4f
peak_41_raw         = peak_41_raw,         %10.4f
peak_1a_raw         = peak_1a_raw,         %10.4f
ch4_splinemax_raw   = CH4,                 %10.4f
peak15_raw          = peak15_raw,          %10.4f
nh3_conc_ave_raw    = nh3_conc_ave_raw,    %10.4f
peak_4_raw          = peak_4_raw,          %10.4f
peak_2_raw          = peak_2_raw,          %10.4f
Gas                 = Gas,                 %10s
Range               = Range,               %10s
#MFC Param
SeqIdx              = SeqIdx,              %5f
SetFlow1            = SetFlow1,            %10.2f
SetFlow2            = SetFlow2,            %10.2f
SetFlow3            = SetFlow3,            %10.2f
SetFlow4            = SetFlow4,            %10.2f
ActFlow1            = ActFlow1,            %10.2f
ActFlow2            = ActFlow2,            %10.2f
ActFlow3            = ActFlow3,            %10.2f
ActFlow4            = ActFlow4,            %10.2f
#Comment
Comment             = Comment,             %128s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
#Import Python Modules
from numpy import*
from pylab import*
from ctypes import*
from os import makedirs
from os.path import exists, join 
from configobj import ConfigObj
import subprocess
import time

#PSAPI.DLL
psapi = windll.psapi
#Kernel32.DLL
kernel = windll.kernel32
#AnalyzerType
analyzerType = getAnalyzerType()

coordParamFile = r"C:/Picarro/G2000/CommonConfig/Config/Coordinator/JFAADS - Client1D-CH4_InterferfaceVariables(3D-Station JFAADS).ini"
coordParamConfig = ConfigObj(coordParamFile)

#User selects analyzer type
if analyzerType in [coordParamConfig["StateStart"]["type"]]:
    logFunc("%s"%(coordParamConfig["StateStart"]["typeComment"]+"\n"))
    logFunc("Now will wait for instrument to start measuring\n")
    NEXT = "StateStartParameters"
else:
    logFunc("Instrument Type is not supported\n")
    NEXT="StateDone"    
"""

[StateStartParameters]
action = """
#Test State Count
stateTestMeasBufferCount = 1
stateCavityPressureCount = 2
stateEtalonCertCount = 3
stateInstrAdjustCount = 5
stateH2OCheckCount = 6
stateFlowDone = 7
stateDataGenAve = 8
stateDataCollectComplete = 9
stateRestart = 10
stateDataCollectCount = 11
#Note: gasType = 1 (N2), gasType = 2 (HE), gasType = 3 (AIR)
gasType = 0.0
#Note: gasRange = 1 (Low Concentration), gasRange = 2 (High Concentration), gasRange = 3 (combination of both)
#For JFAADS
gasRange = 0.0
pyramidStepCount = 0.0
gasConfigCheck  = False
#Adjust List
adjustParamList = []
for param in coordParamConfig["StateStartParameters"]:
    adjustParamList.append(coordParamConfig["StateStartParameters"][param])
NEXT = "StateMeasBuffer"
"""

[StateMeasBuffer]
action = """
try:
    setTagalongData("ClientState", 0.0)
    setTagalongData("TestStep", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("PyramidStepCount", pyramidStepCount)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
except Exception, err:
    logFunc("Cannot tag parameter into datastream\n")
    logFunc("Will try again\n")
    NEXT = "StateMeasBuffer"
#Buffer List
startParamList = []
for param in coordParamConfig["StateMeasBuffer"].keys()[1:]:
    startParamList.append(coordParamConfig["StateMeasBuffer"][param])

if analyzerType in [coordParamConfig["StateStart"]["type"]]:
    setMeasBuffer(coordParamConfig["StateMeasBuffer"]["analyzeScript"], startParamList,200)
clearMeasBuffer()
logFunc("Insert status indicators for client status and state status\n")
setTagalongData("TestStep", stateTestMeasBufferCount)
NEXT = "StateTestMeasBuffer"
"""

[StateTestMeasBuffer]
action = """
meas = measGetBufferFirst()
if analyzerType in [coordParamConfig["StateStart"]["type"]]:
    species = coordParamConfig["StateTestMeasBuffer"]["species"]

#Verify Buffer has the right data parameters
if not meas or ("ReadyState" not in meas) or (species not in meas) or ("TestStep" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateTestMeasBuffer"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateTestMeasBufferCount:
        setTagalongData("ClientState", 1.0)
        setTagalongData("TestStep", 1.0)
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == 1.0:
        logFunc("Instrument is now measuring\n")
        logFunc("Now will wait for cavity pressure to stabilize\n")    
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateCavityPressureCount)
        cavityPressure = 0
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
    else:
        clearMeasBuffer()
        NEXT = "StateTestMeasBuffer"
"""

[StateInstrCavityPressure]
action = """
meas = measGetBufferFirst()
#Verify Cavity Pressure
pressureSetpoint = float(coordParamConfig["StateInstrCavityPressure"]["pressureSetpoint"])

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrCavityPressure"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateCavityPressureCount:
        cavityPress_meas = meas["CavityPressure"]
        if cavityPressure != 3:
            if abs(cavityPress_meas - pressureSetpoint) >= 0.05:
                cavityPressure = 0
                NEXT = "StateInstrCavityPressure"
            else:
                cavityPressure += 1
                NEXT = "StateInstrCavityPressure"
        else:
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
            NEXT = "StateInstrCavityPressure"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateCavityPressureCount:
        logFunc("Cavity Pressure has reached setpoint of 140 Torr\n")
        logFunc("Now will wait for etalon temperature to stabilize\n")
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateEtalonCertCount)
        etalonStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrCavityPressure"
"""
    
[StateInstrEtalonTemp]
action = """
meas = measGetBufferFirst()
#Wait for Instrument Etalon Temp to settle
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateInstrEtalonTemp"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateEtalonCertCount:
        initTemp = meas["EtalonTemp"]
        sleep(10.0)
        etalMeas = measGetBufferFirst()
        etalTemp = etalMeas["EtalonTemp"]
        if etalonStart != 3:
            etalonDiff = abs(etalTemp - initTemp)
            if etalonDiff > 0.0005:
                etalonStart = 0
                NEXT = "StateInstrEtalonTemp"
            else:
                etalonStart += 1
                NEXT = "StateInstrEtalonTemp"
        else:
            setTagalongData("ClientState", 1.0)
            etalonStart = 0
            clearMeasBuffer()
            NEXT = "StateInstrEtalonTemp"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateEtalonCertCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateInstrAdjustCount)
        logFunc("Etalon temp stabilized to nominal temp fo 45.0 C\n")
        logFunc("Now will confirm adjust values are acceptable magnitude\n")
        instrAdjustStart = 0
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrEtalonTemp"
"""

[StateInstrAdjustCert]
action = """
meas = measGetBufferFirst()
#Wait for WLM to Center
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT="StateInstrAdjustCert"
else:
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateInstrAdjustCount:
        for adjustCount in range(len(adjustParamList)):
            cmVal = meas[adjustParamList[adjustCount]]
            if abs(cmVal) < 0.0003:
                instrAdjustStart += 1
        if instrAdjustStart == len(adjustParamList):
            setTagalongData("ClientState", 1.0)
            clearMeasBuffer()
        else:
            instrAdjustStart = 0
        NEXT = "StateInstrAdjustCert"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateInstrAdjustCount:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateH2OCheckCount)
        #H2O Check parameters
        h2oCheckTime = time.time()
        checkH2OMeas = []
        logFunc("WLM Adjust magnitudes are acceptable\n")
        logFunc("Now will start H2O level check\n")
        clearMeasBuffer()        
        NEXT = "StateH2OCheck"
    else:
        clearMeasBuffer()
        NEXT = "StateInstrAdjustCert"
"""

[StateH2OCheck]
action = """
meas = measGetBufferFirst()

if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateH2OCheck"
else:
    checkH2OMeas.append(meas["H2O"])
    if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateH2OCheckCount:
        if (time.time() - h2oCheckTime) < 360.0:
            NEXT = "StateH2OCheck"
        else:
            aveH2OVal = average(checkH2OMeas[int(-0.50*len(checkH2OMeas)):])
            if aveH2OVal > 0.1:
                logFunc("Peak H2O level is too high-Please advise\n")
                NEXT = "StateDone"
            else:
                setTagalongData("ClientState", 1.0)
                clearMeasBuffer()
                NEXT = "StateH2OCheck"
    elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateH2OCheckCount:
        #Indication of test cycle type
        testType = "Measured"
        restartOccurred = False
        logFunc("H2O level check is suitable for test\n")
        logFunc("%s"%(coordParamConfig["StateH2OCheck"]["stateComment"]+"\n"))
        clearMeasBuffer()
        NEXT = "StateDataArrayConfig"
    else:
        clearMeasBuffer()
        NEXT = "StateH2OCheck"
"""

[StateDataArrayConfig]
action = """
if analyzerType in [coordParamConfig["StateStart"]["type"]]:
    if restartOccurred == False:
        measParamList = []
        paramMeas = []
        paramMeasArray = {}
        aveParamMeasArray = {}
        for param in coordParamConfig["StateDataArrayConfigTypeMeas"].keys()[1:]:
            measParamList.append(coordParamConfig["StateDataArrayConfigTypeMeas"][param])
        #Setting Measurement Buffer
        setMeasBuffer(coordParamConfig["StateDataArrayConfigTypeMeas"]["analyzeScript"], measParamList, 200)
        #Parameter List / Array
        for param in coordParamConfig["StateDataArrayConfigTypeMeas"].keys()[7:]:
            paramMeas.append(coordParamConfig["StateDataArrayConfigTypeMeas"][param])
            paramMeasArray[coordParamConfig["StateDataArrayConfigTypeMeas"][param]] = []
            aveParamMeasArray[coordParamConfig["StateDataArrayConfigTypeMeas"][param]] = []
    elif restartOccurred == True:
        valParamList = []
        for param in coordParamConfig["StateDataArrayConfigTypeVal"].keys()[1:]:
            valParamList.append(coordParamConfig["StateDataArrayConfigTypeVal"][param])
        setMeasBuffer(coordParamConfig["StateDataArrayConfigTypeVal"]["analyzeScript"], valParamList, 200)     

#MFC Step Cycle Start Integers
if restartOccurred == False:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    aveDone = False
    NEXT = "StateDataCollect"
else:
    NEXT = "StateRestartMeasCheck"
"""

[StateRestartMeasCheck]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(1.0)
    logFunc(".")
    NEXT = "StateRestartMeasCheck"
else:
    clearMeasBuffer()
    setTagalongData("TestStep", stateDataCollectCount)
    setTagalongData("ClientState", 0.0)
    setTagalongData("ReadyState", 0.0)
    setTagalongData("SeqIdx", 0.0)
    setTagalongData("ActFlow1", 0.0)
    setTagalongData("ActFlow2", 0.0)
    setTagalongData("ActFlow3", 0.0)
    setTagalongData("ActFlow4", 0.0)
    setTagalongData("SetFlow1", 0.0)
    setTagalongData("SetFlow2", 0.0)
    setTagalongData("SetFlow3", 0.0)
    setTagalongData("SetFlow4", 0.0)
    setTagalongData("PyramidStepCount", 0.0)
    setTagalongData("Gas", gasType)
    setTagalongData("Range", gasRange)
    restartOccurred = False
    NEXT = "StateDataArrayConfig"
"""

[StateDataCollect]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas) or ("ReadyState" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollect"
else:
    #Retrieve gas range and type
    if not gasConfigCheck :
        if meas["Gas"] != "0":
            gasType = meas["Gas"]
            gasRange = meas["Range"]
            pyramidStepCount = meas["PyramidStepCount"]
            gasConfigCheck  = True
    else:
        #Collect Data
        if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataCollectCount:
            for x in paramMeas:
                paramMeasArray[x].append(meas[x])
            NEXT = "StateDataCollect"
        elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 2.0 and meas["TestStep"] == stateDataCollectCount:
            setTagalongData("TestStep", stateDataCollectComplete)
            setTagalongData("ClientState", 2.0)        
            NEXT = "StateDataCollectComplete"
        elif meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateFlowDone:
            NEXT = "StateDataRegressionFit"
        else:
            NEXT = "StateDataCollect"
"""

[StateDataCollectComplete]
action = """
meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataCollectComplete"
else:
    if meas["ClientState"] == 2.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataCollectComplete:
        setTagalongData("ClientState", 0.0)
        setTagalongData("TestStep", stateDataGenAve)
        clearMeasBuffer()
        NEXT = "StateDataGenAve"
    else:
        NEXT = "StateDataCollectComplete"
"""

[StateDataGenAve]
action = """
def aveData():
    for a in paramMeas:
        paramLength = len(paramMeasArray[a])
        aveVal = average(paramMeasArray[a][-int(paramLength*0.50):])
        aveParamMeasArray[a].append(aveVal)
        paramDictList.append(aveVal)
        paramMeasArray[a][:] = []

meas = measGetBufferFirst()
#Collect Data
if not meas or ("SeqIdx" not in meas):
    sleep(1.0)
    logFunc(".")
    NEXT = "StateDataGenAve"
else:
    if aveDone == False:
        #Server will check clients' states
        paramDictList = []
        calVal = aveData()
        paramDict = dict(zip(paramMeas, paramDictList))
        paramDict["Comment"] = testType
        paramDict["Gas"] = gasType
        paramDict["Range"] = gasRange
        fileDataFunc(dict(paramDict))
        paramDictList[:] = []
        aveDone = True
        NEXT = "StateDataGenAve"
    elif aveDone == True:
        if meas["ClientState"] == 0.0 and meas["ReadyState"] == 0.0 and meas["TestStep"] == stateDataGenAve:
            setTagalongData("ClientState", 1.0)
            NEXT = "StateDataGenAve"
        elif meas["ClientState"] == 1.0 and meas["ReadyState"] == 1.0 and meas["TestStep"] == stateDataGenAve:
            aveDone = False
            #Increase Step Count
            stateDataCollectCount += 1
            setTagalongData("TestStep", stateDataCollectCount)
            #Reset ClientState
            setTagalongData("ClientState", 0.0)
            NEXT = "StateDataCollect"
        else:
            NEXT = "StateDataGenAve"
"""

[StateDataRegressionFit]
action = """
#1D Analysis
fitResults = {}
#if gasRange == 1.0 and analyzerType in coordParamConfig["StateStart"]["type"]:
#For JFAADS
if gasRange == 3.0 and analyzerType in coordParamConfig["StateStart"]["type"]:
    for param in coordParamConfig["StateDataRegressionFitPeaks"].keys():
        if param.startswith("axisVariable_y"):
            if testType == "Measured":
                xAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitPeaks"]["axisVariable_x"]][int(pyramidStepCount*2):]
                yAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitPeaks"][param]][int(pyramidStepCount*2):]
            else:
                xAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitPeaks"]["axisVariable_x"]]
                yAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitPeaks"][param]]
            fit = polyfit(xAxis, yAxis, 1)
            speciesNameY = coordParamConfig["StateDataRegressionFitSpecies"][param]
            speciesNameX = coordParamConfig["StateDataRegressionFitSpecies"]["axisVariable_x"]
            fitResults[param] = [fit[0], fit[1]]
            measFitSlope = "Measured slope is %s\n" %(str(fit[0]))
            measFitOffset = "Measured offset is %s\n" %(str(fit[1]))
            #Write out values of fit
            signWarning = "Signs have not been negated\n"
            logFunc("%s"%(signWarning))
            logFunc("Sensitivity: %s/%s \n"%(speciesNameY, speciesNameX))
            logFunc("%s"%(measFitSlope))
            logFunc("%s"%(measFitOffset))
            fileDataFunc(dict(Comment = signWarning))
            fileDataFunc(dict(Comment = "Sensitivity: %s/%s \n"%(speciesNameY, speciesNameX)))
            fileDataFunc(dict(Comment = measFitSlope))
            fileDataFunc(dict(Comment = measFitOffset))
NEXT = "StatePlotResults"
"""

[StatePlotResults]
action  = """
#.Ini file of Before and Proposed Values
outputDir = r"%s"%(coordParamConfig["StatePlotResults"]["outputPath"])
timeStr = time.strftime("%Y%m%d_%H%M%S")

def genPlot(haveFitSpec):
    figure()
    plot(xAxis, yAxis, "bo", xAxis, curveFitValues)
    ax = gca()
    title("%s"%(titleName), color = "black", fontweight = "bold")
    xlabel("%s"%(xLabelName), color = "black", fontweight = "bold")
    ylabel("%s"%(yLabelName), color = "black", fontweight = "bold")
    ax.text((min(xAxis)+2.0), max(yAxis), "Slope: %s %s/%s" %(round(zFit[0],7), yLabelName, xLabelName), 
            horizontalalignment = "left", verticalalignment = "top", 
            fontsize = 10, fontweight = "bold")
    if max(yAxis) < 0.0:
        yAxisInterceptPoint = max(yAxis)*1.15
        yAxisSpecPoint = max(yAxis)*1.25
    else:
        yAxisInterceptPoint = max(yAxis)*0.85
        yAxisSpecPoint = max(yAxis)*0.75
    #Intercept Point
    ax.text((min(xAxis)+2.0), yAxisInterceptPoint, "Intercept: %s" %(zFit[1]),
            horizontalalignment = "left", verticalalignment = "top", 
            fontsize = 10, fontweight = "bold")
    #Spec Point
    if haveFitSpec:
        ax.text((min(xAxis)+2.0), yAxisSpecPoint, testResult,
                horizontalalignment = "left", verticalalignment = "top", 
                fontsize = 10, fontweight = "bold", color = "%s"%(resultColor))
    else:
        if testType == "Validation":
            ax.text((min(xAxis)+2.0), max(yAxis)*0.75, "No spec for this species: test passed",
                    horizontalalignment = "left", verticalalignment = "top", 
                    fontsize = 10, fontweight = "bold", color = "green")
    #Output Directory
    savefig((join(outputDir, "1DInterferencePlot" + "_" + timeStr + "_" + testType + "_" + "%s"%(speciesName) + ".png")))

#Will plot results regardless whether this test is a measurement or a validation
for param in coordParamConfig["StateDataRegressionFitSpecies"].keys():
    if coordParamConfig["StateDataRegressionFitSpecies"][param] in measParamList and param.startswith("axisVariable_y"):
        if testType == "Measured":
            xAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitSpecies"]["axisVariable_x"]][int(pyramidStepCount*2):]
            yAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitSpecies"][param]][int(pyramidStepCount*2):]
        else:
            xAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitSpecies"]["axisVariable_x"]]
            yAxis = aveParamMeasArray[coordParamConfig["StateDataRegressionFitSpecies"][param]]
        linearFit = polyfit(xAxis, yAxis, 1)
        curveFitValues = polyval(linearFit, xAxis)
        zFit = linearFit
        titleName = "%s(ppm) vs %s(ppm)"%(coordParamConfig["StateDataRegressionFitSpecies"]["axisVariable_x"], coordParamConfig["StateDataRegressionFitSpecies"][param])
        xLabelName = "%s (ppm)"%(coordParamConfig["StateDataRegressionFitSpecies"]["axisVariable_x"])
        yLabelName = "%s (ppm)"%(coordParamConfig["StateDataRegressionFitSpecies"][param])
        speciesName = coordParamConfig["StateDataRegressionFitSpecies"][param]
        if "fitResults_" + speciesName in coordParamConfig["StateDataRegressionFitSpecs"].keys() and testType == "Validation":
            fitSpec = float(coordParamConfig["StateDataRegressionFitSpecs"]["fitResults_" + speciesName])
            pk2pk = abs(zFit[0]*float(coordParamConfig["StateDataRegressionSpeciesRange"]["span"]))
            if pk2pk > fitSpec:
                testResult = "Please advise: test failed. Sensitivity multiplied by range on COC: %s > Drift Spec: %s"%(pk2pk, fitSpec)
                resultColor = "red"
                haveFitSpec = True
            else:
                testResult = "Please advise: test passed. Sensitivity multiplied by range on COC: %s < Drift Spec: %s"%(pk2pk, fitSpec)
                resultColor = "green"
                haveFitSpec = True
        else:
            haveFitSpec = False
        genPlot(haveFitSpec)
    else:
        continue
        
if testType == "Measured":
    NEXT = "StateCoeffImplement"
elif testType == "Validation":
    NEXT = "StateDone"
"""

[StateCoeffImplement]
action = """
correctFitFile = r"%s"%(coordParamConfig["StateCoeffImplementPath"]["correctFitFile"])%(timeStr)
corrConfig = ConfigObj(correctFitFile)

if analyzerType in [coordParamConfig["StateStart"]["type"]]:
    configPath = r"%s"%(coordParamConfig["StateCoeffImplementPath"]["configFilePath"])
    config = ConfigObj(configPath)
    #Old Values
    oldFitValues = {}
    for param in coordParamConfig["StateCoeffImplementSpecies"].keys():
        oldFitValues[coordParamConfig["StateCoeffImplementSpecies"][param]] = config["Data"][coordParamConfig["StateCoeffImplementSpecies"][param]]
    corrConfig["Old Fit Values"] = oldFitValues
    corrConfig.write()
    #Write New Values to Summary Coefficient Test File
    newFitValues = {}
    for param in coordParamConfig["StateCoeffImplementSpecies"].keys():
        if param in fitResults.keys():
            newFitValues[coordParamConfig["StateCoeffImplementSpecies"][param]] = fitResults[param][0]
            #Write to InstrCal.ini with non-negated slopes
            config["Data"][coordParamConfig["StateCoeffImplementSpecies"][param]] = str(fitResults[param][0])
    corrConfig["New Fit Values"] = newFitValues
    corrConfig.write()        
    #New Fit Values
    config.write()
    NEXT = "StateRestart"
"""

[StateRestart]
action = """
class exeRestart():
    def __init__(self, exeName, retryCountLimit):
        self.analyzerSoftwareEXE = exeName
        self.launchStatus = False
        self.programList = []
        self.retryCountLimit = retryCountLimit
        self.retryCount = 0
        self.restartAnalyzerSoftware()

    def restartAnalyzerSoftware(self):
        subprocess.Popen("C:\Picarro\G2000\Hostexe\SupervisorLauncher.exe -a -c C:\Picarro\G2000\AppConfig\Config\Utilities\SupervisorLauncher.ini", shell = False)
        time.sleep(30.0)
        self.launchStatus = True
        self.EnumProcesses()

    def EnumProcesses(self):
        arr = c_ulong * 256
        lpidProcess = arr()
        cb = sizeof(lpidProcess)
        cbNeeded = c_ulong()
        hModule = c_ulong()
        count = c_ulong()
        modname = c_buffer(30)
        PROCESS_QUERY_INFORMATION = 0x0400
        PROCESS_VM_READ = 0x0010
        
        #Call Enumprocesses to get hold of process id's
        psapi.EnumProcesses(byref(lpidProcess), cb, byref(cbNeeded))
        #Number of processes returned
        nReturned = cbNeeded.value/sizeof(c_ulong())
        pidProcess = [i for i in lpidProcess][:nReturned]

        for pid in pidProcess:
            #Get handle to the process based on PID
            hProcess = kernel.OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, False, pid)
            if hProcess:
                psapi.EnumProcessModules(hProcess, byref(hModule), sizeof(hModule), byref(count))
                psapi.GetModuleBaseNameA(hProcess, hModule.value, modname, sizeof(modname))
                self.programList.append("".join([ i for i in modname if i != "\x00"]))
                #Clean up
                for i in range(modname._length_):
                    modname[i]="\x00"
                kernel.CloseHandle(hProcess)
        self.checkList()

    def checkList(self):
        if self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) in self.programList:
            logFunc("Relaunch was successful!\n")
            return True
        elif self.launchStatus == True and "%s"%(self.analyzerSoftwareEXE) not in self.programList:
            logFunc("Relaunch not successful. Will try again\n")
            self.launchStatus = False
            self.retryCount += 1
            if self.retryCount != self.retryCountLimit:
                self.restartAnalyzerSoftware()
            else:
                logFunc("All relaunch attempts were not successful-Please advise\n")
                return False
#Instantiate exeRestart
try:
    start = exeRestart("supervisor.exe", 2)
    if start.checkList() == True:
        sleep(60.0)
        testType = "Validation"
        restartOccurred = True
        #Clear data from dictionaries
        for x in paramMeas:
            aveParamMeasArray[x][:] = []
            paramMeasArray[x][:] = []
        NEXT = "StateDataArrayConfig"
    else:
        attemptCount += 1
        if attemptCount < 2:
            NEXT = "StateRestart"
        else:
            logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
            NEXT = "StateDone"
except Exception, err:
    logFunc("%r"%(err))
    attemptCount += 1
    if attemptCount < 2:
        NEXT = "StateRestart"
    else:
        logFunc("Analyzer failed to relaunch analyzer software-Please advise\n")
        NEXT = "StateDone"
"""

[StateDone]
action="""
#Set indicators to 0 when done
setTagalongData("ClientState", 0.0)
setTagalongData("TestStep", 0.0)
setTagalongData("ReadyState", 0.0)
setTagalongData("SeqIdx", 0.0)
GUI.popInfo("1D-CH4 Interference Test is now complete\n", coordParamConfig["StateDone"]["coordName"])
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""