# 2010-05-10 alex  This coordinator is used to calibrate the analyzer pressure sensor
# 2010-09-01 sze   Automated generation of calibration values

[Mode]
inject_mode=automatic

[Files]
output = "C:/Picarro/G2000/InstrConfig/Integration/PressureCal/PressureCal"

[Output]
y_parameter="y_parameter",%10.4f
pressure="pressure",%10.4f
date_time="date_time",%12.1f
slope="slope",%10.4f
intercept="intercept",%10.4f
comment="comment",%32s

[Setup]
initial = StateStart
final = StateDone
error = StateError

[StateStart]
action = """
from numpy import min, max, polyfit, polyval
from os import makedirs
from os.path import exists, join 
from time import strftime
from pylab import plot, grid, xlabel, ylabel, title, savefig

GUI.popPause("Verify that the instrument is open to room air", "")

outputDir = "C:/Picarro/G2000/InstrConfig/Integration/PressureCal"
if not exists(outputDir): makedirs(outputDir)
timeStr = strftime("%Y%m%d_%H%M%S")

def protfit(x,y):
    if len(x)>0:
        xmin, xmax, xptp = min(x), max(x), ptp(x)
        ymin, ymax, yptp = min(y), max(y), ptp(y)
        win = (y>=ymin+0.1*yptp) & (y<=ymax-0.2*yptp) & (x>=xmin+0.1*xptp) & (x<=xmax-0.2*xptp)
        if sum(win)>0:
            return polyfit(x[win],y[win],1)
    return (0.0,0.0)

writeMaster(join(outputDir,"SavedMaster_" + timeStr + ".ini"))    
stopDataLog("PressureCal")
measFinished = False
pressureRegSetpoint = 140
sleepTime = 10
pressureHighSetpoint = 200
pressureRegSetpoint = 140
yLabel = "y_parameter"
setMeasBuffer("analyze_PressureCal", [yLabel, "cavity_pressure"], 100)
clearMeasBuffer()
logFunc('Waiting for fitter to start\n')
NEXT = "StateWaitMeasuring"
"""

[StateWaitMeasuring]
action = """
meas = measGetBufferFirst()
if not meas or ("cavity_pressure" not in meas):
    sleep(30.0)
    logFunc('.')
    NEXT="StateWaitMeasuring"
else:
    logFunc('Opening cavity to atmospheric pressure\n')
    NEXT = "StateGotoAtmosphericPressure"
"""

[StateGotoAtmosphericPressure]
action = """
startInletValveControl(1000,0)
p0 = getCavityPressure()
sleep(5.0)
NEXT = "StateCheckPressureStable"
"""

[StateCheckPressureStable]
action = """
p1 = getCavityPressure()
if abs(p1-p0) < 0.01 and p1 > 600:
    NEXT = "StateAtAtmosphericPressure"
else:
    p0 = p1
    sleep(5.0)
    logFunc(".")
    NEXT = "StateCheckPressureStable"
"""

[StateAtAtmosphericPressure]
action = """
sleep(5.0)
pAtmosReading = getCavityPressure()
try:
    pAtmos = getBarometricPressure(12797538)
except:
    pAtmos = float(GUI.popTextEntry("Pressure can be read from Yahoo.\nPlease enter local pressure in Torr:",
                           "Enter Local Pressure", "750"))
pScale0, pOffset0 = getCavityPressureCalibration()
fileDataFunc(dict(comment="scale(orig)=%10.5e" % pScale0))
fileDataFunc(dict(comment="offset(orig)=%10.5f" % pOffset0))
fileDataFunc(dict(comment="P(atm)=%.3f" % pAtmos))
fileDataFunc(dict(comment="P(cav_open)=%.3f" % pAtmosReading))

startOutletValveControl(0, 0)
setValveMinDac("outlet",0)
clearMeasBuffer()
NEXT = "StateWaitUntilPressureLow"
"""

[StateWaitUntilPressureLow]
action = """
if getCavityPressure() > pressureHighSetpoint-50:
    sleep(1.0)
    NEXT = "StateWaitUntilPressureLow"
else:
    inletValve = 10000
    startOutletValveControl(pressureHighSetpoint, inletValve)
    sleep(5.0)
    startPressure = getCavityPressure()
    NEXT = "StateAdjustInletValve"
"""
  
[StateAdjustInletValve]
action = """
logFunc("Adjusting inlet valve.\n")
inletValve += 300
startOutletValveControl(pressureHighSetpoint, inletValve)
sleep(1.0)
result = getValveDacValues()
logFunc("Valve states: %s.\n" % result)

if (getCavityPressure() < startPressure + 10) and inletValve<64000:
    NEXT = "StateAdjustInletValve"
else:
    NEXT = "StateWaitHighPressure"
"""    
   
[StateWaitHighPressure] 
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateWaitHighPressure"
else:
    logFunc('.')
    if abs(meas["cavity_pressure"]-pressureHighSetpoint) <= 0.01*pressureHighSetpoint:
        yBuffer = []
        clearMeasBuffer()
        logFunc('Waiting for y to stabilize\n')
        NEXT = "StateMeasY"
    else:
        NEXT = "StateWaitHighPressure"
"""
    
[StateMeasY]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StateMeasY"
else:
    logFunc('.')
    yBuffer.append(meas[yLabel])
    if len(yBuffer) >= 30:
        yBuffer = yBuffer[-30:]
        meanY = mean(yBuffer)
        stdY = std(yBuffer)
        if stdY/meanY < 0.025:
            NEXT = "StateLogData"
        else:
            NEXT="StateMeasY"
    else:
        NEXT="StateMeasY"
"""
    
[StateLogData]
action = """
setMaxCavityPressureRate(0.2)
startOutletValveControl(0)
startDataLog("PressureCal")
pressureBuffer = []
yBuffer = []
slopeBuffer = []
interceptBuffer = []
clearMeasBuffer()
NEXT = "StatePressureDrop"
"""

[StatePressureDrop]
action = """
meas = measGetBufferFirst()
if not meas:
    sleep(sleepTime)
    logFunc('.')
    NEXT="StatePressureDrop"
else:
    logFunc('.')
    pressureBuffer.append(meas["cavity_pressure"])
    yBuffer.append(meas[yLabel])
    fit = protfit(asarray(yBuffer),asarray(pressureBuffer))
    slopeBuffer.append(fit[0])
    interceptBuffer.append(fit[1])
    fileDataFunc(dict(y_parameter=yBuffer[-1],
                      pressure=pressureBuffer[-1],
                      date_time=meas["measTime"],
                      slope=slopeBuffer[-1],
                      intercept=interceptBuffer[-1]))
    # Detect if done
    if len(pressureBuffer) >= 50:
        meanP = mean(pressureBuffer[-50:])
        drop = pressureBuffer[-50] - pressureBuffer[-1]
        stdP = std(pressureBuffer[-50:])
        if stdP < min([1, 0.01*meanP]):
            NEXT = "StateWriteResults"
        else:
            NEXT="StatePressureDrop"
    else:
        NEXT="StatePressureDrop"
"""

[StateWriteResults]
action="""
pZeroReading = interceptBuffer[-1]
pScale1 = pScale0*pAtmos/(pAtmosReading-pZeroReading)
pOffset1 = pAtmos*(pOffset0-pZeroReading)/(pAtmosReading-pZeroReading)
fileDataFunc(dict(comment="P(yZero)=%.3f" % pZeroReading))
fileDataFunc(dict(comment="scale(new)=%10.5e" % pScale1))
fileDataFunc(dict(comment="offset(new)=%10.5f" % pOffset1))
setCavityPressureCalibration(pScale1, pOffset1)

stopDataLog("PressureCal")
setMaxCavityPressureRate(10)
setValveMinDac("outlet",15000)
startOutletValveControl(pressureRegSetpoint,inletValve)

writeMaster(join(outputDir,"NewMaster_" + timeStr + ".ini"))
writeMaster()
yRange = asarray([0.0,max(yBuffer)])
plot(yBuffer,pressureBuffer,'.',yRange,polyval(fit,yRange))
grid(True)
xlabel('y Parameter')
ylabel('Cavity Pressure (torr)')
title('Slope = %.4f, Intercept = %.4f' % (fit[0],fit[1]))
savefig(join(outputDir,"PressureCal_" + timeStr + ".png"))
NEXT="StateDone"
"""

[StateDone]
action="""
GUI.popInfo("Pressure Calibration Complete","Pressure Calibration Coordinator")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""