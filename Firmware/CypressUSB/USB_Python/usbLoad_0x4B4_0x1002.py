from ctypes import byref, c_ubyte, create_string_buffer
from usb import LibUSB
from hexfile import HexFile
from time import sleep
from cStringIO import StringIO
from array import array

sampleHex1 = """
:0A0C1C0000010202030304040505B1
:1002A100E4F513F512F511F510C203C200C202C242
:1002B100011205537E087F008E238F24752B08754C
:1002C1002C1275210875221C752908752A4A752D6D
:1002D10008752E78EE54E070030203E5751400757D
:1002E10015808E168F17C374A49FFF74089ECF24A8
:1002F10002CF3400FEE48F0F8E0EF50DF50CF50BD9
:10030100F50AF509F508AF0FAE0EAD0DAC0CAB0B50
:10031100AA0AA909A808C31209815026E515250BC7
:10032100F582E514350AF58374CDF0E50B2401F56A
:100331000BE4350AF50AE43509F509E43508F50851
:1003410080C4E4F50BF50AF509F508AF0FAE0EAD63
:100351000DAC0CAB0BAA0AA909A808C3120981505C
:1003610031AE0AAF0BE5172FF582E5163EF583E0B6
:10037100FDE5152FF582E5143EF583EDF0EF24013F
:10038100F50BE43EF50AE43509F509E43508F5080D
:1003910080B985142385152474002480FF740834E2
:1003A100FFFEC3E52C9FF52CE52B9EF52BC3E5261F
:1003B1009FF526E5259EF525C3E5289FF528E52728
:1003C1009EF527C3E5229FF522E5219EF521C3E590
:1003D1002A9FF52AE5299EF529C3E52E9FF52EE5ED
:1003E1002D9EF52DD2E843D82090E668E04409F02F
:1003F10090E65CE0443DF0D2AF90E680E020E1057C
:10040100D204120AA190E680E054F7F0538EF8C2AC
:1004110003300105120080C2013003291207FE508A
:1004210024C2031206DB20001690E682E030E704C6
:10043100E020E1EF90E682E030E604E020E0E41223
:0A0441000AD0120C4212063880C7E0
:1000800090E6B9E0700302012E1470030201AB2464
:10009000FE700302022E24FB700302012814700379
:1000A0000201221460701460732405600302028D43
:1000B000120C44400302029990E6BBE024FE602249
:1000C00014603324FD601114602224067045E5237A
:1000D00090E6B3F0E5248034E52B90E6B3F0E52C10
:1000E000802AE52590E6B3F0E5268020E52790E616
:1000F000B3F0E528801690E6BAE0FF120AFCAA06E3
:10010000A907EA49600DEE90E6B3F0EF90E6B4F08F
:10011000020299020292120C0A020299120C2E0299
:100120000299120C26020299120BF8020299120C83
:1001300046400302029990E6B8E0247F60151460FF
:100140001924027063A200E43325E0FFA202E43325
:100150004F8041E490E740F0803F90E6BCE0547E61
:10016000FF7E00E0D394807C0040047D0180027D0E
:1001700000EC4EFEED4F241CF582740C3EF583E43A
:1001800093FF3395E0FEEF24A1FFEE34E68F82F576
:1001900083E0540190E740F0E4A3F090E68AF09009
:1001A000E68B7402F0020299020292120C4840039C
:1001B00002029990E6B8E024FE6016240260030271
:1001C000029990E6BAE0B40105C200020299020267
:1001D0009290E6BAE0705590E6BCE0547EFF7E0057
:1001E000E0D394807C0040047D0180027D00EC4ED1
:1001F000FEED4F241CF582740C3EF583E493FF332F
:1002000095E0FEEF24A1FFEE34E68F82F583E05403
:10021000FEF090E6BCE05480131313541FFFE0542B
:100220000F2F90E683F0E04420F0806D8064120C84
:100230004A506690E6B8E024FE60192402705A9095
:10024000E6BAE0B40104D200804F90E6BAE064025E
:100250006047803E90E6BCE0547EFF7E00E0D39491
:10026000807C0040047D0180027D00EC4EFEED4F5D
:10027000241CF582740C3EF583E493FF3395E0FE75
:10028000EF24A1FFEE34E68F82F5838008120B285D
:10029000500790E6A0E04401F090E6A0E04480F032
:0102A000223B
:03003300020C3E7E
:040C3E0053D8EF3266
:100800001201000200000040B404021000000102C6
:1008100000010A06000200000040010009022E004B
:1008200001010080320904000004FF0000000705F8
:10083000020200020007050402000200070586020A
:100840000002000705880200020009022E000101D3
:100850000080320904000004FF00000007050202C6
:100860004000000705040240000007058602400022
:10087000000705880240000004030904100350002B
:10088000690063006100720072006F00180350007D
:10089000690063006100720072006F002D00550056
:0608A000530042000000BD
:100BE400501000C0F9A4B0999282F880988883C606
:030BF400A1868E49
:1005530090E600E054E74410F090E601E04440F0F8
:1005630090E61074A0F090E611F000000090E612FF
:1005730074A2F000000090E61374A0F00000009055
:10058300E61474E2F000000090E61574E0F0000059
:100593000090E6917480F0000000F000000090E607
:1005A30095F0000000F0E4FFFEE4F518F51974007F
:1005B3002519F58274F83518F583E519F00519E561
:1005C30019700205186440451870E3000000E490B8
:1005D300E698F000000090E6997440F00FBF000128
:1005E3000EEF64024E70C2E4FEFFE4F518F519C382
:1005F30074409519FD74002519F58274FC3518F5BE
:1006030083EDF00519E5197002051864404518706B
:10061300DE000000E490E69CF000000090E69D748C
:1006230040F00FBF00010EEF64024E70BD43AF01F7
:05063300D200020C36AC
:10063800E4F518F519E5AA20E511000000E490E6B4
:1006480098F000000090E6997440F0E5AA20E711C0
:10065800000000E490E69CF000000090E69D7440E5
:10066800F0E5AA20E03D790074F0F59A7400F59B56
:1006780090E690E0FE90E691E07C002400FFEC3EDE
:10068800FEE4FDC3ED9FEC9E500D90E67BE0F5186F
:100698000DBD00010C80EC75190100000090E69179
:1006A8007480F0E5AA20E20900000090E6957480C5
:1006B800F0E519601DE518540F2400F582E43410A4
:1006C800AB82FA7D017F21120B6C7F21120A05E4AF
:0206D800F51912
:0106DA0022FD
:0207FE00D32204
:020C4200D322BB
:020C4400D322B9
:080C260090E6BAE0F530D3229C
:100BF80090E740E530F0E490E68AF090E68B04F068
:020C0800D322F5
:080C2E0090E6BAE0F52FD32295
:100C0A0090E740E52FF0E490E68AF090E68B04F056
:020C1A00D322E3
:020C4600D322B7
:020C4800D322B5
:020C4A00D322B3
:100B280090E6B9E0242F600D04701990E604E0FF08
:100B3800430780800890E604E0FF53077F00000029
:070B4800EFF08002D322C38D
:010B4F002283
:100B8800C0E0C083C082D2015391EF90E65D74014A
:080B9800F0D082D083D0E032DE
:100BB800C0E0C083C0825391EF90E65D7404F0D02A
:060BC80082D083D0E03270
:100BCE00C0E0C083C0825391EF90E65D7402F0D016
:060BDE0082D083D0E0325A
:1009CF00C0E0C083C082852925852A268526828599
:1009DF002583A37402F08521278522288528828507
:1009EF002783A37407F05391EF90E65D7410F0D056
:0609FF0082D083D0E0323B
:100BA000C0E0C083C082D2035391EF90E65D740829
:080BB000F0D082D083D0E032C6
:10099200C0E0C083C08290E680E030E72085212558
:1009A200852226852682852583A37402F085292740
:1009B200852A28852882852783A37407F05391EF1F
:0D09C20090E65D7420F0D082D083D0E0324A
:010C4C003275
:010C4D003274
:010C4E003273
:010C4F003272
:010C50003271
:010C51003270
:010C5200326F
:010C5300326E
:010C5400326D
:010C5500326C
:010C5600326B
:010C5700326A
:010C58003269
:010C59003268
:010C5A003267
:010C5B003266
:010C5C003265
:010C5D003264
:010C5E003263
:010C5F003262
:010C60003261
:010C61003260
:010C6200325F
:010C6300325E
:010C6400325D
:010C6500325C
:010C6600325B
:010C6700325A
:010C68003259
:010C69003258
:010C6A003257
:010C6B003256
:010C6C003255
:010C6D003254
:010C6E003253
:010C6F003252
:100AD00090E682E030E004E020E60B90E682E03031
:100AE000E119E030E71590E680E04401F07F147EE4
:0C0AF000001207B890E680E054FEF022EF
:1006DB0090E682E044C0F090E681F0438701000091
:0406EB0000000022E9
:100AA10030040990E680E0440AF0800790E680E097
:100AB1004408F07FDC7E051207B890E65D74FFF014
:0F0AC10090E65FF05391EF90E680E054F7F0225B
:080C3600E4F51FD2E9D2AF2260
:100A050090E678E020E6F9C2E990E678E04480F0E7
:100A1500EF25E090E679F090E678E030E0F990E6B1
:100A250078E04440F090E678E020E6F990E678E05A
:060A350030E1D6D2E922F7
:100A6F00A90790E678E020E6F9E51F702390E67875
:100A7F00E04480F0E925E090E679F08D1AAF03A904
:100A8F0007751B018A1C891DE4F51E751F01D322F2
:020A9F00C32270
:100A3B00A90790E678E020E6F9E51F702590E678A7
:100A4B00E04480F0E925E0440190E679F08D1AAF9F
:100A5B0003A907751B018A1C891DE4F51E751F036D
:040A6B00D322C322AD
:03004B0002044B61
:10044B00C0E0C083C082C085C084C086758600C0F2
:10045B00D075D000C000C001C002C003C006C007E9
:10046B0090E678E030E206751F0602053590E678D7
:10047B00E020E10CE51F64026006751F07020535DD
:10048B00E51F24FE605F14603624FE700302052610
:10049B0024FC700302053224086003020535AB1BF4
:1004AB00AA1CA91DAF1E051E8F827583001209326F
:1004BB0090E679F0E51E651A7070751F05806B90DC
:1004CB00E679E0AB1BAA1CA91DAE1E8E82758300BC
:1004DB0012095F751F02E51A6401704E90E678E011
:1004EB004420F08045E51A24FEB51E0790E678E01F
:1004FB004420F0E51A14B51E0A90E678E04440F06B
:10050B00751F0090E679E0AB1BAA1CA91DAE1E8ED1
:10051B008275830012095F051E800F90E678E04418
:10052B0040F0751F008003751F005391DFD007D07B
:10053B0006D003D002D001D000D0D0D086D084D04A
:08054B0085D082D083D0E0329C
:020AFC00A90748
:100AFE00AE2DAF2E8F828E83A3E064037017AD01EF
:100B0E0019ED7001228F828E83E07C002FFDEC3E6A
:090B1E00FEAF0580DF7E007F00C0
:010B270022AB
:100B5000120A3BE51F24FA600E146006240770F3A6
:0C0B6000D322E4F51FD322E4F51FD322BA
:100B6C00120A6FE51F24FA600E146006240770F356
:0C0B7C00D322E4F51FD322E4F51FD3229E
:1007B8008E188F1990E600E054187012E51924017C
:1007C800FFE43518C313F518EF13F519801590E6F3
:1007D80000E05418FFBF100BE51925E0F519E518DE
:1007E80033F518E5191519AE18700215184E60057D
:0607F8001206EF80EE2264
:1006EF007400F58690FDA57C05A3E582458370F91E
:0106FF0022D8
:03004300020700B1
:03005300020700A1
:10070000020B8800020BCE00020BB800020BA00007
:100710000209CF0002099200020C4C00020C4D00AD
:10072000020C4E00020C4F00020C5000020C510053
:10073000020C5200020C5300020C5400020C550033
:10074000020C5600020C4D00020C5700020C58001F
:10075000020C5900020C5A00020C5B00020C5C00F7
:10076000020C5D00020C4D00020C4D00020C4D000D
:10077000020C5E00020C5F00020C6000020C6100C3
:10078000020C6200020C6300020C6400020C6500A3
:10079000020C6600020C6700020C6800020C690083
:1007A000020C6A00020C6B00020C6C00020C6D0063
:0807B000020C6E00020C6F0048
:030000000208A64D
:0C08A600787FE4F6D8FD7581300208ED83
:10093200BB010CE58229F582E5833AF583E022507A
:1009420006E92582F8E622BBFE06E92582F8E222C4
:0D095200E58229F582E5833AF583E49322DE
:10095F00F8BB010DE58229F582E5833AF583E8F0CE
:10096F00225006E92582C8F622BBFE05E92582C87A
:02097F00F22262
:10098100EB9FF5F0EA9E42F0E99D42F0E89C45F0CC
:010991002243
:1008B2000202A1E493A3F8E493A34003F68001F2B9
:1008C20008DFF48029E493A3F85407240CC8C33347
:1008D200C4540F4420C8834004F456800146F6DF16
:1008E200E4800B0102040810204080900BE4E47EB7
:1008F200019360BCA3FF543F30E509541FFEE4930B
:10090200A360010ECF54C025E060A840B8E493A3D1
:10091200FAE493A3F8E493A3C8C582C8CAC583CAFC
:10092200F0A3C8C582C8CAC583CADFE9DEE780BEB4
:010BF70000FD
:00000001FF
"""

if __name__ == "__main__":
    myVid = 0x4B4
    myPid = 0x8613
#    myPid = 0x81
#    myVid = 0x547
#    myPid = 0x1002
    
    epOut = 0x02
        
    usb = LibUSB()
    usb.usbInit()
    print "usbFindBusses returns %d"  % usb.usbFindBusses()
    print "usbFindDevices returns %d" % usb.usbFindDevices()
    handle = None
    for bus in usb.usbBusses():
        print bus.dirname
        for pDev in usb.usbDevices(bus):
            dev = pDev.contents
            print "%s,%x,%x" % (dev.filename, dev.descriptor.idVendor, dev.descriptor.idProduct)
            if dev.descriptor.idVendor == myVid and dev.descriptor.idProduct == myPid:
                handle = usb.usbOpen(pDev)
    if handle == None:
        raise ValueError("Device with VID: 0x%x, PID: 0x%x not found" % (myVid,myPid))
    if usb.usbSetConfiguration(handle,1) < 0:
        usb.usbClose(handle)
        raise ValueError("Setting config 1 failed")
    if usb.usbClaimInterface(handle,0) < 0:
        usb.usbClose(handle)
        raise ValueError("Claiming interface 0 failed")

    # Hold the 8051 in reset by sending it a vendor command
    usb.usbControlMsg(handle,0x40,0xA0,0xE600,0x00,byref(c_ubyte(0x1)),1,5000)

    # Use the same vendor command to load in the hexadecimal data
    fp = StringIO(sampleHex1)
    hexFile = HexFile(fp)
    regions = hexFile.process()

    block = 128 # Maximum length for download    
    for r in regions:
        # r.data contains the data as a list of bytes.
        n = len(r.data)
        addr = r.address
        start = 0
        # Split into chunks of size at most "block" for sending to the FX2
        while n > block:
            usb.usbControlMsg(handle,0x40,0xA0,addr+start,0x00,
            create_string_buffer("".join(r.data[start:start+block]),block),block,5000)
            n -= block
            start += block
        if n>0:
            usb.usbControlMsg(handle,0x40,0xA0,addr+start,0x00,
            create_string_buffer("".join(r.data[start:start+n]),n),n,5000)

    # Release the 8051 reset, allowing it to renumerate
    usb.usbControlMsg(handle,0x40,0xA0,0xE600,0x00,byref(c_ubyte(0x0)),1,5000)

    usb.usbReleaseInterface(handle,0)
    usb.usbClose(handle)
