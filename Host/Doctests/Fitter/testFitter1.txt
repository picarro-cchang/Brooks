This is an attempt to test the fitter using mocking and doctests. We want to see how rapidly the fitter can perform fits of various types, 
using simulated data and fitting scripts.

A compiled Python script is responsible for carrying out all fitting operations

>>> import sys
>>> import numpy
>>> from mocker import Mocker, ARGS, KWARGS
>>> mocker = Mocker()
>>> from Host.Fitter.fitterThread import Fitter
>>> from Host.Fitter.fitterCore   import RdfData
>>> from Host.Common.timestamp    import datetimeToTimestamp
>>> import datetime

We mock the Log function to display errors
>>> mock_Log = mocker.replace('Host.Common.EventManagerProxy.Log')
>>> _=mock_Log(ARGS,KWARGS)
>>> mocker.call(lambda *a,**k: sys.stdout.write("Log: %s, %s\n" % (a,k)))
>>> mocker.count(0,None)

We need a mock CmdFIFO

>>> mock_CmdFIFOServer = mocker.replace('Host.Common.CmdFIFO.CmdFIFOServer')
>>> _=mock_CmdFIFOServer(ARGS,KWARGS)
>>> mocker.call(lambda *a,**k: sys.stdout.write("CmdFIFOServer %s, %s\n" % (a,k)))
>>> mocker.count(0,None)

Having set up the mock objects, we call replay and start the actual tests
>>> mocker.replay()
>>> fitter = Fitter("testFitter1.ini")
>>> fitter.scriptName
'Fitter1Script.py'
>>> fitter.iniBasePath
''

Just compile the fitter script into a code object for subsequent use:

>>> fitter.code = fitter.compileScript(fitter.scriptName)
>>> fitter.code # doctest: +ELLIPSIS
<code object ... file "Fitter1Script.py", ...>

We need to supply a spectrum in the form of an RDFData object. This can be constructed from a dictionary

>>> STARTTIME = datetime.datetime(2010,1,1,0,0,0,0)
>>> startTimestamp = datetimeToTimestamp(STARTTIME)
>>> startTimestamp
63397900800000L

>>> rdData = {}
>>> rdData["correctedAbsorbance"]   = numpy.array([1.0,1.1,1.2])
>>> rdData["uncorrectedAbsorbance"] = numpy.array([1.2,1.3,1.4])
>>> rdData["subschemeId"] = numpy.array([1,1,1])
>>> rdData["timestamp"]   = numpy.array([startTimestamp,startTimestamp+100,startTimestamp+200])
>>> rdData["waveNumber"]  = numpy.array([6237.1,6237.2,6237.3])
>>> rdData["tunerValue"]  = numpy.array([35000,35001,35002])

>>> rdfGen = RdfData.getSpectraDict(dict(rdData=rdData,
...                                      sensorData={},
...                                      controlData=dict(SpectrumQueueSize=numpy.array([0]))))
>>> rdfGen # doctest: +ELLIPSIS
<generator object ...>
>>> fitter.dataEnviron["DATA"] = rdfGen.next()
>>> fitter.dataEnviron["RESULT"] = {}
>>> fitter.dataEnviron["BASEPATH"] = fitter.iniBasePath
>>> fitter.dataEnviron["INIT"] = True

>>> exec fitter.code in fitter.dataEnviron
>>> ANALYSIS = fitter.dataEnviron["ANALYSIS"]
>>> RESULT = fitter.dataEnviron["RESULT"]

>>> "%.3g" % RESULT['cLossMean']  == "%.3g" % numpy.mean(rdData["correctedAbsorbance"])
True
>>> "%.3g" % RESULT['uLossMean']  == "%.3g" % numpy.mean(rdData["uncorrectedAbsorbance"])
True

>>> mocker.restore()
>>> mocker.verify()
