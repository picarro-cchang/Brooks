Tests RDFrequencyConverter ringdown filtering
=============================================

>>> import minimock
>>> import numpy as np
>>> from Host.RDFrequencyConverter.RDFrequencyConverter import RDFrequencyConverter, SchemeBasedCalibrator
>>> import Host.Common.SharedTypes
>>> from Host.autogen import interface

We first wish to check the rdFilter within RDFrequencyConverter which is responsible for selecting out calibration rows and detecting when a new scheme is encountered

>>> configFile = 'RDFrequencyConverter.ini'

*****************************************************************
Creating a RDFrequencyConverter with mocked SchemeBasedCalibrator
*****************************************************************

>>> minimock.mock("Host.Common.Broadcaster.Broadcaster")
>>> minimock.mock("Host.Common.Listener.Listener")
>>> minimock.mock("Host.Common.CmdFIFO.CmdFIFOServer",returns=minimock.Mock("CmdFIFOServer",tracker=None))

>>> minimock.mock("Host.RDFrequencyConverter.RDFrequencyConverter.SchemeBasedCalibrator",returns=minimock.Mock("SchemeBasedCalibrator"))
>>> rdf = RDFrequencyConverter(configFile) #doctest: +ELLIPSIS
Called Host.Common.CmdFIFO.CmdFIFOServer(
    ('', 50015),
    ServerDescription='Frequency Converter for CRDS hardware',
    ServerName='FrequencyConverter',
    threaded=True)
Called Host.Common.Listener.Listener(
    <Queue.Queue instance at ...>,
    40030,
    <class '...RingdownEntryType'>,
    logFunc=<function Log at ...>,
    name='Ringdown frequency converter listener',
    retry=True,
    streamFilter=<bound method RDFrequencyConverter.rdFilter of <...RDFrequencyConverter object at ...>>)
Called Host.Common.Broadcaster.Broadcaster(
    logFunc=<function Log at ...>,
    name='Ringdown frequency converter broadcaster',
    port=40031)
Called Host.RDFrequencyConverter.RDFrequencyConverter.SchemeBasedCalibrator()

Initially the lastSchemeCount should be -1, so that any scheme sequence in the ringdown entry will trigger the start of a new scheme
>>> rdf.sbc #doctest: +ELLIPSIS
<...SchemeBasedCalibrator...>

The currentCalSpectrum should be set to empty since there have not yet been any calibration rows
>>> rdf.sbc.currentCalSpectrum = {}
>>> rdf.lastSchemeCount
-1

**************************************************************
Checking treatment of schemeCounter_ for indicating new scheme
**************************************************************

Now inject some ringdowns through the rdFilter method of the RDFrequencyConverter

>>> entry = interface.RingdownEntryType()

In the DSP spectrum controller, there is an incrCounter_ and a schemeCounter_ defined within
the SpectCntrlParams type. The incrCounter_ is incremented whenever a subschemeId is encountered
with the high bit set OR at the end of a scheme file, and this is used to separate spectra 
within a scheme or between schemes. The schemeCounter_ is incremented when an entire scheme 
is stated, such as when Start Acquisition is pressed (and the spectrum controller state is
SPECT_CNTRL_StartingState) or at the end of a scheme file. The low-order four bits of 
entry.status (as specified by RINGDOWN_STATUS_SequenceMask in RingdownEntryType) is from
schemeCounter_. Other bits in entry.status include RINGDOWN_STATUS_SchemeActiveMask, 
RINGDOWN_STATUS_SchemeCompleteAcqStoppingMask, RINGDOWN_STATUS_SchemeCompleteAcqContinuingMask
and RINGDOWN_STATUS_RingdownTimeout.

The clear() function should only be called when the schemeCounter_ variable changes. The lastSchemeCount
attribute should contain the 4 LSB of the schemeCounter_. The rdFilter passes entry through unchanged.

>>> entry.status = interface.RINGDOWN_STATUS_SchemeActiveMask + 1
>>> entry == rdf.rdFilter(entry)
Called SchemeBasedCalibrator.clear()
True
>>> rdf.lastSchemeCount == 1
True
>>> entry.status = interface.RINGDOWN_STATUS_SchemeActiveMask + 0x75
>>> entry == rdf.rdFilter(entry)
Called SchemeBasedCalibrator.clear()
True
>>> rdf.lastSchemeCount == 5
True

In the following, the scheme count does not change, so clear() should not be called.
>>> entry.status = interface.RINGDOWN_STATUS_SchemeActiveMask + 0x75
>>> entry == rdf.rdFilter(entry)
True
>>> rdf.lastSchemeCount == 5
True

*******************************************
Converting Frequency Scheme To Angle Scheme
*******************************************

Set up a frequency scheme with a calibration rows, and convert to an angle scheme
>>> scheme = Host.Common.SharedTypes.Scheme("testFreqScheme.sch")
>>> rdf.RPC_wrFreqScheme(5,scheme)

Initially, if we try to convert the scheme, the system should complain that no frequency
converter is available
>>> rdf.RPC_convertScheme(5) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
ValueError: No frequency converter is present for virtual laser 2.

We now define a mock frequency converter for the virtual laser. The two functions for converting wave number to WLM angle and WLM angle
to laser temperature are used by the scheme conversion

Mocking a Frequency Converter
-----------------------------

>>> mFC = minimock.Mock("FrequencyConverter")
>>> mFC.waveNumber2ThetaCal = minimock.Mock("FrequencyConverter.waveNumber2ThetaCal",returns_func = lambda w: 10*(np.array(w)-6100.0))
>>> mFC.thetaCal2LaserTemp  = minimock.Mock("FrequencyConverter.thetaCal2LaserTemp",returns_func = lambda th: 25 + np.array(th))

>>> rdf.freqConverter = {1 : mFC}
>>> rdf.RPC_convertScheme(5)
Called FrequencyConverter.waveNumber2ThetaCal(
    array([ 6100.01,  6100.02,  6100.03,  6100.04,  6100.05]))
Called FrequencyConverter.thetaCal2LaserTemp(
    array([ 0.1,  0.2,  0.3,  0.4,  0.5]))
>>> angleScheme = rdf.angleScheme[5]

>>> np.testing.assert_array_almost_equal(angleScheme.setpoint,np.array([0.1,0.2,0.3,0.4,0.5]))
>>> np.testing.assert_array_almost_equal(angleScheme.laserTemp,np.array([25.1,25.2,25.3,25.4,25.5]))

************************************
Check processing of Calibration Rows
************************************

The following variables are used to allow calibration to occur only when points are close enough to the setpoints
>>> rdf.dthetaMax = 0.02
>>> rdf.dtempMax = 1.7

Now simulate a calibration row. First introduce one in a scheme which is not present to throw an error
>>> entry.subschemeId = interface.SUBSCHEME_ID_IsCalMask
>>> entry.schemeRow = 1
>>> entry.schemeTable = 6

>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Traceback (most recent call last):
...
KeyError: 6

>>> entry.subschemeId = interface.SUBSCHEME_ID_IsCalMask
>>> entry.schemeRow = 1
>>> entry.schemeTable = 5
>>> entry.wlmAngle = 0.2
>>> entry.laserTemperature = 25.2

>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Called SchemeBasedCalibrator.processCalPoint(
    <...RingdownEntryType object ...>)
True

Check out tolerance behavior
>>> entry.wlmAngle = 0.2 + 1.1*rdf.dthetaMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
True

>>> entry.wlmAngle = 0.2 + 2*np.pi
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Called SchemeBasedCalibrator.processCalPoint(
    <...RingdownEntryType object ...>)
True

>>> entry.wlmAngle = 0.2 + 2*np.pi - 0.1*rdf.dthetaMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Called SchemeBasedCalibrator.processCalPoint(
    <...RingdownEntryType object ...>)
True

>>> entry.wlmAngle = 0.2 + 2*np.pi - 1.1*rdf.dthetaMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
True

>>> entry.wlmAngle = 0.2 - 8*np.pi
>>> entry.laserTemperature = 25.2
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Called SchemeBasedCalibrator.processCalPoint(
    <...RingdownEntryType object ...>)
True

>>> entry.laserTemperature = 25.2 + 1.1*rdf.dtempMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
True

>>> entry.laserTemperature = 25.2 - 1.1*rdf.dtempMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
True

>>> entry.laserTemperature = 25.2 - 0.9*rdf.dtempMax
>>> entry == rdf.rdFilter(entry) #doctest: +ELLIPSIS
Called SchemeBasedCalibrator.processCalPoint(
    <...RingdownEntryType object ...>)
True
