This file contains doctests for the sample manager application in the G2000 platform.

>>> from Host.SampleManager.SampleManager import SampleManager
>>> import sys
>>> from Host.Common.InstErrors import INST_ERROR_OKAY

>>> from mocker import Mocker, ARGS, KWARGS
>>> mocker = Mocker()
>>> mock_SampleManager = mocker.mock()
>>> _=mock_SampleManager.state
>>> mocker.result("Idle")
>>> _=mock_SampleManager.state
>>> mocker.result(('RPC_FlowStart',(),{}))
>>> _=mock_SampleManager.debug
>>> mocker.result(False)
>>> mocker.count(0,None)
>>> _=mock_SampleManager.mode
>>> mocker.result(None)
>>> mocker.count(0,None)
>>> _=mock_SampleManager.cmdQueue.put(ARGS,KWARGS)
>>> mocker.call(lambda *a,**k: sys.stdout.write("cmdQueue.put %s, %s\n" % (a,k)))
>>> mocker.count(0,None)
>>> mocker.replay()
>>> SampleManager.RPC_FlowStart.im_func(mock_SampleManager) == INST_ERROR_OKAY # doctest: +ELLIPSIS
cmdQueue.put ((<function RPC_FlowStart at ...>, (), {}),), {}
True
>>> SampleManager.RPC_FlowStart.im_func(mock_SampleManager) == INST_ERROR_OKAY
True
>>> mocker.restore()
>>> mocker.verify()


#
# >>> SampleManager.RpcWrapStateChangeCalls

>>> SampleManager.RPC_FlowStart.im_func.__name__
'RPC_FlowStart'
>>> SampleManager.RPC_FlowStart.im_func.__doc__
'START FLOW'





    def RpcWrapStateChangeCalls(func):
        def wrapper(self,*args,**kwargs):
            if self.state[0] == func.__name__:
                return INST_ERROR_OKAY
            if self.mode != None:
                self.mode._terminateCalls  = True
            if self.debug==True: print "Q: %s" % func.__name__
            self.cmdQueue.put( (func, args, kwargs) )
            return INST_ERROR_OKAY
        wrapper.__name__ = func.__name__
        wrapper.__dict__ = func.__dict__
        wrapper.__doc__ = func.__doc__
        return wrapper





>>> from Host.Common.CustomConfigObj import CustomConfigObj



# >>> from Host.SampleManager.SampleManager import SampleManager
# >>> from mocker import Mocker
# >>> mocker = Mocker()
# >>> mock_CustomConfigObj = mocker.replace('Host.Common.CustomConfigObj.CustomConfigObj')
# >>> mock_CustomConfigObj("test.ini") # doctest: +ELLIPSIS
# <mocker.Mock object ...>
# >>> mocker.result(CustomConfigObj(["[MAIN]","[DEFAULT_CONFIGS]"]))
# >>> mocker.replay()
# >>> s = SampleManager("test.ini")
# >>> mocker.restore()
# >>> mocker.verify()