#!/usr/bin/python
#
# FILE:
#   interface.py
#
# DESCRIPTION:
#   Automatically generated Python interface file for Picarro gas analyzer.
#    DO NOT EDIT.
#
# SEE ALSO:
#   Specify any related information.
#
#  Copyright (c) 2008 Picarro, Inc. All rights reserved
#

from ctypes import c_byte, c_uint, c_int, c_ushort, c_short
from ctypes import c_longlong, c_float, Structure, Union

class RegInfo(object):
    "Class to store register access information"
    def __init__(self,name,type,persistence,firstVersion,access):
        self.name = name
        self.type = type
        self.persistence = persistence
        self.firstVersion = firstVersion
        self.readable = "r" in access
        self.writable = "w" in access


# Interface Version
interface_version = 1

error_messages = []
STATUS_OK = 0
error_messages.append("Status OK")
ERROR_UNAVAILABLE = -1
error_messages.append("Data not available")
ERROR_CRC_BAD = -2
error_messages.append("CRC error in host command")
ERROR_DSP_UNEXPECTED_SEQUENCE_NUMBER = -3
error_messages.append("DSP detected host command out of sequence")
ERROR_HOST_UNEXPECTED_SEQUENCE_NUMBER = -4
error_messages.append("Host received acknowledgement out of sequence")
ERROR_BAD_COMMAND = -5
error_messages.append("Unrecognized host command")
ERROR_BAD_NUM_PARAMS = -6
error_messages.append("Incorrect number of parameters calling a DSP function")
ERROR_OUTSIDE_SHAREDMEM = -7
error_messages.append("Attempt to access outside shared memory")
ERROR_UNKNOWN_REGISTER = -8
error_messages.append("Invalid register specified")
ERROR_NOT_READABLE = -9
error_messages.append("Register is not readable")
ERROR_NOT_WRITABLE = -10
error_messages.append("Register is not writable")
ERROR_READ_FAILED = -11
error_messages.append("Register read failed")
ERROR_WRITE_FAILED = -12
error_messages.append("Register write failed")
ERROR_BAD_FILTER_COEFF = -13
error_messages.append("Invalid filter coefficients")
ERROR_BAD_VALUE = -14
error_messages.append("Invalid value")
ERROR_RD_BAD_RINGDOWN = -15
error_messages.append("Bad ringdown")
ERROR_RD_INSUFFICIENT_DATA = -16
error_messages.append("Insufficient data for ringdown calculation")

# Constant definitions
# Number of points in controller waveforms
CONTROLLER_WAVEFORM_POINTS = 1000
# Number of points for waveforms on controller rindown pane
CONTROLLER_RINGDOWN_POINTS = 10000
# Base address for DSP data memory
DSP_DATA_ADDRESS = 0x80800000
# Number of ringdown entries
NUM_RINGDOWN_ENTRIES = 2048
# Base address for DSP shared memory
SHAREDMEM_ADDRESS = 0x20000
# Base address for ringdown memory
RDMEM_ADDRESS = 0xA0000000
# Offset for software registers in DSP shared memory
REG_OFFSET = 0x0
# Offset for sensor stream area in DSP shared memory
SENSOR_OFFSET = 0x1B00
# Offset for message area in DSP shared memory
MESSAGE_OFFSET = 0x2B00
# Offset for group table in DSP shared memory
GROUP_OFFSET = 0x2F00
# Offset for operation table in DSP shared memory
OPERATION_OFFSET = 0x2F20
# Offset for operand table in DSP shared memory
OPERAND_OFFSET = 0x3300
# Offset for environment table in DSP shared memory
ENVIRONMENT_OFFSET = 0x3700
# Offset for host area in DSP shared memory
HOST_OFFSET = 0x3F00
# Size (in 32-bit ints) of DSP shared memory
SHAREDMEM_SIZE = 0x4000
# Number of software registers
REG_REGION_SIZE = (SENSOR_OFFSET - REG_OFFSET)
# Number of 32-bit ints in sensor area
SENSOR_REGION_SIZE = (MESSAGE_OFFSET - SENSOR_OFFSET)
# Number of sensor steam entries in sensor area
NUM_SENSOR_ENTRIES = SENSOR_REGION_SIZE>>2
# Number of 32-bit ints in message area
MESSAGE_REGION_SIZE = (GROUP_OFFSET - MESSAGE_OFFSET)
# Number of messages in message area
NUM_MESSAGES = MESSAGE_REGION_SIZE>>5
# Number of 32-bit ints in group table
GROUP_TABLE_SIZE = (OPERATION_OFFSET - GROUP_OFFSET)
# Number of 32-bit ints in operation table
OPERATION_TABLE_SIZE = (OPERAND_OFFSET - OPERATION_OFFSET)
# Number of operations in operation table
NUM_OPERATIONS = OPERATION_TABLE_SIZE>>1
# Number of 32-bit ints in operand table
OPERAND_TABLE_SIZE = (ENVIRONMENT_OFFSET - OPERAND_OFFSET)
# Number of 32-bit ints in environment table
ENVIRONMENT_TABLE_SIZE = (HOST_OFFSET - ENVIRONMENT_OFFSET)
# Number of 32-bit ints in host area
HOST_REGION_SIZE = (SHAREDMEM_SIZE - HOST_OFFSET)
# Number of bits in EMIF address
EMIF_ADDR_WIDTH = 20
# Number of bits in EMIF address
EMIF_DATA_WIDTH = 32
# Number of bits in an FPGA register
FPGA_REG_WIDTH = 16
# Mask to access ringdown memory
FPGA_RDMEM_MASK = 0
# Mask to access FPGA registers
FPGA_REG_MASK = 1
# Number of bits in ringdown data
RDMEM_DATA_WIDTH = 18
# Number of bits in ringdown metadata
RDMEM_META_WIDTH = 16
# Number of bits in ringdown parameters
RDMEM_PARAM_WIDTH = 16
# Number of address bits reserved for a ringdown region in each bank
RDMEM_RESERVED_BANK_ADDR_WIDTH = 12
# Number of address bits for one bank of data
DATA_BANK_ADDR_WIDTH = 12
# Number of address bits for one bank of metadata
META_BANK_ADDR_WIDTH = 12
# Number of address bits for one bank of parameters
PARAM_BANK_ADDR_WIDTH = 6
# Tuner value at ringdown index in parameter array
PARAM_TUNER_AT_RINGDOWN_INDEX = 10
# Metadata address at ringdown index in parameter array
PARAM_META_ADDR_AT_RINGDOWN_INDEX = 11
# Number of in-range samples to acquire lock
TEMP_CNTRL_LOCK_COUNT = 5
# Number of out-of-range samples to lose lock
TEMP_CNTRL_UNLOCK_COUNT = 5
# Code to confirm FPGA is programmed
FPGA_MAGIC_CODE = 0xC0DE0001
# Extra bits in accumulator for ringdown simulator
RDSIM_EXTRA = 4
# Number of bits for wavelength monitor ADCs
WLM_ADC_WIDTH = 16

class DataType(Union):
    _fields_ = [
    ("asFloat",c_float),
    ("asUint",c_uint),
    ("asInt",c_int)
    ]

class DIAG_EventLogStruct(Structure):
    _fields_ = [
    ("time",c_uint),
    ("cause",c_uint),
    ("etalonPd1Current",c_uint),
    ("refPd1Current",c_uint),
    ("etalonPd2Current",c_uint),
    ("refPd2Current",c_uint),
    ("etalonTemp",c_uint),
    ("cavityTemp",c_uint),
    ("warmChamberTemp",c_uint),
    ("hotChamberTecHeatsinkTemp",c_uint),
    ("warmChamberTecHeatsinkTemp",c_uint),
    ("laser1Temp",c_uint),
    ("laser2Temp",c_uint),
    ("laserCurrent",c_uint),
    ("cavityPressure",c_uint),
    ("inletPressure",c_uint),
    ("outletPressure",c_uint),
    ("customDataArray",c_ushort*16)
    ]

class RingdownEntryType(Structure):
    _fields_ = [
    ("timestamp",c_longlong),
    ("wlmAngle",c_float),
    ("uncorrectedAbsorbance",c_float),
    ("correctedAbsorbance",c_float),
    ("status",c_ushort),
    ("pztValue",c_ushort),
    ("lockerOffset",c_ushort),
    ("laserUsed",c_ushort),
    ("ringdownThreshold",c_ushort),
    ("subschemeId",c_ushort),
    ("schemeRowAndIndex",c_ushort),
    ("ratio1",c_ushort),
    ("ratio2",c_ushort),
    ("fineLaserCurrent",c_ushort),
    ("coarseLaserCurrent",c_ushort),
    ("laserTemperature",c_ushort),
    ("etalonTemperature",c_ushort),
    ("cavityPressure",c_ushort),
    ("ambientPressure",c_ushort),
    ("padToCacheLine",c_ushort*7)
    ]

class SensorEntryType(Structure):
    _fields_ = [
    ("timestamp",c_longlong),
    ("streamNum",c_uint),
    ("value",DataType)
    ]

class PidControllerEnvType(Structure):
    _fields_ = [
    ("swpDir",c_int),
    ("lockCount",c_int),
    ("unlockCount",c_int),
    ("firstIteration",c_int),
    ("a",c_float),
    ("u",c_float),
    ("perr",c_float),
    ("derr1",c_float),
    ("derr2",c_float),
    ("Dincr",c_float)
    ]

class CheckEnvType(Structure):
    _fields_ = [
    ("var1",c_int),
    ("var2",c_int)
    ]

class PulseGenEnvType(Structure):
    _fields_ = [
    ("counter",c_uint)
    ]

class FilterEnvType(Structure):
    _fields_ = [
    ("num",c_float*9),
    ("den",c_float*9),
    ("state",c_float*8)
    ]

# Enumerated definitions for STREAM_MemberType
STREAM_MemberType = c_uint
STREAM_Laser1Temp = 0 # 
STREAM_Laser2Temp = 1 # 
STREAM_Laser3Temp = 2 # 
STREAM_Laser4Temp = 3 # 
STREAM_EtalonTemp = 4 # 
STREAM_WarmChamberTemp = 5 # 
STREAM_WarmChamberTecTemp = 6 # 
STREAM_CavityTemp = 7 # 
STREAM_HotChamberTecTemp = 8 # 
STREAM_DasTemp = 9 # 
STREAM_Etalon1 = 10 # 
STREAM_Reference1 = 11 # 
STREAM_Etalon2 = 12 # 
STREAM_Reference2 = 13 # 
STREAM_Laser1Current = 14 # 
STREAM_Laser2Current = 15 # 
STREAM_Laser3Current = 16 # 
STREAM_Laser4Current = 17 # 
STREAM_CavityPressure = 18 # 
STREAM_AmbientPressure = 19 # 
STREAM_InletPressure = 20 # 
STREAM_OutletPressure = 21 # 
STREAM_Laser1Tec = 22 # 
STREAM_Laser2Tec = 23 # 
STREAM_Laser3Tec = 24 # 
STREAM_Laser4Tec = 25 # 
STREAM_WarmChamberTec = 26 # 
STREAM_HotChamberTec = 27 # 
STREAM_HotChamberHeater = 28 # 
STREAM_InletValve = 29 # 
STREAM_OutletValve = 30 # 
STREAM_ValveMask = 31 # 

# Dictionary for enumerated constants in STREAM_MemberType
STREAM_MemberTypeDict = {}
STREAM_MemberTypeDict[0] = 'STREAM_Laser1Temp' # 
STREAM_MemberTypeDict[1] = 'STREAM_Laser2Temp' # 
STREAM_MemberTypeDict[2] = 'STREAM_Laser3Temp' # 
STREAM_MemberTypeDict[3] = 'STREAM_Laser4Temp' # 
STREAM_MemberTypeDict[4] = 'STREAM_EtalonTemp' # 
STREAM_MemberTypeDict[5] = 'STREAM_WarmChamberTemp' # 
STREAM_MemberTypeDict[6] = 'STREAM_WarmChamberTecTemp' # 
STREAM_MemberTypeDict[7] = 'STREAM_CavityTemp' # 
STREAM_MemberTypeDict[8] = 'STREAM_HotChamberTecTemp' # 
STREAM_MemberTypeDict[9] = 'STREAM_DasTemp' # 
STREAM_MemberTypeDict[10] = 'STREAM_Etalon1' # 
STREAM_MemberTypeDict[11] = 'STREAM_Reference1' # 
STREAM_MemberTypeDict[12] = 'STREAM_Etalon2' # 
STREAM_MemberTypeDict[13] = 'STREAM_Reference2' # 
STREAM_MemberTypeDict[14] = 'STREAM_Laser1Current' # 
STREAM_MemberTypeDict[15] = 'STREAM_Laser2Current' # 
STREAM_MemberTypeDict[16] = 'STREAM_Laser3Current' # 
STREAM_MemberTypeDict[17] = 'STREAM_Laser4Current' # 
STREAM_MemberTypeDict[18] = 'STREAM_CavityPressure' # 
STREAM_MemberTypeDict[19] = 'STREAM_AmbientPressure' # 
STREAM_MemberTypeDict[20] = 'STREAM_InletPressure' # 
STREAM_MemberTypeDict[21] = 'STREAM_OutletPressure' # 
STREAM_MemberTypeDict[22] = 'STREAM_Laser1Tec' # 
STREAM_MemberTypeDict[23] = 'STREAM_Laser2Tec' # 
STREAM_MemberTypeDict[24] = 'STREAM_Laser3Tec' # 
STREAM_MemberTypeDict[25] = 'STREAM_Laser4Tec' # 
STREAM_MemberTypeDict[26] = 'STREAM_WarmChamberTec' # 
STREAM_MemberTypeDict[27] = 'STREAM_HotChamberTec' # 
STREAM_MemberTypeDict[28] = 'STREAM_HotChamberHeater' # 
STREAM_MemberTypeDict[29] = 'STREAM_InletValve' # 
STREAM_MemberTypeDict[30] = 'STREAM_OutletValve' # 
STREAM_MemberTypeDict[31] = 'STREAM_ValveMask' # 

# Enumerated definitions for LOGICPORT_CLOCK_PERIOD_Type
LOGICPORT_CLOCK_PERIOD_Type = c_uint
LOGICPORT_CLOCK_PERIOD_20ns = 0 # 20 ns
LOGICPORT_CLOCK_PERIOD_40ns = 1 # 40 ns
LOGICPORT_CLOCK_PERIOD_80ns = 2 # 80 ns
LOGICPORT_CLOCK_PERIOD_160ns = 3 # 160 ns
LOGICPORT_CLOCK_PERIOD_320ns = 4 # 320 ns
LOGICPORT_CLOCK_PERIOD_640ns = 5 # 640 ns
LOGICPORT_CLOCK_PERIOD_1280ns = 6 # 1.28 us
LOGICPORT_CLOCK_PERIOD_2560ns = 7 # 2.56 us
LOGICPORT_CLOCK_PERIOD_5120ns = 8 # 5.12 us
LOGICPORT_CLOCK_PERIOD_10240ns = 9 # 10.24 us
LOGICPORT_CLOCK_PERIOD_20480ns = 10 # 20.48 us
LOGICPORT_CLOCK_PERIOD_40960ns = 11 # 40.96 us
LOGICPORT_CLOCK_PERIOD_81920ns = 12 # 81.92 us
LOGICPORT_CLOCK_PERIOD_163840ns = 13 # 163.8 us
LOGICPORT_CLOCK_PERIOD_327680ns = 14 # 327.7 us
LOGICPORT_CLOCK_PERIOD_655360ns = 15 # 655.4 us
LOGICPORT_CLOCK_PERIOD_1310720ns = 16 # 1.311 ms
LOGICPORT_CLOCK_PERIOD_2621440ns = 17 # 2.621 ms
LOGICPORT_CLOCK_PERIOD_5242880ns = 18 # 5.243 ms
LOGICPORT_CLOCK_PERIOD_10485760ns = 19 # 10.49 ms
LOGICPORT_CLOCK_PERIOD_20971520ns = 20 # 20.97 ms
LOGICPORT_CLOCK_PERIOD_41943040ns = 21 # 41.94 ms
LOGICPORT_CLOCK_PERIOD_83886080ns = 22 # 83.39 ms
LOGICPORT_CLOCK_PERIOD_167772160ns = 23 # 167.8 ms
LOGICPORT_CLOCK_PERIOD_335544320ns = 24 # 335.5 ms
LOGICPORT_CLOCK_PERIOD_671088640ns = 25 # 671.1 ms
LOGICPORT_CLOCK_PERIOD_1342177280ns = 26 # 1.342 s
LOGICPORT_CLOCK_PERIOD_2684354560ns = 27 # 2.684 s
LOGICPORT_CLOCK_PERIOD_5368709120ns = 28 # 5.368 s

# Dictionary for enumerated constants in LOGICPORT_CLOCK_PERIOD_Type
LOGICPORT_CLOCK_PERIOD_TypeDict = {}
LOGICPORT_CLOCK_PERIOD_TypeDict[0] = 'LOGICPORT_CLOCK_PERIOD_20ns' # 20 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[1] = 'LOGICPORT_CLOCK_PERIOD_40ns' # 40 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[2] = 'LOGICPORT_CLOCK_PERIOD_80ns' # 80 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[3] = 'LOGICPORT_CLOCK_PERIOD_160ns' # 160 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[4] = 'LOGICPORT_CLOCK_PERIOD_320ns' # 320 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[5] = 'LOGICPORT_CLOCK_PERIOD_640ns' # 640 ns
LOGICPORT_CLOCK_PERIOD_TypeDict[6] = 'LOGICPORT_CLOCK_PERIOD_1280ns' # 1.28 us
LOGICPORT_CLOCK_PERIOD_TypeDict[7] = 'LOGICPORT_CLOCK_PERIOD_2560ns' # 2.56 us
LOGICPORT_CLOCK_PERIOD_TypeDict[8] = 'LOGICPORT_CLOCK_PERIOD_5120ns' # 5.12 us
LOGICPORT_CLOCK_PERIOD_TypeDict[9] = 'LOGICPORT_CLOCK_PERIOD_10240ns' # 10.24 us
LOGICPORT_CLOCK_PERIOD_TypeDict[10] = 'LOGICPORT_CLOCK_PERIOD_20480ns' # 20.48 us
LOGICPORT_CLOCK_PERIOD_TypeDict[11] = 'LOGICPORT_CLOCK_PERIOD_40960ns' # 40.96 us
LOGICPORT_CLOCK_PERIOD_TypeDict[12] = 'LOGICPORT_CLOCK_PERIOD_81920ns' # 81.92 us
LOGICPORT_CLOCK_PERIOD_TypeDict[13] = 'LOGICPORT_CLOCK_PERIOD_163840ns' # 163.8 us
LOGICPORT_CLOCK_PERIOD_TypeDict[14] = 'LOGICPORT_CLOCK_PERIOD_327680ns' # 327.7 us
LOGICPORT_CLOCK_PERIOD_TypeDict[15] = 'LOGICPORT_CLOCK_PERIOD_655360ns' # 655.4 us
LOGICPORT_CLOCK_PERIOD_TypeDict[16] = 'LOGICPORT_CLOCK_PERIOD_1310720ns' # 1.311 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[17] = 'LOGICPORT_CLOCK_PERIOD_2621440ns' # 2.621 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[18] = 'LOGICPORT_CLOCK_PERIOD_5242880ns' # 5.243 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[19] = 'LOGICPORT_CLOCK_PERIOD_10485760ns' # 10.49 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[20] = 'LOGICPORT_CLOCK_PERIOD_20971520ns' # 20.97 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[21] = 'LOGICPORT_CLOCK_PERIOD_41943040ns' # 41.94 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[22] = 'LOGICPORT_CLOCK_PERIOD_83886080ns' # 83.39 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[23] = 'LOGICPORT_CLOCK_PERIOD_167772160ns' # 167.8 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[24] = 'LOGICPORT_CLOCK_PERIOD_335544320ns' # 335.5 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[25] = 'LOGICPORT_CLOCK_PERIOD_671088640ns' # 671.1 ms
LOGICPORT_CLOCK_PERIOD_TypeDict[26] = 'LOGICPORT_CLOCK_PERIOD_1342177280ns' # 1.342 s
LOGICPORT_CLOCK_PERIOD_TypeDict[27] = 'LOGICPORT_CLOCK_PERIOD_2684354560ns' # 2.684 s
LOGICPORT_CLOCK_PERIOD_TypeDict[28] = 'LOGICPORT_CLOCK_PERIOD_5368709120ns' # 5.368 s

# Enumerated definitions for LOGICPORT_SOURCE_Type
LOGICPORT_SOURCE_Type = c_uint
LOGICPORT_SOURCE_RD_ADC = 0 # Ringdown ADC
LOGICPORT_SOURCE_TUNER = 1 # Tuner Value

# Dictionary for enumerated constants in LOGICPORT_SOURCE_Type
LOGICPORT_SOURCE_TypeDict = {}
LOGICPORT_SOURCE_TypeDict[0] = 'LOGICPORT_SOURCE_RD_ADC' # Ringdown ADC
LOGICPORT_SOURCE_TypeDict[1] = 'LOGICPORT_SOURCE_TUNER' # Tuner Value

# Enumerated definitions for TEMP_CNTRL_StateType
TEMP_CNTRL_StateType = c_uint
TEMP_CNTRL_DisabledState = 0 # Controller Disabled
TEMP_CNTRL_EnabledState = 1 # Controller Enabled
TEMP_CNTRL_SuspendedState = 2 # Controller Suspended
TEMP_CNTRL_SweepingState = 3 # Continuous Sweeping
TEMP_CNTRL_SendPrbsState = 4 # Sending PRBS
TEMP_CNTRL_ManualState = 5 # Manual Control

# Dictionary for enumerated constants in TEMP_CNTRL_StateType
TEMP_CNTRL_StateTypeDict = {}
TEMP_CNTRL_StateTypeDict[0] = 'TEMP_CNTRL_DisabledState' # Controller Disabled
TEMP_CNTRL_StateTypeDict[1] = 'TEMP_CNTRL_EnabledState' # Controller Enabled
TEMP_CNTRL_StateTypeDict[2] = 'TEMP_CNTRL_SuspendedState' # Controller Suspended
TEMP_CNTRL_StateTypeDict[3] = 'TEMP_CNTRL_SweepingState' # Continuous Sweeping
TEMP_CNTRL_StateTypeDict[4] = 'TEMP_CNTRL_SendPrbsState' # Sending PRBS
TEMP_CNTRL_StateTypeDict[5] = 'TEMP_CNTRL_ManualState' # Manual Control

# Enumerated definitions for LASER_CURRENT_CNTRL_StateType
LASER_CURRENT_CNTRL_StateType = c_uint
LASER_CURRENT_CNTRL_DisabledState = 0 # Controller Disabled
LASER_CURRENT_CNTRL_AutomaticState = 1 # Automatic Control
LASER_CURRENT_CNTRL_SweepingState = 2 # Continuous Sweeping
LASER_CURRENT_CNTRL_ManualState = 3 # Manual Control

# Dictionary for enumerated constants in LASER_CURRENT_CNTRL_StateType
LASER_CURRENT_CNTRL_StateTypeDict = {}
LASER_CURRENT_CNTRL_StateTypeDict[0] = 'LASER_CURRENT_CNTRL_DisabledState' # Controller Disabled
LASER_CURRENT_CNTRL_StateTypeDict[1] = 'LASER_CURRENT_CNTRL_AutomaticState' # Automatic Control
LASER_CURRENT_CNTRL_StateTypeDict[2] = 'LASER_CURRENT_CNTRL_SweepingState' # Continuous Sweeping
LASER_CURRENT_CNTRL_StateTypeDict[3] = 'LASER_CURRENT_CNTRL_ManualState' # Manual Control

# Enumerated definitions for HEATER_CNTRL_StateType
HEATER_CNTRL_StateType = c_uint
HEATER_CNTRL_DisabledState = 0 # Controller Disabled
HEATER_CNTRL_EnabledState = 1 # Controller Enabled
HEATER_CNTRL_ManualState = 2 # Manual Control

# Dictionary for enumerated constants in HEATER_CNTRL_StateType
HEATER_CNTRL_StateTypeDict = {}
HEATER_CNTRL_StateTypeDict[0] = 'HEATER_CNTRL_DisabledState' # Controller Disabled
HEATER_CNTRL_StateTypeDict[1] = 'HEATER_CNTRL_EnabledState' # Controller Enabled
HEATER_CNTRL_StateTypeDict[2] = 'HEATER_CNTRL_ManualState' # Manual Control

# Definitions for COMM_STATUS_BITMASK
COMM_STATUS_CompleteMask = 0x1
COMM_STATUS_BadCrcMask = 0x2
COMM_STATUS_BadSequenceNumberMask = 0x4
COMM_STATUS_BadArgumentsMask = 0x8
COMM_STATUS_SequenceNumberMask = 0xFF000000
COMM_STATUS_ReturnValueMask = 0x00FFFF00
COMM_STATUS_SequenceNumberShift = 24
COMM_STATUS_ReturnValueShift = 8

# Register definitions
INTERFACE_NUMBER_OF_REGISTERS = 231

NOOP_REGISTER = 0
VERIFY_INIT_REGISTER = 1
COMM_STATUS_REGISTER = 2
TIMESTAMP_LSB_REGISTER = 3
TIMESTAMP_MSB_REGISTER = 4
SCHEDULER_CONTROL_REGISTER = 5
LOGICPORT_CLOCK_PERIOD_REGISTER = 6
LOGICPORT_SOURCE_REGISTER = 7
RDSIM_TRIGGER_DIVIDER_REGISTER = 8
RD_IRQ_COUNT_REGISTER = 9
ACQ_DONE_COUNT_REGISTER = 10
DAS_TEMPERATURE_REGISTER = 11
LASER_TEC_MONITOR_TEMPERATURE_REGISTER = 12
CONVERSION_LASER1_THERM_CONSTA_REGISTER = 13
CONVERSION_LASER1_THERM_CONSTB_REGISTER = 14
CONVERSION_LASER1_THERM_CONSTC_REGISTER = 15
LASER1_RESISTANCE_REGISTER = 16
LASER1_TEMPERATURE_REGISTER = 17
LASER1_THERMISTOR_ADC_REGISTER = 18
LASER1_TEC_REGISTER = 19
LASER1_MANUAL_TEC_REGISTER = 20
LASER1_TEMP_CNTRL_STATE_REGISTER = 21
LASER1_TEMP_CNTRL_LOCK_STATUS_REGISTER = 22
LASER1_TEMP_CNTRL_SETPOINT_REGISTER = 23
LASER1_TEMP_CNTRL_USER_SETPOINT_REGISTER = 24
LASER1_TEMP_CNTRL_TOLERANCE_REGISTER = 25
LASER1_TEMP_CNTRL_SWEEP_MAX_REGISTER = 26
LASER1_TEMP_CNTRL_SWEEP_MIN_REGISTER = 27
LASER1_TEMP_CNTRL_SWEEP_INCR_REGISTER = 28
LASER1_TEMP_CNTRL_H_REGISTER = 29
LASER1_TEMP_CNTRL_K_REGISTER = 30
LASER1_TEMP_CNTRL_TI_REGISTER = 31
LASER1_TEMP_CNTRL_TD_REGISTER = 32
LASER1_TEMP_CNTRL_B_REGISTER = 33
LASER1_TEMP_CNTRL_C_REGISTER = 34
LASER1_TEMP_CNTRL_N_REGISTER = 35
LASER1_TEMP_CNTRL_S_REGISTER = 36
LASER1_TEMP_CNTRL_FFWD_REGISTER = 37
LASER1_TEMP_CNTRL_AMIN_REGISTER = 38
LASER1_TEMP_CNTRL_AMAX_REGISTER = 39
LASER1_TEMP_CNTRL_IMAX_REGISTER = 40
LASER1_TEC_PRBS_GENPOLY_REGISTER = 41
LASER1_TEC_PRBS_AMPLITUDE_REGISTER = 42
LASER1_TEC_PRBS_MEAN_REGISTER = 43
LASER1_TEC_MONITOR_REGISTER = 44
LASER1_CURRENT_CNTRL_STATE_REGISTER = 45
LASER1_MANUAL_COARSE_CURRENT_REGISTER = 46
LASER1_MANUAL_FINE_CURRENT_REGISTER = 47
LASER1_CURRENT_SWEEP_MIN_REGISTER = 48
LASER1_CURRENT_SWEEP_MAX_REGISTER = 49
LASER1_CURRENT_SWEEP_INCR_REGISTER = 50
LASER1_CURRENT_MONITOR_REGISTER = 51
CONVERSION_LASER2_THERM_CONSTA_REGISTER = 52
CONVERSION_LASER2_THERM_CONSTB_REGISTER = 53
CONVERSION_LASER2_THERM_CONSTC_REGISTER = 54
LASER2_RESISTANCE_REGISTER = 55
LASER2_TEMPERATURE_REGISTER = 56
LASER2_THERMISTOR_ADC_REGISTER = 57
LASER2_TEC_REGISTER = 58
LASER2_MANUAL_TEC_REGISTER = 59
LASER2_TEMP_CNTRL_STATE_REGISTER = 60
LASER2_TEMP_CNTRL_LOCK_STATUS_REGISTER = 61
LASER2_TEMP_CNTRL_SETPOINT_REGISTER = 62
LASER2_TEMP_CNTRL_USER_SETPOINT_REGISTER = 63
LASER2_TEMP_CNTRL_TOLERANCE_REGISTER = 64
LASER2_TEMP_CNTRL_SWEEP_MAX_REGISTER = 65
LASER2_TEMP_CNTRL_SWEEP_MIN_REGISTER = 66
LASER2_TEMP_CNTRL_SWEEP_INCR_REGISTER = 67
LASER2_TEMP_CNTRL_H_REGISTER = 68
LASER2_TEMP_CNTRL_K_REGISTER = 69
LASER2_TEMP_CNTRL_TI_REGISTER = 70
LASER2_TEMP_CNTRL_TD_REGISTER = 71
LASER2_TEMP_CNTRL_B_REGISTER = 72
LASER2_TEMP_CNTRL_C_REGISTER = 73
LASER2_TEMP_CNTRL_N_REGISTER = 74
LASER2_TEMP_CNTRL_S_REGISTER = 75
LASER2_TEMP_CNTRL_FFWD_REGISTER = 76
LASER2_TEMP_CNTRL_AMIN_REGISTER = 77
LASER2_TEMP_CNTRL_AMAX_REGISTER = 78
LASER2_TEMP_CNTRL_IMAX_REGISTER = 79
LASER2_TEC_PRBS_GENPOLY_REGISTER = 80
LASER2_TEC_PRBS_AMPLITUDE_REGISTER = 81
LASER2_TEC_PRBS_MEAN_REGISTER = 82
LASER2_TEC_MONITOR_REGISTER = 83
LASER2_CURRENT_CNTRL_STATE_REGISTER = 84
LASER2_MANUAL_COARSE_CURRENT_REGISTER = 85
LASER2_MANUAL_FINE_CURRENT_REGISTER = 86
LASER2_CURRENT_SWEEP_MIN_REGISTER = 87
LASER2_CURRENT_SWEEP_MAX_REGISTER = 88
LASER2_CURRENT_SWEEP_INCR_REGISTER = 89
LASER2_CURRENT_MONITOR_REGISTER = 90
CONVERSION_LASER3_THERM_CONSTA_REGISTER = 91
CONVERSION_LASER3_THERM_CONSTB_REGISTER = 92
CONVERSION_LASER3_THERM_CONSTC_REGISTER = 93
LASER3_RESISTANCE_REGISTER = 94
LASER3_TEMPERATURE_REGISTER = 95
LASER3_THERMISTOR_ADC_REGISTER = 96
LASER3_TEC_REGISTER = 97
LASER3_MANUAL_TEC_REGISTER = 98
LASER3_TEMP_CNTRL_STATE_REGISTER = 99
LASER3_TEMP_CNTRL_LOCK_STATUS_REGISTER = 100
LASER3_TEMP_CNTRL_SETPOINT_REGISTER = 101
LASER3_TEMP_CNTRL_USER_SETPOINT_REGISTER = 102
LASER3_TEMP_CNTRL_TOLERANCE_REGISTER = 103
LASER3_TEMP_CNTRL_SWEEP_MAX_REGISTER = 104
LASER3_TEMP_CNTRL_SWEEP_MIN_REGISTER = 105
LASER3_TEMP_CNTRL_SWEEP_INCR_REGISTER = 106
LASER3_TEMP_CNTRL_H_REGISTER = 107
LASER3_TEMP_CNTRL_K_REGISTER = 108
LASER3_TEMP_CNTRL_TI_REGISTER = 109
LASER3_TEMP_CNTRL_TD_REGISTER = 110
LASER3_TEMP_CNTRL_B_REGISTER = 111
LASER3_TEMP_CNTRL_C_REGISTER = 112
LASER3_TEMP_CNTRL_N_REGISTER = 113
LASER3_TEMP_CNTRL_S_REGISTER = 114
LASER3_TEMP_CNTRL_FFWD_REGISTER = 115
LASER3_TEMP_CNTRL_AMIN_REGISTER = 116
LASER3_TEMP_CNTRL_AMAX_REGISTER = 117
LASER3_TEMP_CNTRL_IMAX_REGISTER = 118
LASER3_TEC_PRBS_GENPOLY_REGISTER = 119
LASER3_TEC_PRBS_AMPLITUDE_REGISTER = 120
LASER3_TEC_PRBS_MEAN_REGISTER = 121
LASER3_TEC_MONITOR_REGISTER = 122
LASER3_CURRENT_CNTRL_STATE_REGISTER = 123
LASER3_MANUAL_COARSE_CURRENT_REGISTER = 124
LASER3_MANUAL_FINE_CURRENT_REGISTER = 125
LASER3_CURRENT_SWEEP_MIN_REGISTER = 126
LASER3_CURRENT_SWEEP_MAX_REGISTER = 127
LASER3_CURRENT_SWEEP_INCR_REGISTER = 128
LASER3_CURRENT_MONITOR_REGISTER = 129
CONVERSION_LASER4_THERM_CONSTA_REGISTER = 130
CONVERSION_LASER4_THERM_CONSTB_REGISTER = 131
CONVERSION_LASER4_THERM_CONSTC_REGISTER = 132
LASER4_RESISTANCE_REGISTER = 133
LASER4_TEMPERATURE_REGISTER = 134
LASER4_THERMISTOR_ADC_REGISTER = 135
LASER4_TEC_REGISTER = 136
LASER4_MANUAL_TEC_REGISTER = 137
LASER4_TEMP_CNTRL_STATE_REGISTER = 138
LASER4_TEMP_CNTRL_LOCK_STATUS_REGISTER = 139
LASER4_TEMP_CNTRL_SETPOINT_REGISTER = 140
LASER4_TEMP_CNTRL_USER_SETPOINT_REGISTER = 141
LASER4_TEMP_CNTRL_TOLERANCE_REGISTER = 142
LASER4_TEMP_CNTRL_SWEEP_MAX_REGISTER = 143
LASER4_TEMP_CNTRL_SWEEP_MIN_REGISTER = 144
LASER4_TEMP_CNTRL_SWEEP_INCR_REGISTER = 145
LASER4_TEMP_CNTRL_H_REGISTER = 146
LASER4_TEMP_CNTRL_K_REGISTER = 147
LASER4_TEMP_CNTRL_TI_REGISTER = 148
LASER4_TEMP_CNTRL_TD_REGISTER = 149
LASER4_TEMP_CNTRL_B_REGISTER = 150
LASER4_TEMP_CNTRL_C_REGISTER = 151
LASER4_TEMP_CNTRL_N_REGISTER = 152
LASER4_TEMP_CNTRL_S_REGISTER = 153
LASER4_TEMP_CNTRL_FFWD_REGISTER = 154
LASER4_TEMP_CNTRL_AMIN_REGISTER = 155
LASER4_TEMP_CNTRL_AMAX_REGISTER = 156
LASER4_TEMP_CNTRL_IMAX_REGISTER = 157
LASER4_TEC_PRBS_GENPOLY_REGISTER = 158
LASER4_TEC_PRBS_AMPLITUDE_REGISTER = 159
LASER4_TEC_PRBS_MEAN_REGISTER = 160
LASER4_TEC_MONITOR_REGISTER = 161
LASER4_CURRENT_CNTRL_STATE_REGISTER = 162
LASER4_MANUAL_COARSE_CURRENT_REGISTER = 163
LASER4_MANUAL_FINE_CURRENT_REGISTER = 164
LASER4_CURRENT_SWEEP_MIN_REGISTER = 165
LASER4_CURRENT_SWEEP_MAX_REGISTER = 166
LASER4_CURRENT_SWEEP_INCR_REGISTER = 167
LASER4_CURRENT_MONITOR_REGISTER = 168
CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTA_REGISTER = 169
CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTB_REGISTER = 170
CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTC_REGISTER = 171
HOT_BOX_HEATSINK_RESISTANCE_REGISTER = 172
HOT_BOX_HEATSINK_TEMPERATURE_REGISTER = 173
HOT_BOX_HEATSINK_ADC_REGISTER = 174
CONVERSION_CAVITY_THERM_CONSTA_REGISTER = 175
CONVERSION_CAVITY_THERM_CONSTB_REGISTER = 176
CONVERSION_CAVITY_THERM_CONSTC_REGISTER = 177
CAVITY_RESISTANCE_REGISTER = 178
CAVITY_TEMPERATURE_REGISTER = 179
CAVITY_THERMISTOR_ADC_REGISTER = 180
CAVITY_TEC_REGISTER = 181
CAVITY_MANUAL_TEC_REGISTER = 182
CAVITY_TEMP_CNTRL_STATE_REGISTER = 183
CAVITY_TEMP_CNTRL_LOCK_STATUS_REGISTER = 184
CAVITY_TEMP_CNTRL_SETPOINT_REGISTER = 185
CAVITY_TEMP_CNTRL_USER_SETPOINT_REGISTER = 186
CAVITY_TEMP_CNTRL_TOLERANCE_REGISTER = 187
CAVITY_TEMP_CNTRL_SWEEP_MAX_REGISTER = 188
CAVITY_TEMP_CNTRL_SWEEP_MIN_REGISTER = 189
CAVITY_TEMP_CNTRL_SWEEP_INCR_REGISTER = 190
CAVITY_TEMP_CNTRL_H_REGISTER = 191
CAVITY_TEMP_CNTRL_K_REGISTER = 192
CAVITY_TEMP_CNTRL_TI_REGISTER = 193
CAVITY_TEMP_CNTRL_TD_REGISTER = 194
CAVITY_TEMP_CNTRL_B_REGISTER = 195
CAVITY_TEMP_CNTRL_C_REGISTER = 196
CAVITY_TEMP_CNTRL_N_REGISTER = 197
CAVITY_TEMP_CNTRL_S_REGISTER = 198
CAVITY_TEMP_CNTRL_FFWD_REGISTER = 199
CAVITY_TEMP_CNTRL_AMIN_REGISTER = 200
CAVITY_TEMP_CNTRL_AMAX_REGISTER = 201
CAVITY_TEMP_CNTRL_IMAX_REGISTER = 202
CAVITY_TEC_PRBS_GENPOLY_REGISTER = 203
CAVITY_TEC_PRBS_AMPLITUDE_REGISTER = 204
CAVITY_TEC_PRBS_MEAN_REGISTER = 205
CAVITY_MAX_HEATSINK_TEMP_REGISTER = 206
HEATER_CNTRL_STATE_REGISTER = 207
HEATER_CNTRL_GAIN_REGISTER = 208
HEATER_CNTRL_QUANTIZE_REGISTER = 209
HEATER_CNTRL_UBIAS_SLOPE_REGISTER = 210
HEATER_CNTRL_UBIAS_OFFSET_REGISTER = 211
HEATER_CNTRL_MARK_MIN_REGISTER = 212
HEATER_CNTRL_MARK_MAX_REGISTER = 213
HEATER_CNTRL_MANUAL_MARK_REGISTER = 214
HEATER_CNTRL_MARK_REGISTER = 215
TUNER_SWEEP_RAMP_HIGH_REGISTER = 216
TUNER_SWEEP_RAMP_LOW_REGISTER = 217
TUNER_WINDOW_RAMP_HIGH_REGISTER = 218
TUNER_WINDOW_RAMP_LOW_REGISTER = 219
TUNER_UP_SLOPE_REGISTER = 220
TUNER_DOWN_SLOPE_REGISTER = 221
RD_MINLOSS_REGISTER = 222
RD_MAXLOSS_REGISTER = 223
RD_LATEST_LOSS_REGISTER = 224
RD_IMPROVEMENT_STEPS_REGISTER = 225
RD_START_SAMPLE_REGISTER = 226
RD_FRACTIONAL_THRESHOLD_REGISTER = 227
RD_ABSOLUTE_THRESHOLD_REGISTER = 228
RD_NUMBER_OF_POINTS_REGISTER = 229
RD_MAX_E_FOLDINGS_REGISTER = 230

# Dictionary for accessing registers by name and list of register information
registerByName = {}
registerInfo = []
registerByName["NOOP_REGISTER"] = NOOP_REGISTER
registerInfo.append(RegInfo("NOOP_REGISTER",c_uint,0,1.0,"rw"))
registerByName["VERIFY_INIT_REGISTER"] = VERIFY_INIT_REGISTER
registerInfo.append(RegInfo("VERIFY_INIT_REGISTER",c_uint,0,1.0,"r"))
registerByName["COMM_STATUS_REGISTER"] = COMM_STATUS_REGISTER
registerInfo.append(RegInfo("COMM_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["TIMESTAMP_LSB_REGISTER"] = TIMESTAMP_LSB_REGISTER
registerInfo.append(RegInfo("TIMESTAMP_LSB_REGISTER",c_uint,0,1.0,"r"))
registerByName["TIMESTAMP_MSB_REGISTER"] = TIMESTAMP_MSB_REGISTER
registerInfo.append(RegInfo("TIMESTAMP_MSB_REGISTER",c_uint,0,1.0,"r"))
registerByName["SCHEDULER_CONTROL_REGISTER"] = SCHEDULER_CONTROL_REGISTER
registerInfo.append(RegInfo("SCHEDULER_CONTROL_REGISTER",c_uint,0,1.0,"r"))
registerByName["LOGICPORT_CLOCK_PERIOD_REGISTER"] = LOGICPORT_CLOCK_PERIOD_REGISTER
registerInfo.append(RegInfo("LOGICPORT_CLOCK_PERIOD_REGISTER",LOGICPORT_CLOCK_PERIOD_Type,0,1.0,"rw"))
registerByName["LOGICPORT_SOURCE_REGISTER"] = LOGICPORT_SOURCE_REGISTER
registerInfo.append(RegInfo("LOGICPORT_SOURCE_REGISTER",LOGICPORT_SOURCE_Type,0,1.0,"rw"))
registerByName["RDSIM_TRIGGER_DIVIDER_REGISTER"] = RDSIM_TRIGGER_DIVIDER_REGISTER
registerInfo.append(RegInfo("RDSIM_TRIGGER_DIVIDER_REGISTER",c_uint,0,1.0,"rw"))
registerByName["RD_IRQ_COUNT_REGISTER"] = RD_IRQ_COUNT_REGISTER
registerInfo.append(RegInfo("RD_IRQ_COUNT_REGISTER",c_uint,0,1.0,"r"))
registerByName["ACQ_DONE_COUNT_REGISTER"] = ACQ_DONE_COUNT_REGISTER
registerInfo.append(RegInfo("ACQ_DONE_COUNT_REGISTER",c_uint,0,1.0,"r"))
registerByName["DAS_TEMPERATURE_REGISTER"] = DAS_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("DAS_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER_TEC_MONITOR_TEMPERATURE_REGISTER"] = LASER_TEC_MONITOR_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("LASER_TEC_MONITOR_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["CONVERSION_LASER1_THERM_CONSTA_REGISTER"] = CONVERSION_LASER1_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER1_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER1_THERM_CONSTB_REGISTER"] = CONVERSION_LASER1_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER1_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER1_THERM_CONSTC_REGISTER"] = CONVERSION_LASER1_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER1_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_RESISTANCE_REGISTER"] = LASER1_RESISTANCE_REGISTER
registerInfo.append(RegInfo("LASER1_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER1_TEMPERATURE_REGISTER"] = LASER1_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("LASER1_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER1_THERMISTOR_ADC_REGISTER"] = LASER1_THERMISTOR_ADC_REGISTER
registerInfo.append(RegInfo("LASER1_THERMISTOR_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER1_TEC_REGISTER"] = LASER1_TEC_REGISTER
registerInfo.append(RegInfo("LASER1_TEC_REGISTER",c_float,0,1.0,"rw"))
registerByName["LASER1_MANUAL_TEC_REGISTER"] = LASER1_MANUAL_TEC_REGISTER
registerInfo.append(RegInfo("LASER1_MANUAL_TEC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_STATE_REGISTER"] = LASER1_TEMP_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_STATE_REGISTER",TEMP_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_LOCK_STATUS_REGISTER"] = LASER1_TEMP_CNTRL_LOCK_STATUS_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_LOCK_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER1_TEMP_CNTRL_SETPOINT_REGISTER"] = LASER1_TEMP_CNTRL_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_SETPOINT_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER1_TEMP_CNTRL_USER_SETPOINT_REGISTER"] = LASER1_TEMP_CNTRL_USER_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_USER_SETPOINT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_TOLERANCE_REGISTER"] = LASER1_TEMP_CNTRL_TOLERANCE_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_TOLERANCE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_SWEEP_MAX_REGISTER"] = LASER1_TEMP_CNTRL_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_SWEEP_MIN_REGISTER"] = LASER1_TEMP_CNTRL_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_SWEEP_INCR_REGISTER"] = LASER1_TEMP_CNTRL_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_H_REGISTER"] = LASER1_TEMP_CNTRL_H_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_H_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_K_REGISTER"] = LASER1_TEMP_CNTRL_K_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_K_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_TI_REGISTER"] = LASER1_TEMP_CNTRL_TI_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_TI_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_TD_REGISTER"] = LASER1_TEMP_CNTRL_TD_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_TD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_B_REGISTER"] = LASER1_TEMP_CNTRL_B_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_B_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_C_REGISTER"] = LASER1_TEMP_CNTRL_C_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_C_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_N_REGISTER"] = LASER1_TEMP_CNTRL_N_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_N_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_S_REGISTER"] = LASER1_TEMP_CNTRL_S_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_S_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_FFWD_REGISTER"] = LASER1_TEMP_CNTRL_FFWD_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_FFWD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_AMIN_REGISTER"] = LASER1_TEMP_CNTRL_AMIN_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_AMIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_AMAX_REGISTER"] = LASER1_TEMP_CNTRL_AMAX_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_AMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEMP_CNTRL_IMAX_REGISTER"] = LASER1_TEMP_CNTRL_IMAX_REGISTER
registerInfo.append(RegInfo("LASER1_TEMP_CNTRL_IMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEC_PRBS_GENPOLY_REGISTER"] = LASER1_TEC_PRBS_GENPOLY_REGISTER
registerInfo.append(RegInfo("LASER1_TEC_PRBS_GENPOLY_REGISTER",c_uint,1,1.0,"rw"))
registerByName["LASER1_TEC_PRBS_AMPLITUDE_REGISTER"] = LASER1_TEC_PRBS_AMPLITUDE_REGISTER
registerInfo.append(RegInfo("LASER1_TEC_PRBS_AMPLITUDE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEC_PRBS_MEAN_REGISTER"] = LASER1_TEC_PRBS_MEAN_REGISTER
registerInfo.append(RegInfo("LASER1_TEC_PRBS_MEAN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_TEC_MONITOR_REGISTER"] = LASER1_TEC_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER1_TEC_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["LASER1_CURRENT_CNTRL_STATE_REGISTER"] = LASER1_CURRENT_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER1_CURRENT_CNTRL_STATE_REGISTER",LASER_CURRENT_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER1_MANUAL_COARSE_CURRENT_REGISTER"] = LASER1_MANUAL_COARSE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER1_MANUAL_COARSE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_MANUAL_FINE_CURRENT_REGISTER"] = LASER1_MANUAL_FINE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER1_MANUAL_FINE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_CURRENT_SWEEP_MIN_REGISTER"] = LASER1_CURRENT_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER1_CURRENT_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_CURRENT_SWEEP_MAX_REGISTER"] = LASER1_CURRENT_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER1_CURRENT_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_CURRENT_SWEEP_INCR_REGISTER"] = LASER1_CURRENT_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER1_CURRENT_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER1_CURRENT_MONITOR_REGISTER"] = LASER1_CURRENT_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER1_CURRENT_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["CONVERSION_LASER2_THERM_CONSTA_REGISTER"] = CONVERSION_LASER2_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER2_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER2_THERM_CONSTB_REGISTER"] = CONVERSION_LASER2_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER2_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER2_THERM_CONSTC_REGISTER"] = CONVERSION_LASER2_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER2_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_RESISTANCE_REGISTER"] = LASER2_RESISTANCE_REGISTER
registerInfo.append(RegInfo("LASER2_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER2_TEMPERATURE_REGISTER"] = LASER2_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("LASER2_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER2_THERMISTOR_ADC_REGISTER"] = LASER2_THERMISTOR_ADC_REGISTER
registerInfo.append(RegInfo("LASER2_THERMISTOR_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER2_TEC_REGISTER"] = LASER2_TEC_REGISTER
registerInfo.append(RegInfo("LASER2_TEC_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER2_MANUAL_TEC_REGISTER"] = LASER2_MANUAL_TEC_REGISTER
registerInfo.append(RegInfo("LASER2_MANUAL_TEC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_STATE_REGISTER"] = LASER2_TEMP_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_STATE_REGISTER",TEMP_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_LOCK_STATUS_REGISTER"] = LASER2_TEMP_CNTRL_LOCK_STATUS_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_LOCK_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER2_TEMP_CNTRL_SETPOINT_REGISTER"] = LASER2_TEMP_CNTRL_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_SETPOINT_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER2_TEMP_CNTRL_USER_SETPOINT_REGISTER"] = LASER2_TEMP_CNTRL_USER_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_USER_SETPOINT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_TOLERANCE_REGISTER"] = LASER2_TEMP_CNTRL_TOLERANCE_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_TOLERANCE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_SWEEP_MAX_REGISTER"] = LASER2_TEMP_CNTRL_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_SWEEP_MIN_REGISTER"] = LASER2_TEMP_CNTRL_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_SWEEP_INCR_REGISTER"] = LASER2_TEMP_CNTRL_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_H_REGISTER"] = LASER2_TEMP_CNTRL_H_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_H_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_K_REGISTER"] = LASER2_TEMP_CNTRL_K_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_K_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_TI_REGISTER"] = LASER2_TEMP_CNTRL_TI_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_TI_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_TD_REGISTER"] = LASER2_TEMP_CNTRL_TD_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_TD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_B_REGISTER"] = LASER2_TEMP_CNTRL_B_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_B_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_C_REGISTER"] = LASER2_TEMP_CNTRL_C_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_C_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_N_REGISTER"] = LASER2_TEMP_CNTRL_N_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_N_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_S_REGISTER"] = LASER2_TEMP_CNTRL_S_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_S_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_FFWD_REGISTER"] = LASER2_TEMP_CNTRL_FFWD_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_FFWD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_AMIN_REGISTER"] = LASER2_TEMP_CNTRL_AMIN_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_AMIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_AMAX_REGISTER"] = LASER2_TEMP_CNTRL_AMAX_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_AMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEMP_CNTRL_IMAX_REGISTER"] = LASER2_TEMP_CNTRL_IMAX_REGISTER
registerInfo.append(RegInfo("LASER2_TEMP_CNTRL_IMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEC_PRBS_GENPOLY_REGISTER"] = LASER2_TEC_PRBS_GENPOLY_REGISTER
registerInfo.append(RegInfo("LASER2_TEC_PRBS_GENPOLY_REGISTER",c_uint,1,1.0,"rw"))
registerByName["LASER2_TEC_PRBS_AMPLITUDE_REGISTER"] = LASER2_TEC_PRBS_AMPLITUDE_REGISTER
registerInfo.append(RegInfo("LASER2_TEC_PRBS_AMPLITUDE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEC_PRBS_MEAN_REGISTER"] = LASER2_TEC_PRBS_MEAN_REGISTER
registerInfo.append(RegInfo("LASER2_TEC_PRBS_MEAN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_TEC_MONITOR_REGISTER"] = LASER2_TEC_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER2_TEC_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["LASER2_CURRENT_CNTRL_STATE_REGISTER"] = LASER2_CURRENT_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER2_CURRENT_CNTRL_STATE_REGISTER",LASER_CURRENT_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER2_MANUAL_COARSE_CURRENT_REGISTER"] = LASER2_MANUAL_COARSE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER2_MANUAL_COARSE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_MANUAL_FINE_CURRENT_REGISTER"] = LASER2_MANUAL_FINE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER2_MANUAL_FINE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_CURRENT_SWEEP_MIN_REGISTER"] = LASER2_CURRENT_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER2_CURRENT_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_CURRENT_SWEEP_MAX_REGISTER"] = LASER2_CURRENT_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER2_CURRENT_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_CURRENT_SWEEP_INCR_REGISTER"] = LASER2_CURRENT_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER2_CURRENT_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER2_CURRENT_MONITOR_REGISTER"] = LASER2_CURRENT_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER2_CURRENT_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["CONVERSION_LASER3_THERM_CONSTA_REGISTER"] = CONVERSION_LASER3_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER3_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER3_THERM_CONSTB_REGISTER"] = CONVERSION_LASER3_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER3_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER3_THERM_CONSTC_REGISTER"] = CONVERSION_LASER3_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER3_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_RESISTANCE_REGISTER"] = LASER3_RESISTANCE_REGISTER
registerInfo.append(RegInfo("LASER3_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER3_TEMPERATURE_REGISTER"] = LASER3_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("LASER3_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER3_THERMISTOR_ADC_REGISTER"] = LASER3_THERMISTOR_ADC_REGISTER
registerInfo.append(RegInfo("LASER3_THERMISTOR_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER3_TEC_REGISTER"] = LASER3_TEC_REGISTER
registerInfo.append(RegInfo("LASER3_TEC_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER3_MANUAL_TEC_REGISTER"] = LASER3_MANUAL_TEC_REGISTER
registerInfo.append(RegInfo("LASER3_MANUAL_TEC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_STATE_REGISTER"] = LASER3_TEMP_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_STATE_REGISTER",TEMP_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_LOCK_STATUS_REGISTER"] = LASER3_TEMP_CNTRL_LOCK_STATUS_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_LOCK_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER3_TEMP_CNTRL_SETPOINT_REGISTER"] = LASER3_TEMP_CNTRL_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_SETPOINT_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER3_TEMP_CNTRL_USER_SETPOINT_REGISTER"] = LASER3_TEMP_CNTRL_USER_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_USER_SETPOINT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_TOLERANCE_REGISTER"] = LASER3_TEMP_CNTRL_TOLERANCE_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_TOLERANCE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_SWEEP_MAX_REGISTER"] = LASER3_TEMP_CNTRL_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_SWEEP_MIN_REGISTER"] = LASER3_TEMP_CNTRL_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_SWEEP_INCR_REGISTER"] = LASER3_TEMP_CNTRL_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_H_REGISTER"] = LASER3_TEMP_CNTRL_H_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_H_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_K_REGISTER"] = LASER3_TEMP_CNTRL_K_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_K_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_TI_REGISTER"] = LASER3_TEMP_CNTRL_TI_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_TI_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_TD_REGISTER"] = LASER3_TEMP_CNTRL_TD_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_TD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_B_REGISTER"] = LASER3_TEMP_CNTRL_B_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_B_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_C_REGISTER"] = LASER3_TEMP_CNTRL_C_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_C_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_N_REGISTER"] = LASER3_TEMP_CNTRL_N_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_N_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_S_REGISTER"] = LASER3_TEMP_CNTRL_S_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_S_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_FFWD_REGISTER"] = LASER3_TEMP_CNTRL_FFWD_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_FFWD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_AMIN_REGISTER"] = LASER3_TEMP_CNTRL_AMIN_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_AMIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_AMAX_REGISTER"] = LASER3_TEMP_CNTRL_AMAX_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_AMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEMP_CNTRL_IMAX_REGISTER"] = LASER3_TEMP_CNTRL_IMAX_REGISTER
registerInfo.append(RegInfo("LASER3_TEMP_CNTRL_IMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEC_PRBS_GENPOLY_REGISTER"] = LASER3_TEC_PRBS_GENPOLY_REGISTER
registerInfo.append(RegInfo("LASER3_TEC_PRBS_GENPOLY_REGISTER",c_uint,1,1.0,"rw"))
registerByName["LASER3_TEC_PRBS_AMPLITUDE_REGISTER"] = LASER3_TEC_PRBS_AMPLITUDE_REGISTER
registerInfo.append(RegInfo("LASER3_TEC_PRBS_AMPLITUDE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEC_PRBS_MEAN_REGISTER"] = LASER3_TEC_PRBS_MEAN_REGISTER
registerInfo.append(RegInfo("LASER3_TEC_PRBS_MEAN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_TEC_MONITOR_REGISTER"] = LASER3_TEC_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER3_TEC_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["LASER3_CURRENT_CNTRL_STATE_REGISTER"] = LASER3_CURRENT_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER3_CURRENT_CNTRL_STATE_REGISTER",LASER_CURRENT_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER3_MANUAL_COARSE_CURRENT_REGISTER"] = LASER3_MANUAL_COARSE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER3_MANUAL_COARSE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_MANUAL_FINE_CURRENT_REGISTER"] = LASER3_MANUAL_FINE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER3_MANUAL_FINE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_CURRENT_SWEEP_MIN_REGISTER"] = LASER3_CURRENT_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER3_CURRENT_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_CURRENT_SWEEP_MAX_REGISTER"] = LASER3_CURRENT_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER3_CURRENT_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_CURRENT_SWEEP_INCR_REGISTER"] = LASER3_CURRENT_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER3_CURRENT_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER3_CURRENT_MONITOR_REGISTER"] = LASER3_CURRENT_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER3_CURRENT_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["CONVERSION_LASER4_THERM_CONSTA_REGISTER"] = CONVERSION_LASER4_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER4_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER4_THERM_CONSTB_REGISTER"] = CONVERSION_LASER4_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER4_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_LASER4_THERM_CONSTC_REGISTER"] = CONVERSION_LASER4_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_LASER4_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_RESISTANCE_REGISTER"] = LASER4_RESISTANCE_REGISTER
registerInfo.append(RegInfo("LASER4_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER4_TEMPERATURE_REGISTER"] = LASER4_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("LASER4_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER4_THERMISTOR_ADC_REGISTER"] = LASER4_THERMISTOR_ADC_REGISTER
registerInfo.append(RegInfo("LASER4_THERMISTOR_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER4_TEC_REGISTER"] = LASER4_TEC_REGISTER
registerInfo.append(RegInfo("LASER4_TEC_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER4_MANUAL_TEC_REGISTER"] = LASER4_MANUAL_TEC_REGISTER
registerInfo.append(RegInfo("LASER4_MANUAL_TEC_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_STATE_REGISTER"] = LASER4_TEMP_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_STATE_REGISTER",TEMP_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_LOCK_STATUS_REGISTER"] = LASER4_TEMP_CNTRL_LOCK_STATUS_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_LOCK_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["LASER4_TEMP_CNTRL_SETPOINT_REGISTER"] = LASER4_TEMP_CNTRL_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_SETPOINT_REGISTER",c_float,0,1.0,"r"))
registerByName["LASER4_TEMP_CNTRL_USER_SETPOINT_REGISTER"] = LASER4_TEMP_CNTRL_USER_SETPOINT_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_USER_SETPOINT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_TOLERANCE_REGISTER"] = LASER4_TEMP_CNTRL_TOLERANCE_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_TOLERANCE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_SWEEP_MAX_REGISTER"] = LASER4_TEMP_CNTRL_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_SWEEP_MIN_REGISTER"] = LASER4_TEMP_CNTRL_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_SWEEP_INCR_REGISTER"] = LASER4_TEMP_CNTRL_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_H_REGISTER"] = LASER4_TEMP_CNTRL_H_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_H_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_K_REGISTER"] = LASER4_TEMP_CNTRL_K_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_K_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_TI_REGISTER"] = LASER4_TEMP_CNTRL_TI_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_TI_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_TD_REGISTER"] = LASER4_TEMP_CNTRL_TD_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_TD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_B_REGISTER"] = LASER4_TEMP_CNTRL_B_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_B_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_C_REGISTER"] = LASER4_TEMP_CNTRL_C_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_C_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_N_REGISTER"] = LASER4_TEMP_CNTRL_N_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_N_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_S_REGISTER"] = LASER4_TEMP_CNTRL_S_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_S_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_FFWD_REGISTER"] = LASER4_TEMP_CNTRL_FFWD_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_FFWD_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_AMIN_REGISTER"] = LASER4_TEMP_CNTRL_AMIN_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_AMIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_AMAX_REGISTER"] = LASER4_TEMP_CNTRL_AMAX_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_AMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEMP_CNTRL_IMAX_REGISTER"] = LASER4_TEMP_CNTRL_IMAX_REGISTER
registerInfo.append(RegInfo("LASER4_TEMP_CNTRL_IMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEC_PRBS_GENPOLY_REGISTER"] = LASER4_TEC_PRBS_GENPOLY_REGISTER
registerInfo.append(RegInfo("LASER4_TEC_PRBS_GENPOLY_REGISTER",c_uint,1,1.0,"rw"))
registerByName["LASER4_TEC_PRBS_AMPLITUDE_REGISTER"] = LASER4_TEC_PRBS_AMPLITUDE_REGISTER
registerInfo.append(RegInfo("LASER4_TEC_PRBS_AMPLITUDE_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEC_PRBS_MEAN_REGISTER"] = LASER4_TEC_PRBS_MEAN_REGISTER
registerInfo.append(RegInfo("LASER4_TEC_PRBS_MEAN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_TEC_MONITOR_REGISTER"] = LASER4_TEC_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER4_TEC_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["LASER4_CURRENT_CNTRL_STATE_REGISTER"] = LASER4_CURRENT_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("LASER4_CURRENT_CNTRL_STATE_REGISTER",LASER_CURRENT_CNTRL_StateType,0,1.0,"rw"))
registerByName["LASER4_MANUAL_COARSE_CURRENT_REGISTER"] = LASER4_MANUAL_COARSE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER4_MANUAL_COARSE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_MANUAL_FINE_CURRENT_REGISTER"] = LASER4_MANUAL_FINE_CURRENT_REGISTER
registerInfo.append(RegInfo("LASER4_MANUAL_FINE_CURRENT_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_CURRENT_SWEEP_MIN_REGISTER"] = LASER4_CURRENT_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("LASER4_CURRENT_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_CURRENT_SWEEP_MAX_REGISTER"] = LASER4_CURRENT_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("LASER4_CURRENT_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_CURRENT_SWEEP_INCR_REGISTER"] = LASER4_CURRENT_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("LASER4_CURRENT_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["LASER4_CURRENT_MONITOR_REGISTER"] = LASER4_CURRENT_MONITOR_REGISTER
registerInfo.append(RegInfo("LASER4_CURRENT_MONITOR_REGISTER",c_float,0,1.0,"rw"))
registerByName["CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTA_REGISTER"] = CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTB_REGISTER"] = CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTC_REGISTER"] = CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_HOT_BOX_HEATSINK_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["HOT_BOX_HEATSINK_RESISTANCE_REGISTER"] = HOT_BOX_HEATSINK_RESISTANCE_REGISTER
registerInfo.append(RegInfo("HOT_BOX_HEATSINK_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["HOT_BOX_HEATSINK_TEMPERATURE_REGISTER"] = HOT_BOX_HEATSINK_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("HOT_BOX_HEATSINK_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["HOT_BOX_HEATSINK_ADC_REGISTER"] = HOT_BOX_HEATSINK_ADC_REGISTER
registerInfo.append(RegInfo("HOT_BOX_HEATSINK_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["CONVERSION_CAVITY_THERM_CONSTA_REGISTER"] = CONVERSION_CAVITY_THERM_CONSTA_REGISTER
registerInfo.append(RegInfo("CONVERSION_CAVITY_THERM_CONSTA_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_CAVITY_THERM_CONSTB_REGISTER"] = CONVERSION_CAVITY_THERM_CONSTB_REGISTER
registerInfo.append(RegInfo("CONVERSION_CAVITY_THERM_CONSTB_REGISTER",c_float,1,1.0,"rw"))
registerByName["CONVERSION_CAVITY_THERM_CONSTC_REGISTER"] = CONVERSION_CAVITY_THERM_CONSTC_REGISTER
registerInfo.append(RegInfo("CONVERSION_CAVITY_THERM_CONSTC_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_RESISTANCE_REGISTER"] = CAVITY_RESISTANCE_REGISTER
registerInfo.append(RegInfo("CAVITY_RESISTANCE_REGISTER",c_float,0,1.0,"r"))
registerByName["CAVITY_TEMPERATURE_REGISTER"] = CAVITY_TEMPERATURE_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMPERATURE_REGISTER",c_float,0,1.0,"r"))
registerByName["CAVITY_THERMISTOR_ADC_REGISTER"] = CAVITY_THERMISTOR_ADC_REGISTER
registerInfo.append(RegInfo("CAVITY_THERMISTOR_ADC_REGISTER",c_uint,0,1.0,"r"))
registerByName["CAVITY_TEC_REGISTER"] = CAVITY_TEC_REGISTER
registerInfo.append(RegInfo("CAVITY_TEC_REGISTER",c_float,0,1.0,"r"))
registerByName["CAVITY_MANUAL_TEC_REGISTER"] = CAVITY_MANUAL_TEC_REGISTER
registerInfo.append(RegInfo("CAVITY_MANUAL_TEC_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_STATE_REGISTER"] = CAVITY_TEMP_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_STATE_REGISTER",TEMP_CNTRL_StateType,0,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_LOCK_STATUS_REGISTER"] = CAVITY_TEMP_CNTRL_LOCK_STATUS_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_LOCK_STATUS_REGISTER",c_uint,0,1.0,"r"))
registerByName["CAVITY_TEMP_CNTRL_SETPOINT_REGISTER"] = CAVITY_TEMP_CNTRL_SETPOINT_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_SETPOINT_REGISTER",c_float,0,1.0,"r"))
registerByName["CAVITY_TEMP_CNTRL_USER_SETPOINT_REGISTER"] = CAVITY_TEMP_CNTRL_USER_SETPOINT_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_USER_SETPOINT_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_TOLERANCE_REGISTER"] = CAVITY_TEMP_CNTRL_TOLERANCE_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_TOLERANCE_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_SWEEP_MAX_REGISTER"] = CAVITY_TEMP_CNTRL_SWEEP_MAX_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_SWEEP_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_SWEEP_MIN_REGISTER"] = CAVITY_TEMP_CNTRL_SWEEP_MIN_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_SWEEP_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_SWEEP_INCR_REGISTER"] = CAVITY_TEMP_CNTRL_SWEEP_INCR_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_SWEEP_INCR_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_H_REGISTER"] = CAVITY_TEMP_CNTRL_H_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_H_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_K_REGISTER"] = CAVITY_TEMP_CNTRL_K_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_K_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_TI_REGISTER"] = CAVITY_TEMP_CNTRL_TI_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_TI_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_TD_REGISTER"] = CAVITY_TEMP_CNTRL_TD_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_TD_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_B_REGISTER"] = CAVITY_TEMP_CNTRL_B_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_B_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_C_REGISTER"] = CAVITY_TEMP_CNTRL_C_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_C_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_N_REGISTER"] = CAVITY_TEMP_CNTRL_N_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_N_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_S_REGISTER"] = CAVITY_TEMP_CNTRL_S_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_S_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_FFWD_REGISTER"] = CAVITY_TEMP_CNTRL_FFWD_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_FFWD_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_AMIN_REGISTER"] = CAVITY_TEMP_CNTRL_AMIN_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_AMIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_AMAX_REGISTER"] = CAVITY_TEMP_CNTRL_AMAX_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_AMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEMP_CNTRL_IMAX_REGISTER"] = CAVITY_TEMP_CNTRL_IMAX_REGISTER
registerInfo.append(RegInfo("CAVITY_TEMP_CNTRL_IMAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEC_PRBS_GENPOLY_REGISTER"] = CAVITY_TEC_PRBS_GENPOLY_REGISTER
registerInfo.append(RegInfo("CAVITY_TEC_PRBS_GENPOLY_REGISTER",c_uint,1,1.0,"rw"))
registerByName["CAVITY_TEC_PRBS_AMPLITUDE_REGISTER"] = CAVITY_TEC_PRBS_AMPLITUDE_REGISTER
registerInfo.append(RegInfo("CAVITY_TEC_PRBS_AMPLITUDE_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_TEC_PRBS_MEAN_REGISTER"] = CAVITY_TEC_PRBS_MEAN_REGISTER
registerInfo.append(RegInfo("CAVITY_TEC_PRBS_MEAN_REGISTER",c_float,1,1.0,"rw"))
registerByName["CAVITY_MAX_HEATSINK_TEMP_REGISTER"] = CAVITY_MAX_HEATSINK_TEMP_REGISTER
registerInfo.append(RegInfo("CAVITY_MAX_HEATSINK_TEMP_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_STATE_REGISTER"] = HEATER_CNTRL_STATE_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_STATE_REGISTER",HEATER_CNTRL_StateType,0,1.0,"rw"))
registerByName["HEATER_CNTRL_GAIN_REGISTER"] = HEATER_CNTRL_GAIN_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_GAIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_QUANTIZE_REGISTER"] = HEATER_CNTRL_QUANTIZE_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_QUANTIZE_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_UBIAS_SLOPE_REGISTER"] = HEATER_CNTRL_UBIAS_SLOPE_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_UBIAS_SLOPE_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_UBIAS_OFFSET_REGISTER"] = HEATER_CNTRL_UBIAS_OFFSET_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_UBIAS_OFFSET_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_MARK_MIN_REGISTER"] = HEATER_CNTRL_MARK_MIN_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_MARK_MIN_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_MARK_MAX_REGISTER"] = HEATER_CNTRL_MARK_MAX_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_MARK_MAX_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_MANUAL_MARK_REGISTER"] = HEATER_CNTRL_MANUAL_MARK_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_MANUAL_MARK_REGISTER",c_float,1,1.0,"rw"))
registerByName["HEATER_CNTRL_MARK_REGISTER"] = HEATER_CNTRL_MARK_REGISTER
registerInfo.append(RegInfo("HEATER_CNTRL_MARK_REGISTER",c_float,0,1.0,"rw"))
registerByName["TUNER_SWEEP_RAMP_HIGH_REGISTER"] = TUNER_SWEEP_RAMP_HIGH_REGISTER
registerInfo.append(RegInfo("TUNER_SWEEP_RAMP_HIGH_REGISTER",c_float,1,1.0,"rw"))
registerByName["TUNER_SWEEP_RAMP_LOW_REGISTER"] = TUNER_SWEEP_RAMP_LOW_REGISTER
registerInfo.append(RegInfo("TUNER_SWEEP_RAMP_LOW_REGISTER",c_float,1,1.0,"rw"))
registerByName["TUNER_WINDOW_RAMP_HIGH_REGISTER"] = TUNER_WINDOW_RAMP_HIGH_REGISTER
registerInfo.append(RegInfo("TUNER_WINDOW_RAMP_HIGH_REGISTER",c_float,1,1.0,"rw"))
registerByName["TUNER_WINDOW_RAMP_LOW_REGISTER"] = TUNER_WINDOW_RAMP_LOW_REGISTER
registerInfo.append(RegInfo("TUNER_WINDOW_RAMP_LOW_REGISTER",c_float,1,1.0,"rw"))
registerByName["TUNER_UP_SLOPE_REGISTER"] = TUNER_UP_SLOPE_REGISTER
registerInfo.append(RegInfo("TUNER_UP_SLOPE_REGISTER",c_float,1,1.0,"rw"))
registerByName["TUNER_DOWN_SLOPE_REGISTER"] = TUNER_DOWN_SLOPE_REGISTER
registerInfo.append(RegInfo("TUNER_DOWN_SLOPE_REGISTER",c_float,1,1.0,"rw"))
registerByName["RD_MINLOSS_REGISTER"] = RD_MINLOSS_REGISTER
registerInfo.append(RegInfo("RD_MINLOSS_REGISTER",c_float,1,1.0,"rw"))
registerByName["RD_MAXLOSS_REGISTER"] = RD_MAXLOSS_REGISTER
registerInfo.append(RegInfo("RD_MAXLOSS_REGISTER",c_float,1,1.0,"rw"))
registerByName["RD_LATEST_LOSS_REGISTER"] = RD_LATEST_LOSS_REGISTER
registerInfo.append(RegInfo("RD_LATEST_LOSS_REGISTER",c_float,0,1.0,"r"))
registerByName["RD_IMPROVEMENT_STEPS_REGISTER"] = RD_IMPROVEMENT_STEPS_REGISTER
registerInfo.append(RegInfo("RD_IMPROVEMENT_STEPS_REGISTER",c_uint,1,1.0,"rw"))
registerByName["RD_START_SAMPLE_REGISTER"] = RD_START_SAMPLE_REGISTER
registerInfo.append(RegInfo("RD_START_SAMPLE_REGISTER",c_uint,1,1.0,"rw"))
registerByName["RD_FRACTIONAL_THRESHOLD_REGISTER"] = RD_FRACTIONAL_THRESHOLD_REGISTER
registerInfo.append(RegInfo("RD_FRACTIONAL_THRESHOLD_REGISTER",c_float,1,1.0,"rw"))
registerByName["RD_ABSOLUTE_THRESHOLD_REGISTER"] = RD_ABSOLUTE_THRESHOLD_REGISTER
registerInfo.append(RegInfo("RD_ABSOLUTE_THRESHOLD_REGISTER",c_float,1,1.0,"rw"))
registerByName["RD_NUMBER_OF_POINTS_REGISTER"] = RD_NUMBER_OF_POINTS_REGISTER
registerInfo.append(RegInfo("RD_NUMBER_OF_POINTS_REGISTER",c_uint,1,1.0,"rw"))
registerByName["RD_MAX_E_FOLDINGS_REGISTER"] = RD_MAX_E_FOLDINGS_REGISTER
registerInfo.append(RegInfo("RD_MAX_E_FOLDINGS_REGISTER",c_float,1,1.0,"rw"))

# FPGA block definitions

# Block KERNEL Kernel
KERNEL_MAGIC_CODE = 0 # Code indicating FPGA is programmed
KERNEL_RESET = 1 # Used to reset Cypress FX2
KERNEL_GPREG_1 = 2 # General purpose register

# Block PWM Pulse width modulator
PWM_CS = 0 # Control/Status register
PWM_CS_RUN_B = 0 # STOP/RUN bit position
PWM_CS_RUN_W = 1 # STOP/RUN bit width
PWM_CS_CONT_B = 1 # SINGLE/CONTINUOUS bit position
PWM_CS_CONT_W = 1 # SINGLE/CONTINUOUS bit width
PWM_CS_PWM_OUT_B = 2 # PWM_OUT bit position
PWM_CS_PWM_OUT_W = 1 # PWM_OUT bit width

PWM_PULSE_WIDTH = 1 # Pulse width register

# Block RDSIM Ringdown simulator
RDSIM_TUNER_CENTER = 0 # Tuner value around which cavity fills
RDSIM_TUNER_WINDOW_HALF_WIDTH = 1 # Half-width of tuner window within which cavity fills
RDSIM_FILLING_RATE = 2 # Rate of increase of accumulator value during filling
RDSIM_DECAY = 3 # Exponential decay of accumulator when not filling
RDSIM_ACCUMULATOR = 4 # Simulated ringdown value

# Block LASERLOCKER Laser frequency locker
LASERLOCKER_CS = 0 # Control/Status register
LASERLOCKER_CS_RUN_B = 0 # Stop/Run bit position
LASERLOCKER_CS_RUN_W = 1 # Stop/Run bit width
LASERLOCKER_CS_CONT_B = 1 # Single/Continuous bit position
LASERLOCKER_CS_CONT_W = 1 # Single/Continuous bit width
LASERLOCKER_CS_PRBS_B = 2 # Generate PRBS bit position
LASERLOCKER_CS_PRBS_W = 1 # Generate PRBS bit width
LASERLOCKER_CS_ACC_EN_B = 3 # Enable fine current acc bit position
LASERLOCKER_CS_ACC_EN_W = 1 # Enable fine current acc bit width
LASERLOCKER_CS_SAMPLE_DARK_B = 4 # Sample dark currents bit position
LASERLOCKER_CS_SAMPLE_DARK_W = 1 # Sample dark currents bit width
LASERLOCKER_CS_ADC_STROBE_B = 5 # Load WLM ADC values bit position
LASERLOCKER_CS_ADC_STROBE_W = 1 # Load WLM ADC values bit width
LASERLOCKER_CS_TUNING_OFFSET_SEL_B = 6 # Tuner offset source bit position
LASERLOCKER_CS_TUNING_OFFSET_SEL_W = 1 # Tuner offset source bit width
LASERLOCKER_CS_LASER_FREQ_OK_B = 7 # Laser frequency in window bit position
LASERLOCKER_CS_LASER_FREQ_OK_W = 1 # Laser frequency in window bit width
LASERLOCKER_CS_CURRENT_OK_B = 8 # Fine current calculation bit position
LASERLOCKER_CS_CURRENT_OK_W = 1 # Fine current calculation bit width

LASERLOCKER_ETA1 = 1 # Etalon 1 reading
LASERLOCKER_REF1 = 2 # Reference 1 reading
LASERLOCKER_ETA2 = 3 # Etalon 2 reading
LASERLOCKER_REF2 = 4 # Reference 2 reading
LASERLOCKER_ETA1_DARK = 5 # Etalon 1 dark reading
LASERLOCKER_REF1_DARK = 6 # Reference 1 dark reading
LASERLOCKER_ETA2_DARK = 7 # Etalon 2 dark reading
LASERLOCKER_REF2_DARK = 8 # Reference 2 dark reading
LASERLOCKER_ETA1_OFFSET = 9 # Etalon 1 offset
LASERLOCKER_REF1_OFFSET = 10 # Reference 1 offset
LASERLOCKER_ETA2_OFFSET = 11 # Etalon 2 offset
LASERLOCKER_REF2_OFFSET = 12 # Reference 2 offset
LASERLOCKER_RATIO1 = 13 # Ratio 1
LASERLOCKER_RATIO2 = 14 # Ratio 2
LASERLOCKER_RATIO1_CENTER = 15 # Ratio 1 ellipse center
LASERLOCKER_RATIO1_MULTIPLIER = 16 # Ratio 1 multiplier
LASERLOCKER_RATIO2_CENTER = 17 # Ratio 2 ellipse center
LASERLOCKER_RATIO2_MULTIPLIER = 18 # Ratio 2 multiplier
LASERLOCKER_TUNING_OFFSET = 19 # Error offset to shift frequency
LASERLOCKER_LOCK_ERROR = 20 # Locker loop error
LASERLOCKER_WM_LOCK_WINDOW = 21 # Lock window
LASERLOCKER_WM_INT_GAIN = 22 # Locker integral gain
LASERLOCKER_WM_PROP_GAIN = 23 # Locker proportional gain
LASERLOCKER_WM_DERIV_GAIN = 24 # Locker derivative gain
LASERLOCKER_FINE_CURRENT = 25 # Fine laser current
LASERLOCKER_CYCLE_COUNTER = 26 # Cycle counter

# Block RDMAN Ringdown manager
RDMAN_CONTROL = 0 # Control register
RDMAN_CONTROL_RUN_B = 0 # Stop/Run bit position
RDMAN_CONTROL_RUN_W = 1 # Stop/Run bit width
RDMAN_CONTROL_CONT_B = 1 # Single/Continuous bit position
RDMAN_CONTROL_CONT_W = 1 # Single/Continuous bit width
RDMAN_CONTROL_START_RD_B = 2 # Start ringdown cycle bit position
RDMAN_CONTROL_START_RD_W = 1 # Start ringdown cycle bit width
RDMAN_CONTROL_ABORT_RD_B = 3 # Abort ringdown bit position
RDMAN_CONTROL_ABORT_RD_W = 1 # Abort ringdown bit width
RDMAN_CONTROL_BANK0_CLEAR_B = 4 # Mark bank 0 available for write bit position
RDMAN_CONTROL_BANK0_CLEAR_W = 1 # Mark bank 0 available for write bit width
RDMAN_CONTROL_BANK1_CLEAR_B = 5 # Mark bank 1 available for write bit position
RDMAN_CONTROL_BANK1_CLEAR_W = 1 # Mark bank 1 available for write bit width
RDMAN_CONTROL_RD_IRQ_ACK_B = 6 # Acknowledge ring-down interrupt bit position
RDMAN_CONTROL_RD_IRQ_ACK_W = 1 # Acknowledge ring-down interrupt bit width
RDMAN_CONTROL_ACQ_DONE_ACK_B = 7 # Acknowledge data acquired interrupt bit position
RDMAN_CONTROL_ACQ_DONE_ACK_W = 1 # Acknowledge data acquired interrupt bit width

RDMAN_STATUS = 1 # Status register
RDMAN_STATUS_SHUTDOWN_B = 0 # Indicates shutdown of optical injection bit position
RDMAN_STATUS_SHUTDOWN_W = 1 # Indicates shutdown of optical injection bit width
RDMAN_STATUS_RD_IRQ_B = 1 # Ring down interrupt occured bit position
RDMAN_STATUS_RD_IRQ_W = 1 # Ring down interrupt occured bit width
RDMAN_STATUS_ACQ_DONE_B = 2 # Data acquired interrupt occured bit position
RDMAN_STATUS_ACQ_DONE_W = 1 # Data acquired interrupt occured bit width
RDMAN_STATUS_BANK_B = 3 # Active bank for data acquisition bit position
RDMAN_STATUS_BANK_W = 1 # Active bank for data acquisition bit width
RDMAN_STATUS_BANK0_IN_USE_B = 4 # Bank 0 memory in use bit position
RDMAN_STATUS_BANK0_IN_USE_W = 1 # Bank 0 memory in use bit width
RDMAN_STATUS_BANK1_IN_USE_B = 5 # Bank 1 memory in use bit position
RDMAN_STATUS_BANK1_IN_USE_W = 1 # Bank 1 memory in use bit width
RDMAN_STATUS_LAPPED_B = 6 # Metadata counter lapped bit position
RDMAN_STATUS_LAPPED_W = 1 # Metadata counter lapped bit width
RDMAN_STATUS_LASER_FREQ_LOCKED_B = 7 # Laser frequency locked bit position
RDMAN_STATUS_LASER_FREQ_LOCKED_W = 1 # Laser frequency locked bit width
RDMAN_STATUS_TIMEOUT_B = 8 # Timeout without ring-down bit position
RDMAN_STATUS_TIMEOUT_W = 1 # Timeout without ring-down bit width
RDMAN_STATUS_ABORTED_B = 9 # Ring-down aborted bit position
RDMAN_STATUS_ABORTED_W = 1 # Ring-down aborted bit width

RDMAN_OPTIONS = 2 # Options register
RDMAN_OPTIONS_LOCK_ENABLE_B = 0 # Enable frequency locking bit position
RDMAN_OPTIONS_LOCK_ENABLE_W = 1 # Enable frequency locking bit width
RDMAN_OPTIONS_UP_SLOPE_ENABLE_B = 1 # Allow ring-down on positive tuner slope bit position
RDMAN_OPTIONS_UP_SLOPE_ENABLE_W = 1 # Allow ring-down on positive tuner slope bit width
RDMAN_OPTIONS_DOWN_SLOPE_ENABLE_B = 2 # Allow ring-down on negative tuner slope bit position
RDMAN_OPTIONS_DOWN_SLOPE_ENABLE_W = 1 # Allow ring-down on negative tuner slope bit width

RDMAN_PARAM0 = 3 # Parameter 0 register
RDMAN_PARAM1 = 4 # Parameter 1 register
RDMAN_PARAM2 = 5 # Parameter 2 register
RDMAN_PARAM3 = 6 # Parameter 3 register
RDMAN_PARAM4 = 7 # Parameter 4 register
RDMAN_PARAM5 = 8 # Parameter 5 register
RDMAN_PARAM6 = 9 # Parameter 6 register
RDMAN_PARAM7 = 10 # Parameter 7 register
RDMAN_PARAM8 = 11 # Parameter 8 register
RDMAN_PARAM9 = 12 # Parameter 9 register
RDMAN_DATA_ADDRCNTR = 13 # Counter for ring-down data
RDMAN_METADATA_ADDRCNTR = 14 # Counter for ring-down metadata
RDMAN_PARAM_ADDRCNTR = 15 # Counter for parameter data
RDMAN_DIVISOR = 16 # Ring-down data counter rate divisor
RDMAN_NUM_SAMP = 17 # Number of samples to collect for ring-down waveform
RDMAN_THRESHOLD = 18 # Ring-down threshold
RDMAN_LOCK_DURATION = 19 # Duration (us) for laser frequency to be locked before ring-down is allowed
RDMAN_PRECONTROL_DURATION = 20 # Duration (us) for laser current to be at nominal value before frequency locking is enabled
RDMAN_TIMEOUT_DURATION = 21 # Duration (ms) within which ring-down must occur to be valid
RDMAN_TUNER_AT_RINGDOWN = 22 # Value of tuner at ring-down
RDMAN_METADATA_ADDR_AT_RINGDOWN = 23 # Metadata address at ring-down

# Block TWGEN Tuner waveform generator
TWGEN_ACC = 0 # Accumulator
TWGEN_CS = 1 # Control/Status Register
TWGEN_CS_RUN_B = 0 # STOP/RUN bit position
TWGEN_CS_RUN_W = 1 # STOP/RUN bit width
TWGEN_CS_CONT_B = 1 # SINGLE/CONTINUOUS bit position
TWGEN_CS_CONT_W = 1 # SINGLE/CONTINUOUS bit width
TWGEN_CS_RESET_B = 2 # Reset generator bit position
TWGEN_CS_RESET_W = 1 # Reset generator bit width

TWGEN_SLOPE_DOWN = 2 # Slope in downward direction
TWGEN_SLOPE_UP = 3 # Slope in upward direction
TWGEN_SWEEP_LOW = 4 # Lower limit of sweep
TWGEN_SWEEP_HIGH = 5 # Higher limit of sweep
TWGEN_WINDOW_LOW = 6 # Lower limit of window
TWGEN_WINDOW_HIGH = 7 # Higher limit of window

# Block INJECT Optical injection subsystem
INJECT_CONTROL = 0 # Control register
INJECT_CONTROL_MODE_B = 0 # Manual/Automatic mode bit position
INJECT_CONTROL_MODE_W = 1 # Manual/Automatic mode bit width
INJECT_CONTROL_LASER_SELECT_B = 1 # Laser under automatic control bit position
INJECT_CONTROL_LASER_SELECT_W = 2 # Laser under automatic control bit width
INJECT_CONTROL_LASER_CURRENT_ENABLE_B = 3 # Laser current enable bit position
INJECT_CONTROL_LASER_CURRENT_ENABLE_W = 4 # Laser current enable bit width
INJECT_CONTROL_LASER1_CURRENT_ENABLE_B = 3 # Laser 1 current source bit position
INJECT_CONTROL_LASER1_CURRENT_ENABLE_W = 1 # Laser 1 current source bit width
INJECT_CONTROL_LASER2_CURRENT_ENABLE_B = 4 # Laser 2 current source bit position
INJECT_CONTROL_LASER2_CURRENT_ENABLE_W = 1 # Laser 2 current source bit width
INJECT_CONTROL_LASER3_CURRENT_ENABLE_B = 5 # Laser 3 current source bit position
INJECT_CONTROL_LASER3_CURRENT_ENABLE_W = 1 # Laser 3 current source bit width
INJECT_CONTROL_LASER4_CURRENT_ENABLE_B = 6 # Laser 4 current source bit position
INJECT_CONTROL_LASER4_CURRENT_ENABLE_W = 1 # Laser 4 current source bit width
INJECT_CONTROL_MANUAL_LASER_ENABLE_B = 7 # Deasserts short across laser in manual mode bit position
INJECT_CONTROL_MANUAL_LASER_ENABLE_W = 4 # Deasserts short across laser in manual mode bit width
INJECT_CONTROL_MANUAL_LASER1_ENABLE_B = 7 # Laser 1 current (in manual mode) bit position
INJECT_CONTROL_MANUAL_LASER1_ENABLE_W = 1 # Laser 1 current (in manual mode) bit width
INJECT_CONTROL_MANUAL_LASER2_ENABLE_B = 8 # Laser 2 current (in manual mode) bit position
INJECT_CONTROL_MANUAL_LASER2_ENABLE_W = 1 # Laser 2 current (in manual mode) bit width
INJECT_CONTROL_MANUAL_LASER3_ENABLE_B = 9 # Laser 3 current (in manual mode) bit position
INJECT_CONTROL_MANUAL_LASER3_ENABLE_W = 1 # Laser 3 current (in manual mode) bit width
INJECT_CONTROL_MANUAL_LASER4_ENABLE_B = 10 # Laser 4 current (in manual mode) bit position
INJECT_CONTROL_MANUAL_LASER4_ENABLE_W = 1 # Laser 4 current (in manual mode) bit width
INJECT_CONTROL_MANUAL_SOA_ENABLE_B = 11 # SOA current (in manual mode) bit position
INJECT_CONTROL_MANUAL_SOA_ENABLE_W = 1 # SOA current (in manual mode) bit width
INJECT_CONTROL_LASER_SHUTDOWN_ENABLE_B = 12 # Enables laser shutdown (in automatic mode) bit position
INJECT_CONTROL_LASER_SHUTDOWN_ENABLE_W = 1 # Enables laser shutdown (in automatic mode) bit width
INJECT_CONTROL_SOA_SHUTDOWN_ENABLE_B = 13 # Enables SOA shutdown (in automatic mode) bit position
INJECT_CONTROL_SOA_SHUTDOWN_ENABLE_W = 1 # Enables SOA shutdown (in automatic mode) bit width

INJECT_LASER1_COARSE_CURRENT = 1 # Sets coarse current for laser 1
INJECT_LASER2_COARSE_CURRENT = 2 # Sets coarse current for laser 2
INJECT_LASER3_COARSE_CURRENT = 3 # Sets coarse current for laser 3
INJECT_LASER4_COARSE_CURRENT = 4 # Sets coarse current for laser 4
INJECT_LASER1_FINE_CURRENT = 5 # Sets fine current for laser 1
INJECT_LASER2_FINE_CURRENT = 6 # Sets fine current for laser 2
INJECT_LASER3_FINE_CURRENT = 7 # Sets fine current for laser 3
INJECT_LASER4_FINE_CURRENT = 8 # Sets fine current for laser 4

# Block WLMSIM Wavelength monitor simulator
WLMSIM_OPTIONS = 0 # Options
WLMSIM_OPTIONS_INPUT_SEL_B = 0 # Input select bit position
WLMSIM_OPTIONS_INPUT_SEL_W = 1 # Input select bit width

WLMSIM_Z0 = 1 # Phase angle
WLMSIM_RFAC = 2 # Reflectivity factor
WLMSIM_ETA1 = 3 # Etalon 1
WLMSIM_REF1 = 4 # Reference 1
WLMSIM_ETA2 = 5 # Etalon 2
WLMSIM_REF2 = 6 # Reference 2

# FPGA map indices
FPGA_KERNEL = 0 # Kernel registers
FPGA_PWM_LASER1 = 3 # Laser 1 TEC pulse width modulator registers
FPGA_PWM_LASER2 = 5 # Laser 2 TEC pulse width modulator registers
FPGA_PWM_LASER3 = 7 # Laser 3 TEC pulse width modulator registers
FPGA_PWM_LASER4 = 9 # Laser 4 TEC pulse width modulator registers
FPGA_RDSIM = 11 # Ringdown simulator registers
FPGA_LASERLOCKER = 16 # Laser frequency locker registers
FPGA_RDMAN = 43 # Ringdown manager registers
FPGA_TWGEN = 67 # Tuner waveform generator
FPGA_INJECT = 75 # Optical Injection Subsystem
FPGA_WLMSIM = 84 # WLM Simulator

persistent_fpga_registers = []
persistent_fpga_registers.append((u'FPGA_RDSIM', [u'RDSIM_TUNER_CENTER', u'RDSIM_TUNER_WINDOW_HALF_WIDTH', u'RDSIM_FILLING_RATE', u'RDSIM_DECAY']))
persistent_fpga_registers.append((u'FPGA_LASERLOCKER', [u'LASERLOCKER_ETA1_OFFSET', u'LASERLOCKER_REF1_OFFSET', u'LASERLOCKER_ETA2_OFFSET', u'LASERLOCKER_REF2_OFFSET', u'LASERLOCKER_RATIO1_CENTER', u'LASERLOCKER_RATIO1_MULTIPLIER', u'LASERLOCKER_RATIO2_CENTER', u'LASERLOCKER_RATIO2_MULTIPLIER', u'LASERLOCKER_TUNING_OFFSET', u'LASERLOCKER_WM_LOCK_WINDOW', u'LASERLOCKER_WM_INT_GAIN', u'LASERLOCKER_WM_PROP_GAIN', u'LASERLOCKER_WM_DERIV_GAIN']))
persistent_fpga_registers.append((u'FPGA_RDMAN', [u'RDMAN_OPTIONS', u'RDMAN_DIVISOR', u'RDMAN_NUM_SAMP', u'RDMAN_THRESHOLD', u'RDMAN_LOCK_DURATION', u'RDMAN_PRECONTROL_DURATION', u'RDMAN_TIMEOUT_DURATION']))
persistent_fpga_registers.append((u'FPGA_TWGEN', [u'TWGEN_SLOPE_DOWN', u'TWGEN_SLOPE_UP', u'TWGEN_SWEEP_LOW', u'TWGEN_SWEEP_HIGH', u'TWGEN_WINDOW_LOW', u'TWGEN_WINDOW_HIGH']))
persistent_fpga_registers.append((u'FPGA_WLMSIM', [u'WLMSIM_RFAC']))

# Environment addresses
LASER1_TEMP_CNTRL_ENV = 0
LASER2_TEMP_CNTRL_ENV = 10
CHECK_ENV = 20
PULSE_GEN_ENV = 22
FILTER_ENV = 23
LASER_TEMP_MODEL_ENV = 49

# Dictionary for accessing environments by name
envByName = {}
envByName['LASER1_TEMP_CNTRL_ENV'] = (LASER1_TEMP_CNTRL_ENV,PidControllerEnvType)
envByName['LASER2_TEMP_CNTRL_ENV'] = (LASER2_TEMP_CNTRL_ENV,PidControllerEnvType)
envByName['CHECK_ENV'] = (CHECK_ENV,CheckEnvType)
envByName['PULSE_GEN_ENV'] = (PULSE_GEN_ENV,PulseGenEnvType)
envByName['FILTER_ENV'] = (FILTER_ENV,FilterEnvType)
envByName['LASER_TEMP_MODEL_ENV'] = (LASER_TEMP_MODEL_ENV,FilterEnvType)

# Action codes
ACTION_WRITE_BLOCK = 1
ACTION_SET_TIMESTAMP = 2
ACTION_GET_TIMESTAMP = 3
ACTION_INIT_RUNQUEUE = 4
ACTION_TEST_SCHEDULER = 5
ACTION_STREAM_REGISTER = 6
ACTION_RESISTANCE_TO_TEMPERATURE = 7
ACTION_TEMP_CNTRL_SET_COMMAND = 8
ACTION_APPLY_PID_STEP = 9
ACTION_TEMP_CNTRL_LASER1_INIT = 10
ACTION_TEMP_CNTRL_LASER1_STEP = 11
ACTION_TEMP_CNTRL_LASER2_INIT = 12
ACTION_TEMP_CNTRL_LASER2_STEP = 13
ACTION_TEMP_CNTRL_LASER3_INIT = 14
ACTION_TEMP_CNTRL_LASER3_STEP = 15
ACTION_TEMP_CNTRL_LASER4_INIT = 16
ACTION_TEMP_CNTRL_LASER4_STEP = 17
ACTION_FLOAT_REGISTER_TO_FPGA = 18
ACTION_FPGA_TO_FLOAT_REGISTER = 19
ACTION_INT_TO_FPGA = 20
ACTION_CURRENT_CNTRL_LASER1_INIT = 21
ACTION_CURRENT_CNTRL_LASER1_STEP = 22
ACTION_CURRENT_CNTRL_LASER2_INIT = 23
ACTION_CURRENT_CNTRL_LASER2_STEP = 24
ACTION_CURRENT_CNTRL_LASER3_INIT = 25
ACTION_CURRENT_CNTRL_LASER3_STEP = 26
ACTION_CURRENT_CNTRL_LASER4_INIT = 27
ACTION_CURRENT_CNTRL_LASER4_STEP = 28
ACTION_TEMP_CNTRL_CAVITY_INIT = 29
ACTION_TEMP_CNTRL_CAVITY_STEP = 30
ACTION_HEATER_CNTRL_INIT = 31
ACTION_HEATER_CNTRL_STEP = 32
ACTION_TUNER_CNTRL_INIT = 33
ACTION_TUNER_CNTRL_STEP = 34
ACTION_ENV_CHECKER = 35
ACTION_PULSE_GENERATOR = 36
ACTION_FILTER = 37
ACTION_DS1631_READTEMP = 38
ACTION_LASER_TEC_IMON = 39
ACTION_READ_LASER_TEC_MONITORS = 40
ACTION_READ_LASER_THERMISTOR_RESISTANCE = 41
ACTION_READ_LASER_CURRENT = 42


# Parameter form definitions

parameter_forms = []

# Form: System Configuration Parameters

__p = []

__p.append(('dsp','uint32',SCHEDULER_CONTROL_REGISTER,'Scheduler enable','','%d',1,0))
__p.append(('dsp','uint32',RD_IRQ_COUNT_REGISTER,'Ringdown interrupt count','','%d',1,0))
__p.append(('dsp','uint32',ACQ_DONE_COUNT_REGISTER,'Acquisition done interrupt count','','%d',1,0))
__p.append(('dsp','uint32',RDSIM_TRIGGER_DIVIDER_REGISTER,'Time between simulated ringdowns','ms','%d',1,1))
__p.append(('dsp','choices',LOGICPORT_CLOCK_PERIOD_REGISTER,'Logic port clock period','',[(LOGICPORT_CLOCK_PERIOD_20ns,"20 ns"),(LOGICPORT_CLOCK_PERIOD_40ns,"40 ns"),(LOGICPORT_CLOCK_PERIOD_80ns,"80 ns"),(LOGICPORT_CLOCK_PERIOD_160ns,"160 ns"),(LOGICPORT_CLOCK_PERIOD_320ns,"320 ns"),(LOGICPORT_CLOCK_PERIOD_640ns,"640 ns"),(LOGICPORT_CLOCK_PERIOD_1280ns,"1.28 us"),(LOGICPORT_CLOCK_PERIOD_2560ns,"2.56 us"),(LOGICPORT_CLOCK_PERIOD_5120ns,"5.12 us"),(LOGICPORT_CLOCK_PERIOD_10240ns,"10.24 us"),(LOGICPORT_CLOCK_PERIOD_20480ns,"20.48 us"),(LOGICPORT_CLOCK_PERIOD_40960ns,"40.96 us"),(LOGICPORT_CLOCK_PERIOD_81920ns,"81.92 us"),(LOGICPORT_CLOCK_PERIOD_163840ns,"163.8 us"),(LOGICPORT_CLOCK_PERIOD_327680ns,"327.7 us"),(LOGICPORT_CLOCK_PERIOD_655360ns,"655.4 us"),(LOGICPORT_CLOCK_PERIOD_1310720ns,"1.311 ms"),(LOGICPORT_CLOCK_PERIOD_2621440ns,"2.621 ms"),(LOGICPORT_CLOCK_PERIOD_5242880ns,"5.243 ms"),(LOGICPORT_CLOCK_PERIOD_10485760ns,"10.49 ms"),(LOGICPORT_CLOCK_PERIOD_20971520ns,"20.97 ms"),(LOGICPORT_CLOCK_PERIOD_41943040ns,"41.94 ms"),(LOGICPORT_CLOCK_PERIOD_83886080ns,"83.39 ms"),(LOGICPORT_CLOCK_PERIOD_167772160ns,"167.8 ms"),(LOGICPORT_CLOCK_PERIOD_335544320ns,"335.5 ms"),(LOGICPORT_CLOCK_PERIOD_671088640ns,"671.1 ms"),(LOGICPORT_CLOCK_PERIOD_1342177280ns,"1.342 s"),(LOGICPORT_CLOCK_PERIOD_2684354560ns,"2.684 s"),(LOGICPORT_CLOCK_PERIOD_5368709120ns,"5.368 s"),],1,1))
__p.append(('dsp','choices',LOGICPORT_SOURCE_REGISTER,'Logic port source','',[(LOGICPORT_SOURCE_RD_ADC,"Ringdown ADC"),(LOGICPORT_SOURCE_TUNER,"Tuner Value"),],1,1))
parameter_forms.append(('System Configuration Parameters',__p))

# Form: Laser 1 Parameters

__p = []

__p.append(('dsp','choices',LASER1_TEMP_CNTRL_STATE_REGISTER,'Temperature Controller Mode','',[(TEMP_CNTRL_DisabledState,"Controller Disabled"),(TEMP_CNTRL_EnabledState,"Controller Enabled"),(TEMP_CNTRL_SuspendedState,"Controller Suspended"),(TEMP_CNTRL_SweepingState,"Continuous Sweeping"),(TEMP_CNTRL_SendPrbsState,"Sending PRBS"),(TEMP_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_USER_SETPOINT_REGISTER,'Setpoint','degC','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_TOLERANCE_REGISTER,'Lock tolerance','degC','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_SWEEP_MAX_REGISTER,'Max sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_SWEEP_MIN_REGISTER,'Min sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_SWEEP_INCR_REGISTER,'Sweep increment','degC/sample','%.4f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_H_REGISTER,'Sample interval','s','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_K_REGISTER,'Loop proportional gain (K)','','%.2f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_TI_REGISTER,'Integration time (Ti)','s','%.2f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_TD_REGISTER,'Derivative time (Td)','s','%.2f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_B_REGISTER,'Proportional setpoint gain (b)','','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_C_REGISTER,'Derivative setpoint gain (c)','','%.3f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_N_REGISTER,'Derivative regularization (N)','','%.2f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_S_REGISTER,'Saturation regularization (S)','','%.2f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_AMIN_REGISTER,'Minimum TEC value (Amin)','','%.0f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_AMAX_REGISTER,'Maximum TEC value (Amax)','','%.0f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_IMAX_REGISTER,'Maximum actuator increment (Imax)','','%.1f',1,1))
__p.append(('dsp','float',LASER1_TEMP_CNTRL_FFWD_REGISTER,'DAS temperature feed forward coefficient','','%.3f',1,1))
__p.append(('dsp','uint32',LASER1_TEC_PRBS_GENPOLY_REGISTER,'PRBS generator','','$%X',1,1))
__p.append(('dsp','float',LASER1_TEC_PRBS_AMPLITUDE_REGISTER,'PRBS amplitude','','%.1f',1,1))
__p.append(('dsp','float',LASER1_TEC_PRBS_MEAN_REGISTER,'PRBS mean','','%.1f',1,1))
__p.append(('dsp','float',LASER1_MANUAL_TEC_REGISTER,'Manual TEC Value','digU','%.0f',1,1))
__p.append(('dsp','choices',LASER1_CURRENT_CNTRL_STATE_REGISTER,'Current Controller Mode','',[(LASER_CURRENT_CNTRL_DisabledState,"Controller Disabled"),(LASER_CURRENT_CNTRL_AutomaticState,"Automatic Control"),(LASER_CURRENT_CNTRL_SweepingState,"Continuous Sweeping"),(LASER_CURRENT_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER1_MANUAL_COARSE_CURRENT_REGISTER,'Manual Coarse Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER1_MANUAL_FINE_CURRENT_REGISTER,'Manual Fine Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER1_CURRENT_SWEEP_MIN_REGISTER,'Current Sweep Minimum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER1_CURRENT_SWEEP_MAX_REGISTER,'Current Sweep Maximum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER1_CURRENT_SWEEP_INCR_REGISTER,'Current Sweep Increment','digU/sample','%.1f',1,1))
parameter_forms.append(('Laser 1 Parameters',__p))

# Form: Laser 2 Parameters

__p = []

__p.append(('dsp','choices',LASER2_TEMP_CNTRL_STATE_REGISTER,'Temperature Controller Mode','',[(TEMP_CNTRL_DisabledState,"Controller Disabled"),(TEMP_CNTRL_EnabledState,"Controller Enabled"),(TEMP_CNTRL_SuspendedState,"Controller Suspended"),(TEMP_CNTRL_SweepingState,"Continuous Sweeping"),(TEMP_CNTRL_SendPrbsState,"Sending PRBS"),(TEMP_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_USER_SETPOINT_REGISTER,'Setpoint','degC','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_TOLERANCE_REGISTER,'Lock tolerance','degC','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_SWEEP_MAX_REGISTER,'Max sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_SWEEP_MIN_REGISTER,'Min sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_SWEEP_INCR_REGISTER,'Sweep increment','degC/sample','%.4f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_H_REGISTER,'Sample interval','s','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_K_REGISTER,'Loop proportional gain (K)','','%.2f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_TI_REGISTER,'Integration time (Ti)','s','%.2f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_TD_REGISTER,'Derivative time (Td)','s','%.2f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_B_REGISTER,'Proportional setpoint gain (b)','','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_C_REGISTER,'Derivative setpoint gain (c)','','%.3f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_N_REGISTER,'Derivative regularization (N)','','%.2f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_S_REGISTER,'Saturation regularization (S)','','%.2f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_AMIN_REGISTER,'Minimum TEC value (Amin)','','%.0f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_AMAX_REGISTER,'Maximum TEC value (Amax)','','%.0f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_IMAX_REGISTER,'Maximum actuator increment (Imax)','','%.1f',1,1))
__p.append(('dsp','float',LASER2_TEMP_CNTRL_FFWD_REGISTER,'DAS temperature feed forward coefficient','','%.3f',1,1))
__p.append(('dsp','uint32',LASER2_TEC_PRBS_GENPOLY_REGISTER,'PRBS generator','','$%X',1,1))
__p.append(('dsp','float',LASER2_TEC_PRBS_AMPLITUDE_REGISTER,'PRBS amplitude','','%.1f',1,1))
__p.append(('dsp','float',LASER2_TEC_PRBS_MEAN_REGISTER,'PRBS mean','','%.1f',1,1))
__p.append(('dsp','float',LASER2_MANUAL_TEC_REGISTER,'Manual TEC Value','digU','%.0f',1,1))
__p.append(('dsp','choices',LASER2_CURRENT_CNTRL_STATE_REGISTER,'Current Controller Mode','',[(LASER_CURRENT_CNTRL_DisabledState,"Controller Disabled"),(LASER_CURRENT_CNTRL_AutomaticState,"Automatic Control"),(LASER_CURRENT_CNTRL_SweepingState,"Continuous Sweeping"),(LASER_CURRENT_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER2_MANUAL_COARSE_CURRENT_REGISTER,'Manual Coarse Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER2_MANUAL_FINE_CURRENT_REGISTER,'Manual Fine Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER2_CURRENT_SWEEP_MIN_REGISTER,'Current Sweep Minimum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER2_CURRENT_SWEEP_MAX_REGISTER,'Current Sweep Maximum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER2_CURRENT_SWEEP_INCR_REGISTER,'Current Sweep Increment','digU/sample','%.1f',1,1))
parameter_forms.append(('Laser 2 Parameters',__p))

# Form: Laser 3 Parameters

__p = []

__p.append(('dsp','choices',LASER3_TEMP_CNTRL_STATE_REGISTER,'Temperature Controller Mode','',[(TEMP_CNTRL_DisabledState,"Controller Disabled"),(TEMP_CNTRL_EnabledState,"Controller Enabled"),(TEMP_CNTRL_SuspendedState,"Controller Suspended"),(TEMP_CNTRL_SweepingState,"Continuous Sweeping"),(TEMP_CNTRL_SendPrbsState,"Sending PRBS"),(TEMP_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_USER_SETPOINT_REGISTER,'Setpoint','degC','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_TOLERANCE_REGISTER,'Lock tolerance','degC','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_SWEEP_MAX_REGISTER,'Max sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_SWEEP_MIN_REGISTER,'Min sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_SWEEP_INCR_REGISTER,'Sweep increment','degC/sample','%.4f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_H_REGISTER,'Sample interval','s','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_K_REGISTER,'Loop proportional gain (K)','','%.2f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_TI_REGISTER,'Integration time (Ti)','s','%.2f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_TD_REGISTER,'Derivative time (Td)','s','%.2f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_B_REGISTER,'Proportional setpoint gain (b)','','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_C_REGISTER,'Derivative setpoint gain (c)','','%.3f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_N_REGISTER,'Derivative regularization (N)','','%.2f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_S_REGISTER,'Saturation regularization (S)','','%.2f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_AMIN_REGISTER,'Minimum TEC value (Amin)','','%.0f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_AMAX_REGISTER,'Maximum TEC value (Amax)','','%.0f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_IMAX_REGISTER,'Maximum actuator increment (Imax)','','%.1f',1,1))
__p.append(('dsp','float',LASER3_TEMP_CNTRL_FFWD_REGISTER,'DAS temperature feed forward coefficient','','%.3f',1,1))
__p.append(('dsp','uint32',LASER3_TEC_PRBS_GENPOLY_REGISTER,'PRBS generator','','$%X',1,1))
__p.append(('dsp','float',LASER3_TEC_PRBS_AMPLITUDE_REGISTER,'PRBS amplitude','','%.1f',1,1))
__p.append(('dsp','float',LASER3_TEC_PRBS_MEAN_REGISTER,'PRBS mean','','%.1f',1,1))
__p.append(('dsp','float',LASER3_MANUAL_TEC_REGISTER,'Manual TEC Value','digU','%.0f',1,1))
__p.append(('dsp','choices',LASER3_CURRENT_CNTRL_STATE_REGISTER,'Current Controller Mode','',[(LASER_CURRENT_CNTRL_DisabledState,"Controller Disabled"),(LASER_CURRENT_CNTRL_AutomaticState,"Automatic Control"),(LASER_CURRENT_CNTRL_SweepingState,"Continuous Sweeping"),(LASER_CURRENT_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER3_MANUAL_COARSE_CURRENT_REGISTER,'Manual Coarse Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER3_MANUAL_FINE_CURRENT_REGISTER,'Manual Fine Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER3_CURRENT_SWEEP_MIN_REGISTER,'Current Sweep Minimum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER3_CURRENT_SWEEP_MAX_REGISTER,'Current Sweep Maximum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER3_CURRENT_SWEEP_INCR_REGISTER,'Current Sweep Increment','digU/sample','%.1f',1,1))
parameter_forms.append(('Laser 3 Parameters',__p))

# Form: Laser 4 Parameters

__p = []

__p.append(('dsp','choices',LASER4_TEMP_CNTRL_STATE_REGISTER,'Temperature Controller Mode','',[(TEMP_CNTRL_DisabledState,"Controller Disabled"),(TEMP_CNTRL_EnabledState,"Controller Enabled"),(TEMP_CNTRL_SuspendedState,"Controller Suspended"),(TEMP_CNTRL_SweepingState,"Continuous Sweeping"),(TEMP_CNTRL_SendPrbsState,"Sending PRBS"),(TEMP_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_USER_SETPOINT_REGISTER,'Setpoint','degC','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_TOLERANCE_REGISTER,'Lock tolerance','degC','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_SWEEP_MAX_REGISTER,'Max sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_SWEEP_MIN_REGISTER,'Min sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_SWEEP_INCR_REGISTER,'Sweep increment','degC/sample','%.4f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_H_REGISTER,'Sample interval','s','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_K_REGISTER,'Loop proportional gain (K)','','%.2f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_TI_REGISTER,'Integration time (Ti)','s','%.2f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_TD_REGISTER,'Derivative time (Td)','s','%.2f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_B_REGISTER,'Proportional setpoint gain (b)','','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_C_REGISTER,'Derivative setpoint gain (c)','','%.3f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_N_REGISTER,'Derivative regularization (N)','','%.2f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_S_REGISTER,'Saturation regularization (S)','','%.2f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_AMIN_REGISTER,'Minimum TEC value (Amin)','','%.0f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_AMAX_REGISTER,'Maximum TEC value (Amax)','','%.0f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_IMAX_REGISTER,'Maximum actuator increment (Imax)','','%.1f',1,1))
__p.append(('dsp','float',LASER4_TEMP_CNTRL_FFWD_REGISTER,'DAS temperature feed forward coefficient','','%.3f',1,1))
__p.append(('dsp','uint32',LASER4_TEC_PRBS_GENPOLY_REGISTER,'PRBS generator','','$%X',1,1))
__p.append(('dsp','float',LASER4_TEC_PRBS_AMPLITUDE_REGISTER,'PRBS amplitude','','%.1f',1,1))
__p.append(('dsp','float',LASER4_TEC_PRBS_MEAN_REGISTER,'PRBS mean','','%.1f',1,1))
__p.append(('dsp','float',LASER4_MANUAL_TEC_REGISTER,'Manual TEC Value','digU','%.0f',1,1))
__p.append(('dsp','choices',LASER4_CURRENT_CNTRL_STATE_REGISTER,'Current Controller Mode','',[(LASER_CURRENT_CNTRL_DisabledState,"Controller Disabled"),(LASER_CURRENT_CNTRL_AutomaticState,"Automatic Control"),(LASER_CURRENT_CNTRL_SweepingState,"Continuous Sweeping"),(LASER_CURRENT_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',LASER4_MANUAL_COARSE_CURRENT_REGISTER,'Manual Coarse Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER4_MANUAL_FINE_CURRENT_REGISTER,'Manual Fine Current Setpoint','digU','%.0f',1,1))
__p.append(('dsp','float',LASER4_CURRENT_SWEEP_MIN_REGISTER,'Current Sweep Minimum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER4_CURRENT_SWEEP_MAX_REGISTER,'Current Sweep Maximum','digU','%.0f',1,1))
__p.append(('dsp','float',LASER4_CURRENT_SWEEP_INCR_REGISTER,'Current Sweep Increment','digU/sample','%.1f',1,1))
parameter_forms.append(('Laser 4 Parameters',__p))

# Form: Cavity Temperature Parameters

__p = []

__p.append(('dsp','choices',CAVITY_TEMP_CNTRL_STATE_REGISTER,'Temperature Controller Mode','',[(TEMP_CNTRL_DisabledState,"Controller Disabled"),(TEMP_CNTRL_EnabledState,"Controller Enabled"),(TEMP_CNTRL_SuspendedState,"Controller Suspended"),(TEMP_CNTRL_SweepingState,"Continuous Sweeping"),(TEMP_CNTRL_SendPrbsState,"Sending PRBS"),(TEMP_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_USER_SETPOINT_REGISTER,'Setpoint','degC','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_TOLERANCE_REGISTER,'Lock tolerance','degC','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_SWEEP_MAX_REGISTER,'Max sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_SWEEP_MIN_REGISTER,'Min sweep value','degC','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_SWEEP_INCR_REGISTER,'Sweep increment','degC/sample','%.4f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_H_REGISTER,'Sample interval','s','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_K_REGISTER,'Loop proportional gain (K)','','%.2f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_TI_REGISTER,'Integration time (Ti)','s','%.2f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_TD_REGISTER,'Derivative time (Td)','s','%.2f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_B_REGISTER,'Proportional setpoint gain (b)','','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_C_REGISTER,'Derivative setpoint gain (c)','','%.3f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_N_REGISTER,'Derivative regularization (N)','','%.2f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_S_REGISTER,'Saturation regularization (S)','','%.2f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_AMIN_REGISTER,'Minimum TEC value (Amin)','','%.0f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_AMAX_REGISTER,'Maximum TEC value (Amax)','','%.0f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_IMAX_REGISTER,'Maximum actuator increment (Imax)','','%.1f',1,1))
__p.append(('dsp','float',CAVITY_TEMP_CNTRL_FFWD_REGISTER,'DAS temperature feed forward coefficient','','%.3f',1,1))
__p.append(('dsp','uint32',CAVITY_TEC_PRBS_GENPOLY_REGISTER,'PRBS generator','','$%X',1,1))
__p.append(('dsp','float',CAVITY_TEC_PRBS_AMPLITUDE_REGISTER,'PRBS amplitude','','%.1f',1,1))
__p.append(('dsp','float',CAVITY_TEC_PRBS_MEAN_REGISTER,'PRBS mean','','%.1f',1,1))
__p.append(('dsp','float',CAVITY_MANUAL_TEC_REGISTER,'Manual TEC Value','digU','%.0f',1,1))
__p.append(('dsp','float',CAVITY_MAX_HEATSINK_TEMP_REGISTER,'Hot Box heatsink maximum temperature','degC','%.3f',1,1))
__p.append(('dsp','choices',HEATER_CNTRL_STATE_REGISTER,'Heater Controller Mode','',[(HEATER_CNTRL_DisabledState,"Controller Disabled"),(HEATER_CNTRL_EnabledState,"Controller Enabled"),(HEATER_CNTRL_ManualState,"Manual Control"),],1,1))
__p.append(('dsp','float',HEATER_CNTRL_GAIN_REGISTER,'Heater control gain','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_QUANTIZE_REGISTER,'Heater control quantization','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_UBIAS_SLOPE_REGISTER,'Heater control UBias slope','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_UBIAS_OFFSET_REGISTER,'Heater control UBias offset','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_MARK_MIN_REGISTER,'Heater minimum mark','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_MARK_MAX_REGISTER,'Heater maximum mark','','%.0f',1,1))
__p.append(('dsp','float',HEATER_CNTRL_MANUAL_MARK_REGISTER,'Heater manual mode mark','','%.0f',1,1))
parameter_forms.append(('Cavity Temperature Parameters',__p))

# Form: Tuner Waveform Parameters

__p = []

__p.append(('dsp','float',TUNER_SWEEP_RAMP_HIGH_REGISTER,'Ramp mode upper sweep limit','digU','%.0f',1,1))
__p.append(('dsp','float',TUNER_SWEEP_RAMP_LOW_REGISTER,'Ramp mode lower sweep limit','digU','%.0f',1,1))
__p.append(('dsp','float',TUNER_WINDOW_RAMP_HIGH_REGISTER,'Ramp mode upper window limit','digU','%.0f',1,1))
__p.append(('dsp','float',TUNER_WINDOW_RAMP_LOW_REGISTER,'Ramp mode lower window limit','digU','%.0f',1,1))
__p.append(('dsp','float',TUNER_UP_SLOPE_REGISTER,'Tuner up slope','digU','%.0f',1,1))
__p.append(('dsp','float',TUNER_DOWN_SLOPE_REGISTER,'Tuner down slope','digU','%.0f',1,1))
parameter_forms.append(('Tuner Waveform Parameters',__p))

# Form: Optical Injection Parameters

__p = []

__p.append(('fpga','mask',FPGA_INJECT+INJECT_CONTROL,[(1, u'Manual/Automatic mode', [(0, u'Manual'), (1, u'Automatic')]), (6, u'Laser under automatic control', [(0, u'Laser 1'), (2, u'Laser 2'), (4, u'Laser 3'), (6, u'Laser 4')]), (120, u'Laser current enable', []), (8, u'Laser 1 current source', [(0, u'Disabled'), (8, u'Enabled')]), (16, u'Laser 2 current source', [(0, u'Disabled'), (16, u'Enabled')]), (32, u'Laser 3 current source', [(0, u'Disabled'), (32, u'Enabled')]), (64, u'Laser 4 current source', [(0, u'Disabled'), (64, u'Enabled')]), (1920, u'Deasserts short across laser in manual mode', []), (128, u'Laser 1 current (in manual mode)', [(0, u'Off'), (128, u'On')]), (256, u'Laser 2 current (in manual mode)', [(0, u'Off'), (256, u'On')]), (512, u'Laser 3 current (in manual mode)', [(0, u'Off'), (512, u'On')]), (1024, u'Laser 4 current (in manual mode)', [(0, u'Off'), (1024, u'On')]), (2048, u'SOA current (in manual mode)', [(0, u'Off'), (2048, u'On')]), (4096, u'Enables laser shutdown (in automatic mode)', [(0, u'Disabled'), (4096, u'Enabled')]), (8192, u'Enables SOA shutdown (in automatic mode)', [(0, u'Disabled'), (8192, u'Enabled')])],None,None,1,1))
parameter_forms.append(('Optical Injection Parameters',__p))

# Form: Ringdown Simulator Parameters

__p = []

__p.append(('fpga','uint32',FPGA_RDSIM+RDSIM_TUNER_CENTER,'Tuner value around which cavity fills','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDSIM+RDSIM_TUNER_WINDOW_HALF_WIDTH,'Half-width of tuner window within which cavity fills','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDSIM+RDSIM_FILLING_RATE,'Rate of increase of accumulator value during filling','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDSIM+RDSIM_DECAY,'Exponential decay of accumulator when not filling','','%d',1,1))
parameter_forms.append(('Ringdown Simulator Parameters',__p))

# Form: Ringdown Manager Parameters

__p = []

__p.append(('fpga','mask',FPGA_RDMAN+RDMAN_CONTROL,[(1, u'Stop/Run', [(0, u'Stop'), (1, u'Run')]), (2, u'Single/Continuous', [(0, u'Single'), (2, u'Continuous')]), (4, u'Start ringdown cycle', [(0, u'Idle'), (4, u'Start')]), (8, u'Abort ringdown', [(0, u'Idle'), (8, u'Abort')]), (16, u'Mark bank 0 available for write', [(0, u'Idle'), (16, u'Mark available')]), (32, u'Mark bank 1 available for write', [(0, u'Idle'), (32, u'Mark available')]), (64, u'Acknowledge ring-down interrupt', [(0, u'Idle'), (64, u'Acknowledge')]), (128, u'Acknowledge data acquired interrupt', [(0, u'Idle'), (128, u'Acknowledge')])],None,None,1,1))
__p.append(('fpga','mask',FPGA_RDMAN+RDMAN_STATUS,[(1, u'Indicates shutdown of optical injection', [(0, u'Injecting'), (1, u'Shut down')]), (2, u'Ring down interrupt occured', [(0, u'Idle'), (2, u'Interrupt Active')]), (4, u'Data acquired interrupt occured', [(0, u'Idle'), (4, u'Interrupt Active')]), (8, u'Active bank for data acquisition', [(0, u'Bank 0'), (8, u'Bank 1')]), (16, u'Bank 0 memory in use', [(0, u'Available'), (16, u'In Use')]), (32, u'Bank 1 memory in use', [(0, u'Available'), (32, u'In Use')]), (64, u'Metadata counter lapped', [(0, u'Not lapped'), (64, u'Lapped')]), (128, u'Laser frequency locked', [(0, u'Unlocked'), (128, u'Locked')]), (256, u'Timeout without ring-down', [(0, u'Idle'), (256, u'Timed Out')]), (512, u'Ring-down aborted', [(0, u'Idle'), (512, u'Aborted')])],None,None,1,0))
__p.append(('fpga','mask',FPGA_RDMAN+RDMAN_OPTIONS,[(1, u'Enable frequency locking', [(0, u'Disable'), (1, u'Enable')]), (2, u'Allow ring-down on positive tuner slope', [(0, u'No'), (2, u'Yes')]), (4, u'Allow ring-down on negative tuner slope', [(0, u'No'), (4, u'Yes')])],None,None,1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_DATA_ADDRCNTR,'Ringdown data address','','%d',1,0))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_METADATA_ADDRCNTR,'Ringdown metadata address','','%d',1,0))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_PARAM_ADDRCNTR,'Ringdown parameter address','','%d',1,0))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_DIVISOR,'Ringdown ADC divisor','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_NUM_SAMP,'Ringdown samples to collect','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_THRESHOLD,'Ringdown threshold','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_LOCK_DURATION,'Laser lock duration (us)','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_PRECONTROL_DURATION,'Precontrol duration (us)','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_TIMEOUT_DURATION,'Ringdown timeout duration (us)','','%d',1,1))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_TUNER_AT_RINGDOWN,'Tuner value at ringdown','','%d',1,0))
__p.append(('fpga','uint16',FPGA_RDMAN+RDMAN_METADATA_ADDR_AT_RINGDOWN,'Metadata address at ringdown','','%d',1,0))
parameter_forms.append(('Ringdown Manager Parameters',__p))

# Form: Ringdown Data Fitting Parameters

__p = []

__p.append(('dsp','float',RD_MINLOSS_REGISTER,'Minimum loss','ppm/cm','%.4f',1,1))
__p.append(('dsp','float',RD_MAXLOSS_REGISTER,'Minimum loss','ppm/cm','%.4f',1,1))
__p.append(('dsp','float',RD_LATEST_LOSS_REGISTER,'Most recent loss','ppm/cm','%.3f',1,0))
__p.append(('dsp','uint32',RD_IMPROVEMENT_STEPS_REGISTER,'Number of iterations of ringdown fit improvement','','%d',1,1))
__p.append(('dsp','uint32',RD_START_SAMPLE_REGISTER,'Initial ringdown samples to ignore','','%d',1,1))
__p.append(('dsp','float',RD_FRACTIONAL_THRESHOLD_REGISTER,'Fractional threshold for fit window determination','','%.2f',1,1))
__p.append(('dsp','float',RD_ABSOLUTE_THRESHOLD_REGISTER,'Absolute threshold for fit window determination','','%.0f',1,1))
__p.append(('dsp','uint32',RD_NUMBER_OF_POINTS_REGISTER,'Maximum number of points in fit window','','%d',1,1))
__p.append(('dsp','float',RD_MAX_E_FOLDINGS_REGISTER,'Maximum number of time constants in fit window','','%.1f',1,1))
parameter_forms.append(('Ringdown Data Fitting Parameters',__p))

# Form: Wavelength Monitor Simulator Parameters

__p = []

__p.append(('fpga','mask',FPGA_WLMSIM+WLMSIM_OPTIONS,[(1, u'Input select', [(0, u'Register'), (1, u'Input port')])],None,None,1,1))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_RFAC,'Reflectivity factor','','%d',1,1))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_Z0,'Phase angle','','%d',1,1))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_ETA1,'Etalon 1 photocurrent','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_REF1,'Reference 1 photocurrent','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_ETA2,'Etalon 2 photocurrent','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_WLMSIM+WLMSIM_REF2,'Reference 2 photocurrent','digU','%d',1,0))
parameter_forms.append(('Wavelength Monitor Simulator Parameters',__p))

# Form: Laser Locker Parameters

__p = []

__p.append(('fpga','mask',FPGA_LASERLOCKER+LASERLOCKER_CS,[(1, u'Stop/Run', [(0, u'Stop'), (1, u'Run')]), (2, u'Single/Continuous', [(0, u'Single'), (2, u'Continuous')]), (4, u'Generate PRBS', [(0, u'Idle'), (4, u'Send PRBS')]), (8, u'Enable fine current acc', [(0, u'Reset'), (8, u'Accumulate')]), (16, u'Sample dark currents', [(0, u'Idle'), (16, u'Sample')]), (32, u'Load WLM ADC values', [(0, u'Idle'), (32, u'Load')]), (64, u'Tuner offset source', [(0, u'Register'), (64, u'Input port')]), (128, u'Laser frequency in window', [(0, u'Out of range'), (128, u'In Window')]), (256, u'Fine current calculation', [(0, u'In progress'), (256, u'Complete')])],None,None,1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_ETA1,'Etalon 1 reading','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_REF1,'Reference 1 reading','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_ETA2,'Etalon 2 reading','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_REF2,'Reference 2 reading','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_ETA1_OFFSET,'Etalon 1 offset','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_REF1_OFFSET,'Reference 1 offset','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_ETA2_OFFSET,'Etalon 2 offset','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_REF2_OFFSET,'Reference 2 offset','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_RATIO1_CENTER,'Ratio 1 ellipse center','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_RATIO1_MULTIPLIER,'Ratio 1 multiplier','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_RATIO2_CENTER,'Ratio 2 ellipse center','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_RATIO2_MULTIPLIER,'Ratio 2 multiplier','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_TUNING_OFFSET,'Tuning offset for frequency shift','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_WM_LOCK_WINDOW,'Lock window','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_WM_INT_GAIN,'Locker integral gain','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_WM_PROP_GAIN,'Locker proportional gain','digU','%d',1,1))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_WM_DERIV_GAIN,'Locker derivative gain','digU','%d',1,1))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_RATIO1,'Wavelength monitor ratio 1','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_RATIO2,'Wavelength monitor ratio 2','digU','%d',1,0))
__p.append(('fpga','int16',FPGA_LASERLOCKER+LASERLOCKER_LOCK_ERROR,'Locker loop error','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_FINE_CURRENT,'Fine laser current','digU','%d',1,0))
__p.append(('fpga','uint16',FPGA_LASERLOCKER+LASERLOCKER_CYCLE_COUNTER,'Cycle count','','%d',1,0))
parameter_forms.append(('Laser Locker Parameters',__p))
