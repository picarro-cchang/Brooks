<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="stan@picarro-com.20150529101713.1" a="E"><vh>Setting up build environment</vh>
<v t="stan@picarro-com.20150529101736.1"><vh>VirtualEnv</vh></v>
</v>
<v t="sze.20150327093644.2"><vh>Proposed tree structure</vh>
<v t="sze.20150327094108.1" a="E"><vh>src</vh>
<v t="sze.20150327114556.1" a="E"><vh>main</vh>
<v t="sze.20150327144536.1"><vh>config</vh>
<v t="sze.20150327145041.1"><vh>AppConfigBase</vh></v>
<v t="sze.20150327145048.1"><vh>InstrConfigBase</vh></v>
<v t="sze.20150327144553.1"><vh>CommonConfig</vh></v>
<v t="sze.20150327144708.1" a="E"><vh>CFADS</vh>
<v t="sze.20150327144713.1"><vh>AppConfig</vh></v>
<v t="sze.20150327144717.1"><vh>InstrConfig</vh></v>
</v>
<v t="sze.20150327144638.1" a="E"><vh>AEDS</vh>
<v t="sze.20150327144644.1"><vh>AppConfig</vh></v>
<v t="sze.20150327144651.1"><vh>InstrConfig</vh></v>
</v>
</v>
<v t="sze.20150327114600.1" a="E"><vh>python</vh>
<v t="sze.20150327125452.1"><vh>base</vh></v>
<v t="sze.20150327125530.1"><vh>surveyor</vh></v>
<v t="sze.20150327125622.1"><vh>AEDS</vh></v>
<v t="sze.20150327125631.1"><vh>CFADS</vh></v>
</v>
<v t="sze.20150327114611.1"><vh>scripts</vh></v>
</v>
<v t="sze.20150327114641.1" a="E"><vh>integrationtest</vh>
<v t="sze.20150327114754.1"><vh>python</vh></v>
</v>
<v t="sze.20150327114631.1" a="E"><vh>unittest</vh>
<v t="sze.20150327114803.1"><vh>python</vh></v>
</v>
</v>
</v>
<v t="sze.20150527173055.1"><vh>Current tree structure</vh>
<v t="sze.20150527173110.1"><vh>AddOns</vh>
<v t="sze.20150527174434.1"><vh>AIAutosampler</vh></v>
<v t="sze.20150527174443.1"><vh>SoilPostProcessor</vh></v>
<v t="sze.20150527174450.1"><vh>SSIM</vh></v>
</v>
<v t="sze.20150527173116.1"><vh>Assets</vh>
<v t="sze.20150527174602.1"><vh>icons</vh></v>
<v t="sze.20150527174606.1"><vh>Python25</vh></v>
<v t="sze.20150527174610.1"><vh>Python27</vh></v>
</v>
<v t="sze.20150527173120.1"><vh>Config</vh>
<v t="sze.20150527174620.1"><vh>CommonConfig</vh></v>
<v t="sze.20150527174631.1"><vh>FEDS</vh></v>
</v>
<v t="sze.20150527173123.1"><vh>Firmware</vh>
<v t="sze.20150527174330.1"><vh>ArduinoSystemMonitor</vh></v>
<v t="sze.20150527174340.1"><vh>CypresssUSB</vh></v>
<v t="sze.20150527174346.1"><vh>Docs</vh></v>
<v t="sze.20150527174351.1"><vh>DSP</vh></v>
<v t="sze.20150527174354.1"><vh>FX2Devel</vh></v>
<v t="sze.20150527174359.1"><vh>MyHDL</vh></v>
<v t="sze.20150527174404.1"><vh>Peripherals</vh></v>
<v t="sze.20150527174409.1"><vh>Schemes</vh></v>
<v t="sze.20150527174415.1"><vh>Utilities</vh></v>
<v t="sze.20150527174419.1"><vh>xml</vh></v>
</v>
<v t="sze.20150527173129.1" a="E"><vh>Host</vh>
<v t="sze.20150527173225.1"><vh>ActiveFileManager</vh></v>
<v t="sze.20150527173250.1"><vh>AlarmmSystem</vh></v>
<v t="sze.20150527173256.1"><vh>Archiver</vh></v>
<v t="sze.20150527173259.1"><vh>autogen</vh></v>
<v t="sze.20150527173303.1"><vh>CommandInterface</vh></v>
<v t="sze.20150527173311.1"><vh>Common</vh></v>
<v t="sze.20150527173317.1"><vh>ConfigManager</vh></v>
<v t="sze.20150527173324.1"><vh>ControlBridge</vh></v>
<v t="sze.20150527173331.1"><vh>Controller</vh></v>
<v t="sze.20150527173335.1"><vh>DataLogger</vh></v>
<v t="sze.20150527173340.1"><vh>DataManager</vh></v>
<v t="sze.20150527173344.1"><vh>DataManagerToDatabase</vh></v>
<v t="sze.20150527173353.1"><vh>DatViewer</vh></v>
<v t="sze.20150527173400.1"><vh>Doctests</vh></v>
<v t="sze.20150527173405.1"><vh>Driver</vh></v>
<v t="sze.20150527173408.1"><vh>ElectricalIntterface</vh></v>
<v t="sze.20150527173416.1"><vh>EventLogWatcher</vh></v>
<v t="sze.20150527173426.1"><vh>EventManager</vh></v>
<v t="sze.20150527173430.1"><vh>FileEraser</vh></v>
<v t="sze.20150527173445.1"><vh>Fitter</vh></v>
<v t="sze.20150527173447.1"><vh>FlowController</vh></v>
<v t="sze.20150527173454.1"><vh>HardwareTesting</vh></v>
<v t="sze.20150527173500.1"><vh>InstMgr</vh></v>
<v t="sze.20150527173505.1"><vh>newHeadline</vh></v>
<v t="sze.20150527173505.2"><vh>IPV</vh></v>
<v t="sze.20150527173510.1"><vh>LockWorkstation</vh></v>
<v t="sze.20150527173518.1"><vh>LogicBoardTest</vh></v>
<v t="sze.20150527173532.1"><vh>MeasSystem</vh></v>
<v t="sze.20150527173540.1"><vh>MobileKit</vh></v>
<v t="sze.20150527173546.1"><vh>PeakAnalyzer</vh></v>
<v t="sze.20150527173552.1"><vh>PeriphIntrf</vh></v>
<v t="sze.20150527173559.1"><vh>QuickGui</vh></v>
<v t="sze.20150527173603.1"><vh>RDFrequencyConverter</vh></v>
<v t="sze.20150527173613.1"><vh>rdReprocessor</vh></v>
<v t="sze.20150527173620.1"><vh>ReadExtSensor</vh></v>
<v t="sze.20150527173629.1"><vh>SampleManager</vh></v>
<v t="sze.20150527173640.1"><vh>Sensors</vh></v>
<v t="sze.20150527173646.1"><vh>SpectrumCollector</vh></v>
<v t="sze.20150527173653.1"><vh>SpectrumMaker</vh></v>
<v t="sze.20150527173704.1"><vh>Supervisor</vh></v>
<v t="sze.20150527173710.1"><vh>SupervisorZMQ</vh></v>
<v t="sze.20150527173728.1"><vh>Tests</vh></v>
<v t="sze.20150527173732.1"><vh>Utilities</vh></v>
<v t="sze.20150527173739.1"><vh>ValveSequencer</vh></v>
<v t="sze.20150527173753.1"><vh>WebClient</vh></v>
<v t="sze.20150527173805.1"><vh>WebServer</vh></v>
</v>
<v t="sze.20150527173131.1"><vh>MobileKit</vh>
<v t="sze.20150527174947.1"><vh>AnalyzerServer</vh></v>
<v t="sze.20150527174957.1"><vh>app</vh></v>
<v t="sze.20150527175001.1"><vh>MobileKitSetup</vh></v>
<v t="sze.20150527175008.1"><vh>MobileKitSetupNew</vh></v>
<v t="sze.20150527175016.1"><vh>NodeReportGen</vh></v>
<v t="sze.20150527175022.1"><vh>P3DataViewer</vh></v>
<v t="sze.20150527175028.1"><vh>ReportGen</vh></v>
<v t="sze.20150527175033.1"><vh>ReportGenOld</vh></v>
<v t="sze.20150527175038.1"><vh>Scripts</vh></v>
<v t="sze.20150527175043.1"><vh>Testing</vh></v>
<v t="sze.20150527175049.1"><vh>Tests</vh></v>
<v t="sze.20150527175052.1"><vh>Utilities</vh></v>
<v t="sze.20150527175056.1"><vh>ViewServer</vh></v>
<v t="sze.20150527175104.1"><vh>WeatherStation</vh></v>
</v>
<v t="sze.20150527173138.1"><vh>p3</vh>
<v t="sze.20150527174924.1"><vh>investigator</vh></v>
<v t="sze.20150527174931.1"><vh>tests</vh></v>
</v>
<v t="sze.20150527173143.1"><vh>PlumeScanner</vh></v>
<v t="sze.20150527173151.1"><vh>ReportGenOnLinuxServer</vh>
<v t="sze.20150527174900.1"><vh>ReportGen</vh></v>
</v>
<v t="sze.20150527173209.1"><vh>sqa</vh></v>
<v t="sze.20150527173213.1"><vh>Tools</vh>
<v t="sze.20150527174709.1"><vh>Data</vh></v>
<v t="sze.20150527174714.1"><vh>Release</vh></v>
<v t="sze.20150527174718.1"><vh>Scripts</vh></v>
<v t="sze.20150527174722.1"><vh>Special</vh></v>
<v t="sze.20150527174725.1"><vh>Win7MigrationTools</vh></v>
</v>
<v t="sze.20150527173218.1"><vh>Vendor</vh>
<v t="sze.20150527174805.1"><vh>AppliedInstruments</vh></v>
<v t="sze.20150527174813.1"><vh>FTDI</vh></v>
<v t="sze.20150527174817.1"><vh>IBASE</vh></v>
<v t="sze.20150527174820.1"><vh>inpout</vh></v>
<v t="sze.20150527174824.1"><vh>libusb</vh></v>
<v t="sze.20150527174828.1"><vh>Microsoft</vh></v>
</v>
</v>
<v t="sze.20150527175358.1"><vh>Versioning of Host, Firmware and Configurations</vh></v>
<v t="sze.20150527185824.1" a="E"><vh>Build script</vh>
<v t="stan@picarro-com.20150529220159.1"><vh>@clean src/Host/PicarroExeSetup.py</vh>
<v t="stan@picarro-com.20150529220322.1"><vh>PicarroExeSetup declarations</vh></v>
<v t="stan@picarro-com.20150529220322.2"><vh>_getPythonVersion</vh></v>
<v t="stan@picarro-com.20150529220322.3"><vh>_getPythonSubVersion</vh></v>
<v t="stan@picarro-com.20150529220322.4"><vh>_getOsType</vh></v>
<v t="stan@picarro-com.20150529220322.5"><vh>_runBatFile</vh></v>
<v t="stan@picarro-com.20150529220322.6"><vh>_getBuildVersion</vh></v>
<v t="stan@picarro-com.20150529220322.7"><vh>_getBuildType</vh></v>
<v t="stan@picarro-com.20150529220322.8"><vh>runCommand</vh></v>
<v t="stan@picarro-com.20150529220322.9"><vh>_getGitBranch</vh></v>
<v t="stan@picarro-com.20150529220322.10"><vh>_getTimeIso8601Str</vh></v>
<v t="stan@picarro-com.20150529220322.11"><vh>_getTimeStr</vh></v>
<v t="stan@picarro-com.20150529220322.12"><vh>_createGitVersionPythonFile</vh></v>
<v t="stan@picarro-com.20150529220322.13" a="E"><vh>class Target</vh>
<v t="stan@picarro-com.20150529220322.14"><vh>__init__</vh></v>
</v>
</v>
<v t="stan@picarro-com.20150529220127.1"><vh>Original setup.py</vh>
<v t="stan@picarro-com.20150529220127.2"><vh>setup declarations</vh></v>
</v>
<v t="stan@picarro-com.20150529215917.1"><vh>@clean target/dist/Host-1.0.dev0/Host/setup.py</vh>
<v t="stan@picarro-com.20150529220041.1" a="E"><vh>setup declarations</vh>
<v t="stan@picarro-com.20150529231126.1"><vh>_getOsType</vh></v>
<v t="stan@picarro-com.20150529223900.1"><vh>_getPythonVersion</vh></v>
<v t="stan@picarro-com.20150529225140.1"><vh>_getBuildVersion</vh></v>
<v t="stan@picarro-com.20150529225153.1"><vh>_getBuildType</vh></v>
<v t="stan@picarro-com.20150529222139.1" a="E"><vh>class Target</vh>
<v t="stan@picarro-com.20150529222139.2"><vh>__init__</vh></v>
</v>
<v t="stan@picarro-com.20150529223004.1"><vh>&lt;&lt;Setup template for windows apps&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529230542.1"><vh>&lt;&lt;Data files&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529220724.1"><vh>&lt;&lt;List of console applications&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529222531.1"><vh>&lt;&lt;Windows applications&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529224103.1"><vh>&lt;&lt;exclusion, inclusion and dllexclusion lists&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529225611.1"><vh>&lt;&lt;Build version, description, type string&gt;&gt;</vh></v>
<v t="stan@picarro-com.20150529224212.1"><vh>&lt;&lt;Build executables&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="sze.20150528150419.1"><vh>Running py2exe on application in two directories</vh>
<v t="sze.20150528151615.1"><vh>setup.py</vh></v>
<v t="sze.20150528151728.1"><vh>App1/app1.py</vh></v>
<v t="sze.20150528151713.1"><vh>App2/app2.py</vh></v>
</v>
<v t="stan@picarro-com.20150531164144.1" a="E"><vh>Problems with py2exe when importing modules from the same directory</vh>
<v t="stan@picarro-com.20150531172203.1"><vh>@clean find_local_imports.py</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="stan@picarro-com.20150529101713.1"></t>
<t tx="stan@picarro-com.20150529101736.1">http://doughellmann.com/2015/04/28/virtualenvwrapper-4-5-1-enhancements-to-virtualenv.html

pip install virtualenvwrapper-win

conemu.github.io for an Ansi console


rmvirtualenv # To remove 
set WORKON_HOME C:\temp

mkvirtualenv --system-site-packages host_build
call workon host_build
setprojectdir C:\GitHub\host-reorg
add2virtualenv C:\GitHub\host-reorg
cdproject
pip install pybuilder


call workon host_build
cdproject
add2virtualenv Host

</t>
<t tx="stan@picarro-com.20150529215917.1">@language python
@tabwidth -4
@others
</t>
<t tx="stan@picarro-com.20150529220041.1">from distutils.core import setup
from Common import version as hostVersion
import glob
import py2exe
import os
import platform
import sys
import time

@others

if __name__ == "__main__":
    # Get the current dir. Expect that we are in the Host folder.
    curDirPath = os.getcwd()
    curDir = os.path.split(curDirPath)[1]

    # Windows dirs are not case-sensitive. 
    # Logic will need to be changed slightly to support OSes that have case-sensitive directory names.
    if curDir.lower() != "host":
        print "Not running in expected folder 'Host'!"
        sys.exit(1)
    
    # Set the PYTHONPATH environment variable so the current folder tree is used to
    # pull local libraries from.
    parentDir = os.path.normpath(os.path.join(curDirPath, ".."))
    firmwareDir = os.path.normpath(os.path.join(curDirPath, "..", "Firmware"))
    
    # for a sanity check -- not needed in PYTHONPATH as the parent dir will already be there
    commonDir = os.path.join(parentDir, "Host", "Common")
    
    # folders must exist
    folders = [parentDir, commonDir, firmwareDir]
    for folder in folders:
        print "folder=", folder
        if not os.path.isdir(folder):
            print "Expected folder '%s' does not exist!", folder
            sys.exit(1)
            
    osType = _getOsType()
    pythonVer = _getPythonVersion()
    version = sys.version_info
    pyDirname = "Python%d%d" % (version[0],version[1])
    versionStr = _getBuildVersion()
    buildTypeStr = _getBuildType()
    
    sys.path.insert(1,firmwareDir)
    sys.path.insert(1,parentDir)
    
    &lt;&lt;Setup template for windows apps&gt;&gt;
    &lt;&lt;Data files&gt;&gt;        
    &lt;&lt;List of console applications&gt;&gt;
    &lt;&lt;Windows applications&gt;&gt;
    &lt;&lt;exclusion, inclusion and dllexclusion lists&gt;&gt;
    &lt;&lt;Build version, description, type string&gt;&gt;
    &lt;&lt;Build executables&gt;&gt;
</t>
<t tx="stan@picarro-com.20150529220127.1">@language python
@tabwidth -4
@others
</t>
<t tx="stan@picarro-com.20150529220127.2">from distutils.core import setup
import py2exe
import os
import sys

if __name__ == "__main__":
    # Get the current dir. Expect that we are in the Host folder.
    curDirPath = os.getcwd()
    curDir = os.path.split(curDirPath)[1]

    # Windows dirs are not case-sensitive. 
    # Logic will need to be changed slightly to support OSes that have case-sensitive directory names.
    if curDir.lower() != "host":
        print "Not running in expected folder 'Host'!"
        sys.exit(1)
    
    # Set the PYTHONPATH environment variable so the current folder tree is used to
    # pull local libraries from.
    parentDir = os.path.normpath(os.path.join(curDirPath, ".."))
    firmwareDir = os.path.normpath(os.path.join(curDirPath, "..", "Firmware"))
    
    # for a sanity check -- not needed in PYTHONPATH as the parent dir will already be there
    commonDir = os.path.join(parentDir, "Host", "Common")
    
    # folders must exist
    folders = [parentDir, commonDir, firmwareDir]
    for folder in folders:
        print "folder=", folder
        if not os.path.isdir(folder):
            print "Expected folder '%s' does not exist!", folder
            sys.exit(1)

    sys.path.insert(1,firmwareDir)
    sys.path.insert(1,parentDir)

    consoleList = [
        "Archiver/Archiver.py",
        "RDFrequencyConverter/RDFrequencyConverter.py",
        "SpectrumCollector/SpectrumCollector.py",
        "Driver/Driver.py",
        "EventManager/EventManager.py",
        "Supervisor/Supervisor.py",
    ]
    
    exclusionList = ["Tkconstants", "Tkinter", "tcl", '_gtkagg', '_tkagg', '_agg2', '_cairo', '_cocoaagg',
                    '_fltkagg', '_gtk', '_gtkcairo', ]

    inclusionList = ["encodings.*",
                     "tables.*"]

    dllexclusionList = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', "mswsock.dll", "powrprof.dll" ]

    packageList = ["email"]
    
    setup(version = "0.0.1",
          description = "Sample applications",
          name = "Test Build",
          options = dict(py2exe = dict(compressed = 1,
                                       optimize = 1,
                                       # bundle_files = 1,
                                       excludes = exclusionList,
                                       includes = inclusionList,
                                       dll_excludes = dllexclusionList,
                                       packages = packageList)
                         ),
          # targets to build...
          console = consoleList,
          zipfile = "lib/share"
    )
</t>
<t tx="stan@picarro-com.20150529220159.1">@language python
@tabwidth -4
@others
# The manifest will be inserted as resource into test_wx.exe.  This
# gives the controls the Windows XP appearance (if run on XP ;-)
#
# Another option would be to store it in a file named
# test_wx.exe.manifest, and copy it with the data_files option into
# the dist-dir.
#

cDep = ""
if version[0] == 2 and version[1] &gt; 5:
    cDep = """
&lt;dependency&gt;
    &lt;dependentAssembly&gt;
        &lt;assemblyIdentity
            type="win32"
            name="Microsoft.VC90.CRT"
            version="9.0.21022.8"
            processorArchitecture="X86"
            publicKeyToken="1fc8b3b9a1e18e3b"
            language="*"
        /&gt;
    &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
    """
manifest_template = '''
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
&lt;assemblyIdentity
  version="5.0.0.0"
  processorArchitecture="x86"
  name="%%(prog)s"
  type="win32"
/&gt;
&lt;description&gt;%%(prog)s Program&lt;/description&gt;
&lt;dependency&gt;
  &lt;dependentAssembly&gt;
    &lt;assemblyIdentity
      type="win32"
      name="Microsoft.Windows.Common-Controls"
      version="6.0.0.0"
      processorArchitecture="X86"
      publicKeyToken="6595b64144ccf1df"
      language="*"
    /&gt;
  &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
%s
&lt;/assembly&gt;
''' % (cDep,)
RT_MANIFEST = 24
Controller = Target(description = "Controller", # used for the versioninfo resource
                    script = "Controller/Controller.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Controller")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Controller"
                    )

#ControllerBuildStation = Target(description = "ControllerBuildStation", # used for the versioninfo resource
#                    script = "ControllerBuildStation/ControllerBuildStation.py", # what to build
#                    other_resources = [(RT_MANIFEST,
#                                        1,
#                                        manifest_template % dict(prog="ControllerBuildStation")
#                                        )],
#                    ##    icon_resources = [(1, "icon.ico")],
#                    dest_base = "ControllerBuildStation"
#                    )

QuickGui = Target(description = "QuickGui", # used for the versioninfo resource
                    script = "QuickGui/QuickGui.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="QuickGui")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "QuickGui"
                    )

Fitter = Target(description = "Fitter", # used for the versioninfo resource
                    script = "Fitter/Fitter.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Fitter")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Fitter"
                    )

Coordinator = Target(description = "Coordinator", # used for the versioninfo resource
                    script = "Coordinator/Coordinator.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Coordinator")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Coordinator"
                    )

deltaCorrProcessor = Target(description = "DeltaCorrProcessor", # used for the versioninfo resource
                    script = "Coordinator/DeltaCorrProcessor.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="deltaCorrProcessor")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "DeltaCorrProcessor"
                    )

dilutionCorrProcessor = Target(description = "DilutionCorrProcessor", # used for the versioninfo resource
                    script = "Coordinator/DilutionCorrProcessor.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="dilutionCorrProcessor")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "DilutionCorrProcessor"
                    )

supervisorLauncher = Target(description = "SupervisorLauncher", # used for the versioninfo resource
                    script = "Utilities/SupervisorLauncher/SupervisorLauncher.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="supervisorLauncher")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "SupervisorLauncher"
                    )

# End of special controller setup stuff (except to use controller below)
################################################################

# simple check to save us from potential problems using paths in Picarro.pth
if "PYTHONPATH" not in os.environ:
    print "PYTHONPATH is not set in environment, potential exists for pulling local libs from wrong dir."
    print "Run 'python buildHost.py' instead to build Host apps from the command line."
    sys.exit(1)


pythonVer = _getPythonVersion()
pythonSubVer = _getPythonSubVersion()
osType = _getOsType()

versionStr = _getBuildVersion()
buildTypeStr = _getBuildType()


# Build the various Host .pyd modules
#
# Fitter: build cluster_analyzer.pyd and fitutils.pyd
if pythonVer == "2.5":
    fitutilsBatFilename = "makeFitutils25.bat"
elif pythonVer == "2.7":
    fitutilsBatFilename = "makeFitutils27.bat"
else:
    print "Unsupported Python version %s!" % pythonVer
    sys.exit(1)

_runBatFile("fitutils.pyd, cluster_analyzer.pyd", fitutilsBatFilename, "Fitter")

# Common: swathP.pyd
if pythonVer == "2.5":
    swathPBatFilename = "makeSwathP25.bat"
elif pythonVer == "2.7":
    swathPBatFilename = "makeSwathP27.bat"
else:
    print "Unsupported Python version %s!" % pythonVer
    sys.exit(1)

_runBatFile("swathP.pyd", swathPBatFilename, "Common")

# Utilities\SuperBuildStation: fastLomb.pyd
_runBatFile("fastLomb.pyd", "setup.bat", os.path.join("Utilities", "SuperBuildStation"))


# And now to the main setup routine...
#
# The following lists and tuples are common to both Python 2.5 and 2.7 builds. If any
# require customization, they must be moved and maintained separately under the if statements below.
exclusionList = ["Tkconstants", "Tkinter", "tcl", '_gtkagg', '_tkagg', '_agg2', '_cairo', '_cocoaagg',
                '_fltkagg', '_gtk', '_gtkcairo', ]

inclusionList = ["email",
                 "email.iterators",
                 "email.generator",
                 "email.mime.audio",
                 "email.mime.multipart",
                 "email.mime.image",
                 "email.mime.text",
                 "email.mime.base",
                 "scipy.interpolate",
                 "scipy.misc",
                 "sip",
                 "matplotlib.backends",
                 "matplotlib.backends.backend_wxagg",
                 "matplotlib.backends.backend_qt4agg",
                 "matplotlib.figure",
                 "pylab",
                 "numpy",
                 "configobj",
                 "encodings.*",
                 "tables.*"]

dllexclusionList = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', "mswsock.dll", "powrprof.dll" ]

hex_images = glob.glob("../Firmware/CypressUSB/Drivers/*.*")
hex_images = hex_images + [ "../Firmware/CypressUSB/analyzer/analyzerUsb.hex",
                            "../Firmware/DSP/src/Debug/dspMain.hex",
                            "../Firmware/MyHDL/Spartan3/top_io_map.bit"]

cypressDriverDirs = ["amd64", "ia64", "license/libusb0", "x86"]

data_files = [(".", ["EventManager/Warning_16x16_32.ico",
                   "EventManager/Info_16x16_32.ico",
                   "EventManager/Critical_16x16_32.ico",
                   "QuickGui/LEDgreen.ico",
                   "QuickGui/LEDgreen2.ico",
                   "QuickGui/LEDoff.ico",
                   "QuickGui/LEDoff2.ico",
                   "QuickGui/LEDred2.ico",
                   "QuickGui/logo.png",
                   "Fitter/fitutils.pyd",
                   "Fitter/cluster_analyzer.pyd",
                   "Utilities/SupervisorLauncher/Check.png",
                   "Utilities/SupervisorLauncher/alarm.png",
                   "Utilities/SupervisorLauncher/Cancel.ico",
                   "Utilities/SupervisorLauncher/Controller_icon.ico",
                   "Utilities/SupervisorLauncher/Diagnostics_icon.ico",
                   "Utilities/SupervisorLauncher/EnviroSense.ico",
                   "Utilities/SupervisorLauncher/Integration_icon.ico",
                   "Utilities/SupervisorLauncher/Picarro_icon.ico",
                   "Utilities/SupervisorLauncher/Utilities_icon.ico",
                   "PeriphIntrf/Serial2Socket.exe",
                   "../MobileKit/AnalyzerServer/configAnalyzerServer.ini",
                   "../repoBzrVer.py"]),
            (r'mpl-data', glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\*.*' % pyDirname)),
            # Because matplotlibrc does not have an extension, glob does not find it (at least I think that's why)
            # So add it manually here:
            (r'mpl-data', [r'C:\%s\Lib\site-packages\matplotlib\mpl-data\matplotlibrc' % pyDirname]),
            (r'mpl-data\images',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\images\*.*' % pyDirname)),
            (r'mpl-data\fonts',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\fonts\*.*' % pyDirname)),
            ("Images", hex_images),
            ("static", glob.glob(r'Utilities\BackpackServer\static\*.*')),
            ("templates", glob.glob(r'Utilities\BackpackServer\templates\*.*')),
            ("static", glob.glob(r'..\MobileKit\AnalyzerServer\static\*.*')),
            ("templates", glob.glob(r'..\MobileKit\AnalyzerServer\templates\*.*')),
            (r"static\images", glob.glob(r'..\MobileKit\AnalyzerServer\static\images\*.*')),
            (r"static\images\icons", glob.glob(r'..\MobileKit\AnalyzerServer\static\images\icons\*.*')),
            (r"static\css", glob.glob(r'..\MobileKit\AnalyzerServer\static\css\*.*')),
            (r"static\sound", glob.glob(r'..\MobileKit\AnalyzerServer\static\sound\*.*')),
            ]
for d in cypressDriverDirs:
    data_files.append(("Images/%s"%d, glob.glob("../Firmware/CypressUSB/Drivers/" + "%s/*.*" %d)))

if osType == "winxp":
    data_files.append("../Vendor/inpout/winxp/inpout32.dll")
elif osType == "win7":
    data_files.append("../Vendor/inpout/win7/Win32/inpout32.dll")
else:
    print "Failed to include inpout32.dll in build, OS is not supported! (osType='%s')" % osType
    sys.exit(1)


consoleList = [
    "ActiveFileManager/ActiveFileManager.py",
    "RDFrequencyConverter/RDFrequencyConverter.py",
    "SpectrumCollector/SpectrumCollector.py",
    "ValveSequencer/ValveSequencer.py",
    "AlarmSystem/AlarmSystem.py",
    "Archiver/Archiver.py",
    "CommandInterface/CommandInterface.py",
    "Common/SchemeProcessor.py",
    "DataLogger/DataLogger.py",
    "DataManager/DataManager.py",
    "Driver/Driver.py",
    "ElectricalInterface/ElectricalInterface.py",
    "EventLogWatcher/EventLogWatcher.py",
    "EventManager/EventManager.py",
    "InstMgr/InstMgr.py",
    "FileEraser/FileEraser.py",
    "MeasSystem/MeasSystem.py",
    "SampleManager/SampleManager.py",
    "Supervisor/Supervisor.py",
    "ReadExtSensor/ReadExtSensor.py",
    "WebServer/server.py",
    "rdReprocessor/rdReprocessor.py",
    "Utilities/RemoteAccess/RemoteAccess.py",
    "Utilities/IntegrationTool/IntegrationTool.py",
    "Utilities/IntegrationBackup/IntegrationBackup.py",
    "Utilities/FlowController/FlowController.py",
    "Utilities/Restart/ResetAnalyzer.py",
    "Utilities/Restart/RestoreStartup.py",
    "Utilities/Restart/RtcAlarmOff.py",
    "Utilities/ReadMemUsage/ReadMemUsage.py",
    "Utilities/BackpackServer/backpackServer.py",
    "Utilities/RestartSupervisor/RestartSupervisor.py",
    "Utilities/ProgramVariableGainRdd/programRdd.py",
    'Utilities/KillRestartSupervisor/KillRestartSupervisor.py',
    "../Firmware/Utilities/CalibrateSystem.py",
    "../Firmware/Utilities/CalibrateFsr.py",
    "../Firmware/Utilities/AdjustWlmOffset.py",
    "../Firmware/Utilities/ExamineRawRD.py",
    "../Firmware/Utilities/ExamineRDCount.py",
    "../Firmware/Utilities/LaserLockPrbs.py",
    "../Firmware/Utilities/LaserPidPrbs.py",
    "../Firmware/Utilities/MakeWarmBoxCalFile.py",
    "../Firmware/Utilities/MakeWarmBoxCal_NoWlm.py",
    "../Firmware/Utilities/MakeWlmFile1.py",
    "../Firmware/Utilities/WriteLaserEeprom.py",
    "../Firmware/Utilities/MakeNoWlmFile.py",
    "../Firmware/Utilities/WriteWlmEeprom.py",
    "../Firmware/Utilities/DumpEeproms.py",
    "../Firmware/Utilities/MakeCalFromEeproms.py",
    "../Firmware/Utilities/FindWlmOffset.py",
    "../Firmware/Utilities/SaveData.py",
    "../Firmware/Utilities/SaveRaw.py",
    "../Firmware/Utilities/TestClient.py",
    "../Firmware/Utilities/ThresholdStats.py",
    "../Firmware/Utilities/CheckLaserCal.py",
    Fitter,
    "ConfigMonitor/ConfigMonitor.py",
    "PeriphIntrf/RunSerial2Socket.py",
    'LockWorkstation/LockWorkstation.py'
]

windowsList = [
    QuickGui, Coordinator,Controller,deltaCorrProcessor, dilutionCorrProcessor,
    "Common/StopSupervisor.py",
    "IPV/IPV.py",
    "IPV/IPVLicense.py",
    "Utilities/DiagDataCollector/DiagDataCollector.py",
    supervisorLauncher,
    "Utilities/SupervisorLauncher/HostStartup.py",
    "Utilities/CoordinatorLauncher/CoordinatorLauncher.py",
    "Utilities/FluxSwitcher/FluxScheduler.py",
    "Utilities/FluxSwitcher/FluxSwitcherGui.py",
    "Utilities/ValveDisplay/ValveDisplay.py",
    "Utilities/InstrEEPROMAccess/InstrEEPROMAccess.py",
    "Utilities/DataRecal/DataRecal.py",
    "Utilities/SetupTool/SetupTool.py",
    "Utilities/PicarroKML/PicarroKML.py",
    "Utilities/ReadGPSWS/ReadGPSWS.py",
    "Utilities/PeriphModeSwitcher/PeriphModeSwitcher.py",
    "Utilities/RecipeEditor/RecipeEditor.py",
    "Utilities/ConfigManager/ConfigManager.py",
    "Utilities/AircraftValveSwitcher/AircraftValveSwitcher.py",
]

# Autogenerate required files
with OS.chdir(os.path.join(os.path.dirname(__file__), '..', 'Firmware', 'xml')):
    subprocess.Popen(['python.exe', 'xmldom1.py']).wait()

# Generate git repo version file. Filename is a carryover from when we used
# bzr to archive our sources, is an import lib used in Driver.py for version info.
verFilePath = os.path.normpath(os.path.join(os.path.dirname(__file__), '..', 'repoBzrVer.py'))
branchName = _getGitBranch(os.path.dirname(os.getcwd()))

ret = _createGitVersionPythonFile(verFilePath, buildTypeStr, branchName)

if ret != 0:
    print "Error creating git config file '%s'" % verFilePath
    sys.exit(1)

"""
# old bzr method - incredibly it worked (somewhat) on git dirs
with open(os.path.join(os.path.dirname(__file__), '..',
                       'repoBzrVer.py'), 'w') as fp:
    subprocess.Popen(['bzr.exe', 'version-info', '--python'], stdout=fp).wait()
"""

# Generate internal build version
with open(os.path.join(os.path.dirname(__file__), 'Common',
                       'setup_version.py'), 'w') as fp:
    fp.writelines(
        ["# autogenerated by PicarroExeSetup.py, %s\n" % time.asctime(),
         "\n",
         "def versionString():\n",
         "    return '%s'\n" % hostVersion.versionString()])


description = "Picarro Host Core Analyzer Software"

productName = "Picarro CRDS"
if buildTypeStr != "":
    productName = "Picarro CRDS (%s)" % buildTypeStr


if pythonVer == "2.5":
    # only packageList differs for Python 2.5 and 2.7
    packageList = ["simplejson", "werkzeug","flask","jinja2","email"]

    setup(version = versionStr,
      description = description,
      name = productName,
      options = dict(py2exe = dict(compressed = 1,
                                   optimize = 1,
                                   bundle_files = 1,
                                   excludes = exclusionList,
                                   includes = inclusionList,
                                   dll_excludes = dllexclusionList,
                                   packages = packageList)
                     ),
      # targets to build...
      console = consoleList,
      windows = windowsList,
      data_files = data_files
)

elif pythonVer == "2.7":
    if pythonSubVer == "2.7.3":
        import zmq
        os.environ["PATH"] += os.path.pathsep + os.path.split(zmq.__file__)[0]

    packageList = ["werkzeug","jinja2","email"]

    # no bundle_files, specify zipfile
    setup(version = versionStr,
          description = description,
          name = productName,
          options = dict(py2exe = dict(compressed = 1,
                                       optimize = 1,
                                       # bundle_files = 1,
                                       excludes = exclusionList,
                                       includes = inclusionList,
                                       dll_excludes = dllexclusionList,
                                       packages = packageList)
                         ),
          # targets to build...
          console = consoleList,
          windows = windowsList,
          data_files = data_files,
          zipfile = "lib/share"
    )

else:
    print "Unsupported Python version %s" % pythonVer
    sys.exit(1)
</t>
<t tx="stan@picarro-com.20150529220322.1">"""
Copyright 2006-2014 Picarro Inc.

A disutils script that uses py2exe to build Win32 executables for the
Host platform.

Bails if PYTHONPATH is unset, to ensure Picarro.pth is being overridden
so Picarro libs are pulled from the proper dir (primitive check, could
be smarter)

Usage: python PicarroExeSetup py2exe

Notes: Use python buildHost.py from the command line, which sets up
       the environment for this script.
#
# File History:
# 2013-10-30 sze  Remove bundle=1, and write files to lib subdirectory
# 2014-01-14 tw   Support builds in both Python 2.5 and 2.7 so can bring
#                 this file into older release branches. Primitive check
#                 for PYTHONPATH to help ensure local libs pulled from
#                 current tree.
"""

from __future__ import with_statement

from distutils.core import setup
import py2exe
import sys
import glob
import time
import subprocess
import os.path
import platform

from Host.Common import OS
from Host.Common import version as hostVersion

version = sys.version_info
pyDirname = "Python%d%d" % (version[0],version[1])
sys.path.append("ActiveFileManager")
sys.path.append("Coordinator")
sys.path.append("ValveSequencer")
sys.path.append("AlarmSystem")
sys.path.append("RDFrequencyConverter")
sys.path.append("SpectrumCollector")
sys.path.append("CommandInterface")
sys.path.append("Common")
sys.path.append("autogen")
sys.path.append("Controller")
# sys.path.append("ControllerBuildStation")
sys.path.append("DataLogger")
sys.path.append("DataManager")
sys.path.append("Driver")
sys.path.append("ElectricalInterface")
sys.path.append("EventManager")
sys.path.append("Fitter")
sys.path.append("InstMgr")
sys.path.append("Archiver")
sys.path.append("FileEraser")
sys.path.append("MeasSystem")
sys.path.append("QuickGui")
sys.path.append("SampleManager")
sys.path.append("Supervisor")
sys.path.append("ReadExtSensor")
sys.path.append("IPV")
sys.path.append("ConfigMonitor")
sys.path.append("PeriphIntrf")
sys.path.append("Utilities")
sys.path.append("WebServer")
sys.path.append("rdReprocessor")
sys.path.append("Utilities/RemoteAccess")
sys.path.append("Utilities/DiagDataCollector")
sys.path.append("Utilities/SupervisorLauncher")
sys.path.append("Utilities/CoordinatorLauncher")
sys.path.append("Utilities/FluxSwitcher")
sys.path.append("Utilities/ValveDisplay")
sys.path.append("Utilities/InstrEEPROMAccess")
sys.path.append("Utilities/DataRecal")
sys.path.append("Utilities/IntegrationTool")
sys.path.append("Utilities/SetupTool")
sys.path.append("Utilities/PicarroKML")
sys.path.append("Utilities/ReadGPSWS")
sys.path.append("Utilities/IntegrationBackup")
sys.path.append("Utilities/FlowController")
sys.path.append("Utilities/ReadMemUsage")
sys.path.append("Utilities/PeriphModeSwitcher")
sys.path.append("Utilities/RecipeEditor")
sys.path.append("Utilities/BackpackServer")
sys.path.append("Utilities/ConfigManager")
sys.path.append("Utilities/AircraftValveSwitcher")
sys.path.append("Utilities/ProgramVariableGainRdd")
sys.path.append("Utilities/RestartSupervisor")
sys.path.append('Utilities/KillRestartSupervisor')
sys.path.append("../Firmware/Utilities")

sys.stderr = sys.stdout

</t>
<t tx="stan@picarro-com.20150529220322.10">def _getTimeIso8601Str(t):
    """
    Build a string for time in ISO 8601 format. Unfortunately none of the Python libs do this
    so requires a little work.

    Result looks like this: 2014-04-21 14:12:09 -0700

    Arguments:
                t    seconds past the epoch, UTC (returned by time.time())
    """
    if time.localtime(t).tm_isdst == 1:
        # currently in Daylight Savings Time
        # negate time as return val is seconds west of GMT
        tdiff = -time.altzone
    else:
        # Standard Time
        tdiff = -time.timezone

    # compute time difference from UTC in HHMM (e.g. -0700 for PDT)
    hr = tdiff / (3600)
    minutes = (tdiff - (hr * 3600)) / 60
    strDiff = "%+03d%02d" % (hr, minutes)

    timeStr = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(t))
    return timeStr + " " + strDiff


</t>
<t tx="stan@picarro-com.20150529220322.11">def _getTimeStr(t):
    #
    return time.strftime("%Y-%m-%d %H:%M:%S %Z", time.localtime(t))


</t>
<t tx="stan@picarro-com.20150529220322.12">def _createGitVersionPythonFile(filepath, buildTypeStr, branchName):
    # get git log info to be stored in version.ini
    #
    # revno is short SHA1 value
    revno, stdout_value = runCommand("git.exe log -1 --pretty=format:%h")

    if stdout_value is not None:
        print "Error '%s' getting revno" % stdout_value
        return 1

    # last modify date
    lastModDate, stdout_value = runCommand("git.exe log -1 --pretty=format:%ai")

    if stdout_value is not None:
        print "Error '%s' getting lastModDate" % stdout_value
        return 1

    # build a revision_id string so it is a similar format to the bzr output
    #
    #   last modify date, UNIX timestamp
    tval, stdout_value = runCommand("git.exe log -1 --pretty=format:%at")
    #print "UNIX timestamp tval=", tval

    if stdout_value is not None:
        print "Error '%s' getting tval" % stdout_value
        return 1

    #   convert to YYYYMMDDHHMMSS string
    tm = time.gmtime(float(tval))
    #print "tm=", tm

    tmStr = time.strftime("%Y%m%d%H%M%S", tm)

    #   last mod author email
    emailStr, stdout_value = runCommand("git.exe log -1 --pretty=format:%ae")

    if stdout_value is not None:
        print "Error '%s' getting emailStr" % stdout_value
        return 1

    #  full SHA1
    idStr, stdout_value = runCommand("git.exe log -1 --pretty=format:%H")

    if stdout_value is not None:
        print "Error '%s' getting idStr (SHA1)" % stdout_value
        return 1

    revision_id = emailStr + "-" + tmStr + "-" + idStr

    # write the version.ini file
    with open(filepath, 'w') as fp:
        curTime = time.time()

        # build time string, with timezone offset from GMT in HHMM
        buildTimeStr = _getTimeIso8601Str(curTime)

        # build time string, with timezone name text
        #buildTimeStr = _getTimeStr(curTime)

        fp.writelines(
            ["# autogenerated by PicarroExeSetup.py, %s\n" % time.asctime(time.localtime(curTime)),
             "\n",
             "version_info = {'branch_nick': '%s',\n" % branchName,
             " 'build_date': '%s',\n" % buildTimeStr,
             " 'clean': None,\n",
             " 'date': '%s',\n" % lastModDate,
             " 'revision_id': '%s',\n" % revision_id,
             " 'revno': '%s'}\n" % revno,
             "\n",
             "revisions = {}\n",
             "\n",
             "file_revisions = {}\n",
             "\n",
             "if __name__ == '__main__':\n",
             "    print 'revision: %(revno)s' % version_info\n",
             "    print 'nick: %(branch_nick)s' % version_info\n",
             "    print 'revision id: %(revision_id)s' % version_info\n\n"
             ])

    # return with no errors
    return 0


</t>
<t tx="stan@picarro-com.20150529220322.13">################################################################
# Start of a pile of special setup with the sole purpose
# of making the wxPython apps look like Windows-native
#
class Target:
    @others
</t>
<t tx="stan@picarro-com.20150529220322.14">def __init__(self, **kw):
    self.__dict__.update(kw)
</t>
<t tx="stan@picarro-com.20150529220322.2">def _getPythonVersion():
    """
    Returns a string such as "2.5" or 2.7"
    """
    pythonVer = sys.version_info
    return str(pythonVer[0]) + "." + str(pythonVer[1])


</t>
<t tx="stan@picarro-com.20150529220322.3">def _getPythonSubVersion():
    """
    Returns a string such as "2.7.3"
    """
    pythonVer = sys.version_info
    return str(pythonVer[0]) + "." + str(pythonVer[1]) + "." + str(pythonVer[2])


</t>
<t tx="stan@picarro-com.20150529220322.4">def _getOsType():
    osType = platform.uname()[2]

    if osType == '7':
        osType = 'win7'
    elif osType == 'XP':
        osType = 'winxp'
    else:
        osType = 'unknown'
        print "Unexpected OS type!"

    return osType


</t>
<t tx="stan@picarro-com.20150529220322.5">def _runBatFile(batComponent, batFilename, batDir):
    """
    Runs a Windows .bat file to build a component. Arguments:
      batComponent   name of component being built (e.g., fitutils.pyd)
      batFilename    Windows .bat filename to execute
      batDir         folder containing the .bat file (can be relative to current dir)
    """
    print "building %s using %s" % (batComponent, batFilename)

    # this saves off current folder and restores it when done
    with OS.chdir(batDir):
        if not os.path.isfile(batFilename):
            print "Batch file '%s' does not exist in folder '%s'!" % (batFilename, batDir)
            sys.exit(1)

        retCode = subprocess.Popen([batFilename]).wait()

        if retCode != 0:
            print "Error building %s, retCode=%d, batFilename=%s" % (batComponent, retCode, batFilename)
            sys.exit(retCode)


</t>
<t tx="stan@picarro-com.20150529220322.6">def _getBuildVersion():
    try:
        # First look for release_version which is generated by
        # release.py
        from Host.Common import release_version as buildVersion
        verStr = buildVersion.versionNumString()
        print "Release version: %s" % verStr
    except Exception, e:
        # Next try build_version which is generated by
        # buildHost.py (command line script for internal builds)
        try:
            import build_version as buildVersion
            verStr = buildVersion.versionNumString()
            print "Setup version: %s" % verStr
        except Exception, e:
            # use default
            verStr = "1.0.0.0"
            print "Release or setup version not found, using: %s" % verStr

    return verStr


</t>
<t tx="stan@picarro-com.20150529220322.7">def _getBuildType():
    try:
        # First look for release_version which is generated by
        # release.py
        import release_version as buildVersion
        buildTypeStr = buildVersion.buildType()
        print "Release build type: %s" % buildTypeStr
    except Exception, e:
        try:
            # Not found, try setup_version (generated by buildHost.py
            # during internal builds)
            #import build_version as buildVersion
            #buildTypeStr = buildVersion.buildType()
            #print "Setup build type: %s" % buildTypeStr

            # Internal build, includes last git check-in SHA1
            # returns "Internal (&lt;SHA1&gt;)"
            buildTypeStr = hostVersion.versionString()
            print "Setup build type: %s" % buildTypeStr

        except Exception, e:
            # Should never get here...
            buildTypeStr = "DEVELOPMENT"
            print "Release or setup version build type not found, using: %s" % buildTypeStr

    return buildTypeStr


</t>
<t tx="stan@picarro-com.20150529220322.8">def runCommand(command):
    """
    Run a command line command so we can capture its output.
    """
    #print "runCommand: '%s'" % command
    p = subprocess.Popen(command,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)

    stdout_value, stderr_value = p.communicate()
    # print "stdout:", repr(stdout_value)
    return stdout_value, stderr_value


</t>
<t tx="stan@picarro-com.20150529220322.9">def _getGitBranch(gitDir):
    """
    Get the git branch that the gitDir is currently set to.
    """
    #print "gitDir=%s" % gitDir

    curBranch = ""

    if not os.path.isdir(gitDir):
        print "'%s' is not a directory!" % gitDir
        return curBranch

    # save off the current dir so we can get back to it when we're done
    saveDir = os.getcwd()

    # change to the git dir
    #print "cd to '%s'" % gitDir
    os.chdir(gitDir)
    #print "current dir is now '%s'" % os.getcwd()

    # run "git branch" and parse stdout for it -- the current branch name begins with a "* "
    command = "git branch"
    stdout_value, stderr_value = runCommand(command)

    branches = stdout_value.splitlines()
    for branch in branches:
        #print branch
        if branch[0] == "*" and branch[1] == " ":
            curBranch = branch[2:].rstrip("\r\n")
            #print "curBranch='%s'" % curBranch
            break

    #print "currentDir='%s'" % os.getcwd()

    # reset to the original dir
    os.chdir(saveDir)

    return curBranch


</t>
<t tx="stan@picarro-com.20150529220724.1">consoleList = [
    "ActiveFileManager/ActiveFileManager.py",
    "RDFrequencyConverter/RDFrequencyConverter.py",
    "SpectrumCollector/SpectrumCollector.py",
    "ValveSequencer/ValveSequencer.py",
    "AlarmSystem/AlarmSystem.py",
    "Archiver/Archiver.py",
    "CommandInterface/CommandInterface.py",
    "Common/SchemeProcessor.py",
    "DataLogger/DataLogger.py",
    "DataManager/DataManager.py",
    "Driver/Driver.py",
    "ElectricalInterface/ElectricalInterface.py",
    "EventLogWatcher/EventLogWatcher.py",
    "EventManager/EventManager.py",
    "InstMgr/InstMgr.py",
    "FileEraser/FileEraser.py",
    "MeasSystem/MeasSystem.py",
    "SampleManager/SampleManager.py",
    "Supervisor/Supervisor.py",
    "ReadExtSensor/ReadExtSensor.py",
    "WebServer/server.py",
    "rdReprocessor/rdReprocessor.py",
    "Utilities/RemoteAccess/RemoteAccess.py",
    "Utilities/IntegrationTool/IntegrationTool.py",
    "Utilities/IntegrationBackup/IntegrationBackup.py",
    "Utilities/FlowController/FlowController.py",
    "Utilities/Restart/ResetAnalyzer.py",
    "Utilities/Restart/RestoreStartup.py",
    "Utilities/Restart/RtcAlarmOff.py",
    "Utilities/ReadMemUsage/ReadMemUsage.py",
    "Utilities/BackpackServer/backpackServer.py",
    "Utilities/RestartSupervisor/RestartSupervisor.py",
    "Utilities/ProgramVariableGainRdd/programRdd.py",
    'Utilities/KillRestartSupervisor/KillRestartSupervisor.py',
    "../Firmware/Utilities/CalibrateSystem.py",
    "../Firmware/Utilities/CalibrateFsr.py",
    "../Firmware/Utilities/AdjustWlmOffset.py",
    "../Firmware/Utilities/ExamineRawRD.py",
    "../Firmware/Utilities/ExamineRDCount.py",
    "../Firmware/Utilities/LaserLockPrbs.py",
    "../Firmware/Utilities/LaserPidPrbs.py",
    "../Firmware/Utilities/MakeWarmBoxCalFile.py",
    "../Firmware/Utilities/MakeWarmBoxCal_NoWlm.py",
    "../Firmware/Utilities/MakeWlmFile1.py",
    "../Firmware/Utilities/WriteLaserEeprom.py",
    "../Firmware/Utilities/MakeNoWlmFile.py",
    "../Firmware/Utilities/WriteWlmEeprom.py",
    "../Firmware/Utilities/DumpEeproms.py",
    "../Firmware/Utilities/MakeCalFromEeproms.py",
    "../Firmware/Utilities/FindWlmOffset.py",
    "../Firmware/Utilities/SaveData.py",
    "../Firmware/Utilities/SaveRaw.py",
    "../Firmware/Utilities/TestClient.py",
    "../Firmware/Utilities/ThresholdStats.py",
    "../Firmware/Utilities/CheckLaserCal.py",
    "ConfigMonitor/ConfigMonitor.py",
    "PeriphIntrf/RunSerial2Socket.py",
    'LockWorkstation/LockWorkstation.py'
]</t>
<t tx="stan@picarro-com.20150529222139.1">class Target:
    @others
</t>
<t tx="stan@picarro-com.20150529222139.2">def __init__(self, **kw):
    self.__dict__.update(kw)
</t>
<t tx="stan@picarro-com.20150529222531.1">RT_MANIFEST = 24


Controller = Target(description = "Controller", # used for the versioninfo resource
                    script = "Controller/Controller.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Controller")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Controller"
                    )

#ControllerBuildStation = Target(description = "ControllerBuildStation", # used for the versioninfo resource
#                    script = "ControllerBuildStation/ControllerBuildStation.py", # what to build
#                    other_resources = [(RT_MANIFEST,
#                                        1,
#                                        manifest_template % dict(prog="ControllerBuildStation")
#                                        )],
#                    ##    icon_resources = [(1, "icon.ico")],
#                    dest_base = "ControllerBuildStation"
#                    )

QuickGui = Target(description = "QuickGui", # used for the versioninfo resource
                    script = "QuickGui/QuickGui.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="QuickGui")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "QuickGui"
                    )

Fitter = Target(description = "Fitter", # used for the versioninfo resource
                    script = "Fitter/Fitter.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Fitter")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Fitter"
                    )

Coordinator = Target(description = "Coordinator", # used for the versioninfo resource
                    script = "Coordinator/Coordinator.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="Coordinator")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "Coordinator"
                    )

deltaCorrProcessor = Target(description = "DeltaCorrProcessor", # used for the versioninfo resource
                    script = "Coordinator/DeltaCorrProcessor.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="deltaCorrProcessor")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "DeltaCorrProcessor"
                    )

dilutionCorrProcessor = Target(description = "DilutionCorrProcessor", # used for the versioninfo resource
                    script = "Coordinator/DilutionCorrProcessor.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="dilutionCorrProcessor")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "DilutionCorrProcessor"
                    )

supervisorLauncher = Target(description = "SupervisorLauncher", # used for the versioninfo resource
                    script = "Utilities/SupervisorLauncher/SupervisorLauncher.py", # what to build
                    other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="supervisorLauncher")
                                        )],
                    ##    icon_resources = [(1, "icon.ico")],
                    dest_base = "SupervisorLauncher"
                    )
                    
windowsList = [
    Controller,
    Coordinator,
    deltaCorrProcessor, 
    dilutionCorrProcessor,
    Fitter, 
    QuickGui, 
    "Common/StopSupervisor.py",
    "IPV/IPV.py",
    "IPV/IPVLicense.py",
    "Utilities/DiagDataCollector/DiagDataCollector.py",
    supervisorLauncher,
    "Utilities/SupervisorLauncher/HostStartup.py",
    "Utilities/CoordinatorLauncher/CoordinatorLauncher.py",
    "Utilities/FluxSwitcher/FluxScheduler.py",
    "Utilities/FluxSwitcher/FluxSwitcherGui.py",
    "Utilities/ValveDisplay/ValveDisplay.py",
    "Utilities/InstrEEPROMAccess/InstrEEPROMAccess.py",
    "Utilities/DataRecal/DataRecal.py",
    "Utilities/SetupTool/SetupTool.py",
    "Utilities/PicarroKML/PicarroKML.py",
    "Utilities/ReadGPSWS/ReadGPSWS.py",
    "Utilities/PeriphModeSwitcher/PeriphModeSwitcher.py",
    "Utilities/RecipeEditor/RecipeEditor.py",
    "Utilities/ConfigManager/ConfigManager.py",
    "Utilities/AircraftValveSwitcher/AircraftValveSwitcher.py",
]                    </t>
<t tx="stan@picarro-com.20150529223004.1">cDep = ""

if pythonVer == "2.7":
    cDep = """
        &lt;dependency&gt;
            &lt;dependentAssembly&gt;
                &lt;assemblyIdentity
                    type="win32"
                    name="Microsoft.VC90.CRT"
                    version="9.0.21022.8"
                    processorArchitecture="X86"
                    publicKeyToken="1fc8b3b9a1e18e3b"
                    language="*"
                /&gt;
            &lt;/dependentAssembly&gt;
        &lt;/dependency&gt;
    """
    
manifest_template = """
    &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
    &lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
    &lt;assemblyIdentity
      version="5.0.0.0"
      processorArchitecture="x86"
      name="%%(prog)s"
      type="win32"
    /&gt;
    &lt;description&gt;%%(prog)s Program&lt;/description&gt;
    &lt;dependency&gt;
      &lt;dependentAssembly&gt;
        &lt;assemblyIdentity
          type="win32"
          name="Microsoft.Windows.Common-Controls"
          version="6.0.0.0"
          processorArchitecture="X86"
          publicKeyToken="6595b64144ccf1df"
          language="*"
        /&gt;
      &lt;/dependentAssembly&gt;
    &lt;/dependency&gt;
    %s
    &lt;/assembly&gt;
""" % (cDep,)</t>
<t tx="stan@picarro-com.20150529223900.1">def _getPythonVersion():
    """
    Returns a string such as "2.5" or 2.7"
    """
    pythonVer = sys.version_info
    return str(pythonVer[0]) + "." + str(pythonVer[1])


</t>
<t tx="stan@picarro-com.20150529224103.1">exclusionList = ["Tkconstants", "Tkinter", "tcl", '_gtkagg', '_tkagg', '_agg2', '_cairo', '_cocoaagg',
                '_fltkagg', '_gtk', '_gtkcairo', ]

inclusionList = ["email",
                 "email.iterators",
                 "email.generator",
                 "email.mime.audio",
                 "email.mime.multipart",
                 "email.mime.image",
                 "email.mime.text",
                 "email.mime.base",
                 "scipy.interpolate",
                 "scipy.misc",
                 "sip",
                 "matplotlib.backends",
                 "matplotlib.backends.backend_wxagg",
                 "matplotlib.backends.backend_qt4agg",
                 "matplotlib.figure",
                 "pylab",
                 "numpy",
                 "configobj",
                 "encodings.*",
                 "tables.*"]

dllexclusionList = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', "mswsock.dll", "powrprof.dll" ]</t>
<t tx="stan@picarro-com.20150529224212.1">if pythonVer == "2.5":
    # only packageList differs for Python 2.5 and 2.7
    packageList = ["simplejson", "werkzeug","flask","jinja2","email"]

    setup(version = versionStr,
      description = description,
      name = productName,
      options = dict(py2exe = dict(compressed = 1,
                                   optimize = 1,
                                   bundle_files = 1,
                                   excludes = exclusionList,
                                   includes = inclusionList,
                                   dll_excludes = dllexclusionList,
                                   packages = packageList)
                     ),
      # targets to build...
      console = consoleList,
      windows = windowsList,
      data_files = data_files
)

elif pythonVer == "2.7":
    import zmq
    os.environ["PATH"] += os.path.pathsep + os.path.split(zmq.__file__)[0]

    packageList = ["werkzeug","jinja2","email"]

    # no bundle_files, specify zipfile
    setup(version = versionStr,
          description = description,
          name = productName,
          options = dict(py2exe = dict(compressed = 1,
                                       optimize = 1,
                                       # bundle_files = 1,
                                       excludes = exclusionList,
                                       includes = inclusionList,
                                       dll_excludes = dllexclusionList,
                                       packages = packageList)
                         ),
          # targets to build...
          console = consoleList,
          windows = windowsList,
          data_files = data_files,
          zipfile = "lib/share"
    )</t>
<t tx="stan@picarro-com.20150529225140.1">def _getBuildVersion():
    try:
        # First look for release_version which is generated by
        # release.py
        from Host.Common import release_version as buildVersion
        verStr = buildVersion.versionNumString()
        print "Release version: %s" % verStr
    except Exception, e:
        # Next try build_version which is generated by
        # buildHost.py (command line script for internal builds)
        try:
            import build_version as buildVersion
            verStr = buildVersion.versionNumString()
            print "Setup version: %s" % verStr
        except Exception, e:
            # use default
            verStr = "1.0.0.0"
            print "Release or setup version not found, using: %s" % verStr

    return verStr


</t>
<t tx="stan@picarro-com.20150529225153.1">def _getBuildType():
    try:
        # First look for release_version which is generated by
        # release.py
        import release_version as buildVersion
        buildTypeStr = buildVersion.buildType()
        print "Release build type: %s" % buildTypeStr
    except Exception, e:
        try:
            # Not found, try setup_version (generated by buildHost.py
            # during internal builds)
            #import build_version as buildVersion
            #buildTypeStr = buildVersion.buildType()
            #print "Setup build type: %s" % buildTypeStr

            # Internal build, includes last git check-in SHA1
            # returns "Internal (&lt;SHA1&gt;)"
            buildTypeStr = hostVersion.versionString()
            print "Setup build type: %s" % buildTypeStr

        except Exception, e:
            # Should never get here...
            buildTypeStr = "DEVELOPMENT"
            print "Release or setup version build type not found, using: %s" % buildTypeStr

    return buildTypeStr


</t>
<t tx="stan@picarro-com.20150529225611.1">
# Generate internal build version
with open(os.path.join(os.path.dirname(__file__), 'Common',
                       'setup_version.py'), 'w') as fp:
    fp.writelines(
        ["# autogenerated by PicarroExeSetup.py, %s\n" % time.asctime(),
         "\n",
         "def versionString():\n",
         "    return '%s'\n" % hostVersion.versionString()])


description = "Picarro Host Core Analyzer Software"

productName = "Picarro CRDS"
if buildTypeStr != "":
    productName = "Picarro CRDS (%s)" % buildTypeStr</t>
<t tx="stan@picarro-com.20150529230542.1">hex_images = glob.glob("../Firmware/CypressUSB/Drivers/*.*")
hex_images = hex_images + [ "../Firmware/CypressUSB/analyzer/analyzerUsb.hex",
                            "../Firmware/DSP/src/Debug/dspMain.hex",
                            "../Firmware/MyHDL/Spartan3/top_io_map.bit"]

cypressDriverDirs = ["amd64", "ia64", "license/libusb0", "x86"]

data_files = [(".", ["EventManager/Warning_16x16_32.ico",
                   "EventManager/Info_16x16_32.ico",
                   "EventManager/Critical_16x16_32.ico",
                   "QuickGui/LEDgreen.ico",
                   "QuickGui/LEDgreen2.ico",
                   "QuickGui/LEDoff.ico",
                   "QuickGui/LEDoff2.ico",
                   "QuickGui/LEDred2.ico",
                   "QuickGui/logo.png",
                   "Fitter/fitutils.pyd",
                   "Fitter/cluster_analyzer.pyd",
                   "Utilities/SupervisorLauncher/Check.png",
                   "Utilities/SupervisorLauncher/alarm.png",
                   "Utilities/SupervisorLauncher/Cancel.ico",
                   "Utilities/SupervisorLauncher/Controller_icon.ico",
                   "Utilities/SupervisorLauncher/Diagnostics_icon.ico",
                   "Utilities/SupervisorLauncher/EnviroSense.ico",
                   "Utilities/SupervisorLauncher/Integration_icon.ico",
                   "Utilities/SupervisorLauncher/Picarro_icon.ico",
                   "Utilities/SupervisorLauncher/Utilities_icon.ico",
                   "PeriphIntrf/Serial2Socket.exe"]),
            (r'mpl-data', glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\*.*' % pyDirname)),
            # Because matplotlibrc does not have an extension, glob does not find it (at least I think that's why)
            # So add it manually here:
            (r'mpl-data', [r'C:\%s\Lib\site-packages\matplotlib\mpl-data\matplotlibrc' % pyDirname]),
            (r'mpl-data\images',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\images\*.*' % pyDirname)),
            (r'mpl-data\fonts',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\fonts\*.*' % pyDirname)),
            ("Images", hex_images),
            ("static", glob.glob(r'Utilities\BackpackServer\static\*.*')),
            ("templates", glob.glob(r'Utilities\BackpackServer\templates\*.*'))
            ]
for d in cypressDriverDirs:
    data_files.append(("Images/%s"%d, glob.glob("../Firmware/CypressUSB/Drivers/" + "%s/*.*" %d)))

if osType == "winxp":
    data_files.append("../Vendor/inpout/winxp/inpout32.dll")
elif osType == "win7":
    data_files.append("../Vendor/inpout/win7/Win32/inpout32.dll")
else:
    print "Failed to include inpout32.dll in build, OS is not supported! (osType='%s')" % osType
    sys.exit(1)</t>
<t tx="stan@picarro-com.20150529231126.1">def _getOsType():
    osType = platform.uname()[2]

    if osType == '7':
        osType = 'win7'
    elif osType == 'XP':
        osType = 'winxp'
    else:
        osType = 'unknown'
        print "Unexpected OS type!"

    return osType


</t>
<t tx="stan@picarro-com.20150531164144.1">A problem arises when an import is made from a file in the same directory. Suppose that in the directory App1 we have the following files.

**&lt;mod1.py&gt;**
VERSION = "1.2.3"

**&lt;main.py&gt;**
import mod1

print mod1.VERSION

Then if we run main.py, it will correctly find mod1 and import the module. However, if we use py2exe and turn App1/main.py into main.exe, this will not be able to import mod1, since mod1 is not on the python path during the compilation. This is why we have in the past had to append App1 to the python path in setup.py.
i
It is preferable to change main.py so that it makes an absolute import of the form

import App1.mod1 as mod1

and to ensure that there is an __init.py__ in the folder.

This problem will arise especially with GUI applications using wxGlade where the autogenerated Python GUI file is imported and subclassed, unless the absolute path to this GUI file is specified.

We need to write a utility that finds all imports of files in the local directory. These may be of the form

import mod1 -&gt; import App1.mod1 as mod1
from mod1.xxx.yyy import zzz -&gt; from App1.mod1.xxx.yyy import zzz




</t>
<t tx="stan@picarro-com.20150531172203.1">import glob
import os
import re

re1 = re.compile("(import\s+((\w*)(\.\w*)*)(\s+(as\s+\w*))?)")
re2 = re.compile("(from\s+((\w*)(\.\w*)*))\s+import\s+(.*)")
re3 = re.compile("(\s*import\s+)((\w*)(\s*,\s*(\w*))+)")
def analyze_local(filename, mod_names, pkg_path):
    init = True
    dir_name = os.path.dirname(filename)
    with file(filename,"r") as fp:
        for ln, line in enumerate(fp):
            match1 = re1.search(line)
            match2 = re2.search(line)
            match3 = re3.match(line)
            if match3:
                if init:
                    print filename
                    init = False
                print "  %4d: %s" % (ln+1, line.rstrip())
                for mod in match3.group(2).split(','):
                    print "  %4d: %s%s" % (ln+1, match3.group(1), mod.strip())
            if match2:
                if match2.group(3) in mod_names:
                    if init:
                        print filename
                        init = False
                    print "  %4d: %s" % (ln+1, line.rstrip())
                    new_line = line.replace(match2.group(1), match2.group(1).replace(match2.group(2),pkg_path + "." + match2.group(2)))
                    print "  %4d: %s" % (ln+1, new_line.rstrip())
            elif match1:
                if match1.group(3) in mod_names:
                    if init:
                        print filename
                        init = False
                    print "  %4d: %s" % (ln+1, line.rstrip())
                    if match1.group(6): # as clause present
                        new_line = line.replace(match1.group(1), match1.group(1).replace(match1.group(2),pkg_path + "." + match1.group(2)))
                    else: 
                        new_line = line.replace(match1.group(1), match1.group(1).replace(match1.group(2),pkg_path + "." + match1.group(2)) 
                                                + " as " + match1.group(2))
                    print "  %4d: %s" % (ln+1, new_line.rstrip())

if __name__ == "__main__":
    for root, dirs,files in os.walk(r'src\Host'):
        py_files = glob.glob(os.path.join(root,"*.py"))
        mod_names = [os.path.split(fname)[-1][:-3] for fname in py_files]
        pkg_path = ".".join(root.split(os.path.sep)[1:])
        for name in files:
            if name.endswith('py'):
                py_file = os.path.join(root, name)
                analyze_local(py_file, mod_names, pkg_path)</t>
<t tx="sze.20150327093644.2"></t>
<t tx="sze.20150327094108.1"></t>
<t tx="sze.20150327114556.1"></t>
<t tx="sze.20150327114600.1"></t>
<t tx="sze.20150327114611.1"></t>
<t tx="sze.20150327114631.1"></t>
<t tx="sze.20150327114641.1"></t>
<t tx="sze.20150327114754.1"></t>
<t tx="sze.20150327114803.1"></t>
<t tx="sze.20150327125452.1"></t>
<t tx="sze.20150327125530.1"></t>
<t tx="sze.20150327125622.1"></t>
<t tx="sze.20150327125631.1"></t>
<t tx="sze.20150327144536.1"></t>
<t tx="sze.20150327144553.1"></t>
<t tx="sze.20150327144638.1"></t>
<t tx="sze.20150327144644.1"></t>
<t tx="sze.20150327144651.1"></t>
<t tx="sze.20150327144708.1"></t>
<t tx="sze.20150327144713.1"></t>
<t tx="sze.20150327144717.1"></t>
<t tx="sze.20150327145041.1"></t>
<t tx="sze.20150327145048.1"></t>
<t tx="sze.20150527173055.1"></t>
<t tx="sze.20150527173110.1"></t>
<t tx="sze.20150527173116.1"></t>
<t tx="sze.20150527173120.1"></t>
<t tx="sze.20150527173123.1"></t>
<t tx="sze.20150527173129.1"></t>
<t tx="sze.20150527173131.1"></t>
<t tx="sze.20150527173138.1"></t>
<t tx="sze.20150527173143.1"></t>
<t tx="sze.20150527173151.1"></t>
<t tx="sze.20150527173209.1"></t>
<t tx="sze.20150527173213.1"></t>
<t tx="sze.20150527173218.1"></t>
<t tx="sze.20150527173225.1"></t>
<t tx="sze.20150527173250.1"></t>
<t tx="sze.20150527173256.1"></t>
<t tx="sze.20150527173259.1"></t>
<t tx="sze.20150527173303.1"></t>
<t tx="sze.20150527173311.1"></t>
<t tx="sze.20150527173317.1"></t>
<t tx="sze.20150527173324.1"></t>
<t tx="sze.20150527173331.1"></t>
<t tx="sze.20150527173335.1"></t>
<t tx="sze.20150527173340.1"></t>
<t tx="sze.20150527173344.1"></t>
<t tx="sze.20150527173353.1"></t>
<t tx="sze.20150527173400.1"></t>
<t tx="sze.20150527173405.1"></t>
<t tx="sze.20150527173408.1"></t>
<t tx="sze.20150527173416.1"></t>
<t tx="sze.20150527173426.1"></t>
<t tx="sze.20150527173430.1"></t>
<t tx="sze.20150527173445.1"></t>
<t tx="sze.20150527173447.1"></t>
<t tx="sze.20150527173454.1"></t>
<t tx="sze.20150527173500.1"></t>
<t tx="sze.20150527173505.1"></t>
<t tx="sze.20150527173505.2"></t>
<t tx="sze.20150527173510.1"></t>
<t tx="sze.20150527173518.1"></t>
<t tx="sze.20150527173532.1"></t>
<t tx="sze.20150527173540.1"></t>
<t tx="sze.20150527173546.1"></t>
<t tx="sze.20150527173552.1"></t>
<t tx="sze.20150527173559.1"></t>
<t tx="sze.20150527173603.1"></t>
<t tx="sze.20150527173613.1"></t>
<t tx="sze.20150527173620.1"></t>
<t tx="sze.20150527173629.1"></t>
<t tx="sze.20150527173640.1"></t>
<t tx="sze.20150527173646.1"></t>
<t tx="sze.20150527173653.1"></t>
<t tx="sze.20150527173704.1"></t>
<t tx="sze.20150527173710.1"></t>
<t tx="sze.20150527173728.1"></t>
<t tx="sze.20150527173732.1"></t>
<t tx="sze.20150527173739.1"></t>
<t tx="sze.20150527173753.1"></t>
<t tx="sze.20150527173805.1"></t>
<t tx="sze.20150527174330.1"></t>
<t tx="sze.20150527174340.1"></t>
<t tx="sze.20150527174346.1"></t>
<t tx="sze.20150527174351.1"></t>
<t tx="sze.20150527174354.1"></t>
<t tx="sze.20150527174359.1"></t>
<t tx="sze.20150527174404.1"></t>
<t tx="sze.20150527174409.1"></t>
<t tx="sze.20150527174415.1"></t>
<t tx="sze.20150527174419.1"></t>
<t tx="sze.20150527174434.1"></t>
<t tx="sze.20150527174443.1"></t>
<t tx="sze.20150527174450.1"></t>
<t tx="sze.20150527174602.1"></t>
<t tx="sze.20150527174606.1"></t>
<t tx="sze.20150527174610.1"></t>
<t tx="sze.20150527174620.1"></t>
<t tx="sze.20150527174631.1"></t>
<t tx="sze.20150527174709.1"></t>
<t tx="sze.20150527174714.1"></t>
<t tx="sze.20150527174718.1"></t>
<t tx="sze.20150527174722.1"></t>
<t tx="sze.20150527174725.1"></t>
<t tx="sze.20150527174805.1"></t>
<t tx="sze.20150527174813.1"></t>
<t tx="sze.20150527174817.1"></t>
<t tx="sze.20150527174820.1"></t>
<t tx="sze.20150527174824.1"></t>
<t tx="sze.20150527174828.1"></t>
<t tx="sze.20150527174900.1"></t>
<t tx="sze.20150527174924.1"></t>
<t tx="sze.20150527174931.1"></t>
<t tx="sze.20150527174947.1"></t>
<t tx="sze.20150527174957.1"></t>
<t tx="sze.20150527175001.1"></t>
<t tx="sze.20150527175008.1"></t>
<t tx="sze.20150527175016.1"></t>
<t tx="sze.20150527175022.1"></t>
<t tx="sze.20150527175028.1"></t>
<t tx="sze.20150527175033.1"></t>
<t tx="sze.20150527175038.1"></t>
<t tx="sze.20150527175043.1"></t>
<t tx="sze.20150527175049.1"></t>
<t tx="sze.20150527175052.1"></t>
<t tx="sze.20150527175056.1"></t>
<t tx="sze.20150527175104.1"></t>
<t tx="sze.20150527175358.1">Want to be able to have manufacturing fire off a build for a specified analyzer type. This should get the latest 

1) host code
2) firmware (DSP, FPGA, USB)
3) configuration files

Each must be identified in such a way that we can reconstruct the installer from the overall version string.
We could update/maintain a table which specifies for each type of analyzer, which versions are may be used to make the installer.
We want an automated way of checking during build time if a set of code will run successfully on the hardware.


</t>
<t tx="sze.20150527185824.1"></t>
<t tx="sze.20150528150419.1">The following produces exe files which execute correctly, even though the Python path is not set up to point to the individual directories

</t>
<t tx="sze.20150528151615.1">@language python
from distutils.core import setup
import py2exe

consoleList = [
    "App1/app1.py",
    "App2/app2.py"
]

setup(version = "0.0.1",
      description = "Sample applications",
      name = "Application Pair",
      options = dict(py2exe = dict(compressed = 1,
                                   optimize = 1)),
      # targets to build...
      console = consoleList,
      zipfile = "lib/share"
)
</t>
<t tx="sze.20150528151713.1">if __name__ == "__main__":
    print "Hello from app2"
</t>
<t tx="sze.20150528151728.1">if __name__ == "__main__":
    print "This is app1"</t>
</tnodes>
</leo_file>
