-- File: main.vhd
-- Generated by MyHDL 0.6
-- Date: Mon May 11 17:14:10 2009


package pck_main is

    type t_enum_t_State_1 is (
    INIT,
    WRITE1,
    WRITE2,
    READ1,
    READ2,
    IDLE
);

end package pck_main;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_06.all;

use work.pck_main.all;

entity main is
    port (
        clk0: in std_logic;
        clk180: in std_logic;
        clk3f: in std_logic;
        clk3f180: in std_logic;
        clk_locked: in std_logic;
        reset: in std_logic;
        intronix: out unsigned(33 downto 0);
        fpga_led: out unsigned(3 downto 0);
        dsp_emif_we: in std_logic;
        dsp_emif_re: in std_logic;
        dsp_emif_oe: in std_logic;
        dsp_emif_ardy: out std_logic;
        dsp_emif_ea: in unsigned(19 downto 0);
        dsp_emif_din: out unsigned(31 downto 0);
        dsp_emif_dout: in unsigned(31 downto 0);
        dsp_emif_ddir: out std_logic;
        dsp_emif_be: in unsigned(3 downto 0);
        dsp_emif_ce: in unsigned(3 downto 0);
        dsp_eclk: in std_logic;
        lsr1_0: out std_logic;
        lsr1_1: out std_logic;
        lsr2_0: out std_logic;
        lsr2_1: out std_logic;
        lsr3_0: out std_logic;
        lsr3_1: out std_logic;
        lsr4_0: out std_logic;
        lsr4_1: out std_logic;
        i2c_rst0: out std_logic;
        i2c_rst1: out std_logic;
        i2c_scl0: in std_logic;
        i2c_sda0: in std_logic;
        i2c_scl1: in std_logic;
        i2c_sda1: in std_logic;
        rd_adc: in unsigned(15 downto 0);
        rd_adc_clk: out std_logic;
        rd_adc_oe: out std_logic;
        monitor: out std_logic
    );
end entity main;

architecture MyHDL of main is

signal dsp_data_in_laser2_pwm: unsigned(31 downto 0);
signal dsp_wr: std_logic;
signal ce2: std_logic;
signal dsp_addr: unsigned(19 downto 0);
signal laser2_pwm_out: std_logic;
signal laser1_pwm_inv_out: std_logic;
signal dsp_data_in_laser3_pwm: unsigned(31 downto 0);
signal dsp_data_in: unsigned(31 downto 0);
signal laser3_pwm_inv_out: std_logic;
signal dsp_data_out: unsigned(31 downto 0);
signal dsp_data_in_laser1_pwm: unsigned(31 downto 0);
signal laser2_pwm_inv_out: std_logic;
signal laser3_pwm_out: std_logic;
signal laser4_pwm_inv_out: std_logic;
signal dsp_data_in_laser4_pwm: unsigned(31 downto 0);
signal laser4_pwm_out: std_logic;
signal laser1_pwm_out: std_logic;
signal counter: unsigned(27 downto 0);
signal laser4_pwm_temp: unsigned(8 downto 0);
signal laser4_pwm_pulse_width: unsigned(15 downto 0);
signal laser4_pwm_cs: unsigned(15 downto 0);
signal laser4_pwm_dither_cntr: unsigned(7 downto 0);
signal laser4_pwm_pwm: std_logic;
signal laser4_pwm_main_cntr: unsigned(7 downto 0);
signal laser3_pwm_temp: unsigned(8 downto 0);
signal laser3_pwm_pulse_width: unsigned(15 downto 0);
signal laser3_pwm_cs: unsigned(15 downto 0);
signal laser3_pwm_dither_cntr: unsigned(7 downto 0);
signal laser3_pwm_pwm: std_logic;
signal laser3_pwm_main_cntr: unsigned(7 downto 0);
signal laser2_pwm_temp: unsigned(8 downto 0);
signal laser2_pwm_pulse_width: unsigned(15 downto 0);
signal laser2_pwm_cs: unsigned(15 downto 0);
signal laser2_pwm_dither_cntr: unsigned(7 downto 0);
signal laser2_pwm_pwm: std_logic;
signal laser2_pwm_main_cntr: unsigned(7 downto 0);
signal laser1_pwm_temp: unsigned(8 downto 0);
signal laser1_pwm_pulse_width: unsigned(15 downto 0);
signal laser1_pwm_cs: unsigned(15 downto 0);
signal laser1_pwm_dither_cntr: unsigned(7 downto 0);
signal laser1_pwm_pwm: std_logic;
signal laser1_pwm_main_cntr: unsigned(7 downto 0);
signal dsp_interface_done_wr_d: std_logic;
signal dsp_interface_done_wr: std_logic;
signal dsp_interface_done_rd_d: std_logic;
signal dsp_interface_ce_h: std_logic;
signal dsp_interface_done_rd: std_logic;
signal dsp_interface_we_h: std_logic;
signal dsp_interface_re_h: std_logic;

begin


MAIN_LOGIC: process (clk0, reset) is
begin
    if to_boolean(reset) then
        counter <= "0000000000000000000000000000";
    elsif rising_edge(clk0) then
        counter <= (counter + 1);
    end if;
end process MAIN_LOGIC;


laser3_pwm_out <= laser3_pwm_pwm;
laser3_pwm_inv_out <= (laser3_pwm_pwm xor laser3_pwm_cs(1));
laser3_pwm_temp <= (resize(laser3_pwm_dither_cntr, 9) + laser3_pwm_pulse_width(8-1 downto 0));

MAIN_LASER3_PWM_LOGIC: process (clk0, reset) is
begin
    if to_boolean(reset) then
        laser3_pwm_cs <= "0000000000000000";
        laser3_pwm_pulse_width <= "0000000000000000";
        laser3_pwm_main_cntr <= "00000000";
        laser3_pwm_dither_cntr <= "00000000";
    elsif rising_edge(clk0) then
        if (dsp_addr((20 - 1)) = '1') then
            if False then
                null;
            elsif (dsp_addr((20 - 1)-1 downto 0) = 5) then
                if to_boolean(dsp_wr) then
                    laser3_pwm_cs <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser3_pwm <= resize(laser3_pwm_cs, 32);
            elsif (dsp_addr((20 - 1)-1 downto 0) = 6) then
                if to_boolean(dsp_wr) then
                    laser3_pwm_pulse_width <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser3_pwm <= resize(laser3_pwm_pulse_width, 32);
            else
                dsp_data_in_laser3_pwm <= "00000000000000000000000000000000";
            end if;
        else
            dsp_data_in_laser3_pwm <= "00000000000000000000000000000000";
        end if;
        if to_boolean(laser3_pwm_cs(0)) then
            if (not to_boolean(laser3_pwm_cs(1))) then
                laser3_pwm_cs(0) <= '0';
            end if;
            laser3_pwm_pwm <= '0';
            if (laser3_pwm_main_cntr < laser3_pwm_pulse_width(16-1 downto (16 - 8))) then
                laser3_pwm_pwm <= '1';
            elsif (laser3_pwm_main_cntr = laser3_pwm_pulse_width(16-1 downto 8)) then
                if (laser3_pwm_temp >= 256) then
                    laser3_pwm_pwm <= '1';
                    laser3_pwm_cs(2) <= '1';
                    laser3_pwm_dither_cntr <= resize(laser3_pwm_temp - 256, 8);
                else
                    laser3_pwm_dither_cntr <= resize(laser3_pwm_temp, 8);
                end if;
            end if;
            laser3_pwm_main_cntr <= ((laser3_pwm_main_cntr + 1) mod 256);
        end if;
        laser3_pwm_cs(2) <= laser3_pwm_pwm;
    end if;
end process MAIN_LASER3_PWM_LOGIC;

MAIN_DSP_INTERFACE_LOGIC: process (clk0, reset) is
    variable dsp_addr_v: unsigned(19 downto 0);
    variable done_rd_v: std_logic;
    variable dsp_wr_v: std_logic;
    variable dsp_data_out_v: unsigned(31 downto 0);
    variable done_wr_v: std_logic;
    variable state_v: t_enum_t_State_1;
begin
    if to_boolean(reset) then
        dsp_addr_v := "00000000000000000000";
        dsp_data_out_v := "00000000000000000000000000000000";
        dsp_wr_v := '0';
        done_rd_v := '0';
        done_wr_v := '0';
        state_v := INIT;
    elsif rising_edge(clk0) then
        dsp_wr_v := '0';
        case state_v is
            when INIT =>
                done_rd_v := '0';
                done_wr_v := '0';
                if to_boolean(dsp_interface_ce_h) then
                    dsp_addr_v := dsp_emif_ea;
                    if to_boolean(dsp_interface_re_h) then
                        state_v := READ1;
                    elsif to_boolean(dsp_interface_we_h) then
                        state_v := WRITE1;
                    end if;
                end if;
            when WRITE1 =>
                dsp_data_out_v := dsp_emif_dout;
                dsp_wr_v := '1';
                done_wr_v := '1';
                state_v := WRITE2;
            when WRITE2 =>
                if (not to_boolean(dsp_emif_we)) then
                    done_wr_v := '0';
                    state_v := IDLE;
                end if;
            when READ1 =>
                done_rd_v := '1';
                state_v := READ2;
            when READ2 =>
                if (not to_boolean(dsp_emif_re)) then
                    done_rd_v := '0';
                    state_v := IDLE;
                end if;
            when IDLE =>
                state_v := INIT;
        end case;
    end if;
    dsp_addr <= dsp_addr_v;
    dsp_data_out <= dsp_data_out_v;
    dsp_wr <= dsp_wr_v;
    dsp_interface_done_rd_d <= done_rd_v;
    dsp_interface_done_wr_d <= done_wr_v;
end process MAIN_DSP_INTERFACE_LOGIC;


dsp_emif_ddir <= to_std_logic(to_boolean(dsp_emif_oe) and to_boolean(ce2));
dsp_emif_ardy <= to_std_logic((not to_boolean(ce2)) or to_boolean(dsp_interface_done_rd) or to_boolean(dsp_interface_done_wr));
dsp_emif_din <= dsp_data_in;

MAIN_DSP_INTERFACE_HARDEN: process (clk0) is
begin
    if rising_edge(clk0) then
        dsp_interface_ce_h <= ce2;
        dsp_interface_we_h <= dsp_emif_we;
        dsp_interface_re_h <= dsp_emif_re;
    end if;
end process MAIN_DSP_INTERFACE_HARDEN;

MAIN_DSP_INTERFACE_MAKE_DONE_WR: process (clk0, dsp_emif_we) is
begin
    if (dsp_emif_we = '0') then
        dsp_interface_done_wr <= '0';
    elsif rising_edge(clk0) then
        dsp_interface_done_wr <= dsp_interface_done_wr_d;
    end if;
end process MAIN_DSP_INTERFACE_MAKE_DONE_WR;

MAIN_DSP_INTERFACE_MAKE_DONE_RD: process (clk0, dsp_emif_re) is
begin
    if (dsp_emif_re = '0') then
        dsp_interface_done_rd <= '0';
    elsif rising_edge(clk0) then
        dsp_interface_done_rd <= dsp_interface_done_rd_d;
    end if;
end process MAIN_DSP_INTERFACE_MAKE_DONE_RD;

MAIN_COMB: process (laser1_pwm_out, dsp_data_in_laser2_pwm, dsp_data_in_laser4_pwm, i2c_scl1, i2c_scl0, laser2_pwm_out, laser1_pwm_inv_out, dsp_emif_re, dsp_data_in_laser3_pwm, laser3_pwm_inv_out, i2c_sda1, i2c_sda0, dsp_emif_oe, dsp_emif_we, dsp_eclk, dsp_data_in_laser1_pwm, clk0, reset, laser4_pwm_inv_out, laser2_pwm_inv_out, laser4_pwm_out, counter, dsp_emif_ce, laser3_pwm_out, rd_adc) is
begin
    dsp_data_in <= (dsp_data_in_laser1_pwm or dsp_data_in_laser2_pwm or dsp_data_in_laser3_pwm or dsp_data_in_laser4_pwm);
    ce2 <= dsp_emif_ce(2);
    intronix(16) <= laser1_pwm_out;
    intronix(17) <= laser1_pwm_inv_out;
    lsr1_0 <= laser1_pwm_out;
    lsr1_1 <= laser1_pwm_inv_out;
    intronix(18) <= laser2_pwm_out;
    intronix(19) <= laser2_pwm_inv_out;
    lsr2_0 <= laser2_pwm_out;
    lsr2_1 <= laser2_pwm_inv_out;
    intronix(20) <= laser3_pwm_out;
    intronix(21) <= laser3_pwm_inv_out;
    lsr3_0 <= laser3_pwm_out;
    lsr3_1 <= laser3_pwm_inv_out;
    intronix(22) <= laser4_pwm_out;
    intronix(23) <= laser4_pwm_inv_out;
    lsr4_0 <= laser4_pwm_out;
    lsr4_1 <= laser4_pwm_inv_out;
    intronix(24) <= dsp_emif_we;
    intronix(25) <= dsp_emif_oe;
    intronix(26) <= dsp_emif_re;
    intronix(27) <= dsp_emif_ce(2);
    intronix(32) <= dsp_eclk;
    monitor <= '0';
    intronix(16-1 downto 0) <= rd_adc;
    rd_adc_clk <= counter(0);
    rd_adc_oe <= '1';
    fpga_led <= counter(28-1 downto (28 - 4));
    i2c_rst0 <= reset;
    i2c_rst1 <= reset;
    intronix(28) <= i2c_scl0;
    intronix(29) <= i2c_sda0;
    intronix(30) <= i2c_scl1;
    intronix(31) <= i2c_sda1;
    intronix(33) <= clk0;
end process MAIN_COMB;


laser1_pwm_out <= laser1_pwm_pwm;
laser1_pwm_inv_out <= (laser1_pwm_pwm xor laser1_pwm_cs(1));
laser1_pwm_temp <= (resize(laser1_pwm_dither_cntr, 9) + laser1_pwm_pulse_width(8-1 downto 0));

MAIN_LASER1_PWM_LOGIC: process (clk0, reset) is
begin
    if to_boolean(reset) then
        laser1_pwm_cs <= "0000000000000000";
        laser1_pwm_pulse_width <= "0000000000000000";
        laser1_pwm_main_cntr <= "00000000";
        laser1_pwm_dither_cntr <= "00000000";
    elsif rising_edge(clk0) then
        if (dsp_addr((20 - 1)) = '1') then
            if False then
                null;
            elsif (dsp_addr((20 - 1)-1 downto 0) = 1) then
                if to_boolean(dsp_wr) then
                    laser1_pwm_cs <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser1_pwm <= resize(laser1_pwm_cs, 32);
            elsif (dsp_addr((20 - 1)-1 downto 0) = 2) then
                if to_boolean(dsp_wr) then
                    laser1_pwm_pulse_width <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser1_pwm <= resize(laser1_pwm_pulse_width, 32);
            else
                dsp_data_in_laser1_pwm <= "00000000000000000000000000000000";
            end if;
        else
            dsp_data_in_laser1_pwm <= "00000000000000000000000000000000";
        end if;
        if to_boolean(laser1_pwm_cs(0)) then
            if (not to_boolean(laser1_pwm_cs(1))) then
                laser1_pwm_cs(0) <= '0';
            end if;
            laser1_pwm_pwm <= '0';
            if (laser1_pwm_main_cntr < laser1_pwm_pulse_width(16-1 downto (16 - 8))) then
                laser1_pwm_pwm <= '1';
            elsif (laser1_pwm_main_cntr = laser1_pwm_pulse_width(16-1 downto 8)) then
                if (laser1_pwm_temp >= 256) then
                    laser1_pwm_pwm <= '1';
                    laser1_pwm_cs(2) <= '1';
                    laser1_pwm_dither_cntr <= resize(laser1_pwm_temp - 256, 8);
                else
                    laser1_pwm_dither_cntr <= resize(laser1_pwm_temp, 8);
                end if;
            end if;
            laser1_pwm_main_cntr <= ((laser1_pwm_main_cntr + 1) mod 256);
        end if;
        laser1_pwm_cs(2) <= laser1_pwm_pwm;
    end if;
end process MAIN_LASER1_PWM_LOGIC;


laser2_pwm_out <= laser2_pwm_pwm;
laser2_pwm_inv_out <= (laser2_pwm_pwm xor laser2_pwm_cs(1));
laser2_pwm_temp <= (resize(laser2_pwm_dither_cntr, 9) + laser2_pwm_pulse_width(8-1 downto 0));

MAIN_LASER2_PWM_LOGIC: process (clk0, reset) is
begin
    if to_boolean(reset) then
        laser2_pwm_cs <= "0000000000000000";
        laser2_pwm_pulse_width <= "0000000000000000";
        laser2_pwm_main_cntr <= "00000000";
        laser2_pwm_dither_cntr <= "00000000";
    elsif rising_edge(clk0) then
        if (dsp_addr((20 - 1)) = '1') then
            if False then
                null;
            elsif (dsp_addr((20 - 1)-1 downto 0) = 3) then
                if to_boolean(dsp_wr) then
                    laser2_pwm_cs <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser2_pwm <= resize(laser2_pwm_cs, 32);
            elsif (dsp_addr((20 - 1)-1 downto 0) = 4) then
                if to_boolean(dsp_wr) then
                    laser2_pwm_pulse_width <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser2_pwm <= resize(laser2_pwm_pulse_width, 32);
            else
                dsp_data_in_laser2_pwm <= "00000000000000000000000000000000";
            end if;
        else
            dsp_data_in_laser2_pwm <= "00000000000000000000000000000000";
        end if;
        if to_boolean(laser2_pwm_cs(0)) then
            if (not to_boolean(laser2_pwm_cs(1))) then
                laser2_pwm_cs(0) <= '0';
            end if;
            laser2_pwm_pwm <= '0';
            if (laser2_pwm_main_cntr < laser2_pwm_pulse_width(16-1 downto (16 - 8))) then
                laser2_pwm_pwm <= '1';
            elsif (laser2_pwm_main_cntr = laser2_pwm_pulse_width(16-1 downto 8)) then
                if (laser2_pwm_temp >= 256) then
                    laser2_pwm_pwm <= '1';
                    laser2_pwm_cs(2) <= '1';
                    laser2_pwm_dither_cntr <= resize(laser2_pwm_temp - 256, 8);
                else
                    laser2_pwm_dither_cntr <= resize(laser2_pwm_temp, 8);
                end if;
            end if;
            laser2_pwm_main_cntr <= ((laser2_pwm_main_cntr + 1) mod 256);
        end if;
        laser2_pwm_cs(2) <= laser2_pwm_pwm;
    end if;
end process MAIN_LASER2_PWM_LOGIC;


laser4_pwm_out <= laser4_pwm_pwm;
laser4_pwm_inv_out <= (laser4_pwm_pwm xor laser4_pwm_cs(1));
laser4_pwm_temp <= (resize(laser4_pwm_dither_cntr, 9) + laser4_pwm_pulse_width(8-1 downto 0));

MAIN_LASER4_PWM_LOGIC: process (clk0, reset) is
begin
    if to_boolean(reset) then
        laser4_pwm_cs <= "0000000000000000";
        laser4_pwm_pulse_width <= "0000000000000000";
        laser4_pwm_main_cntr <= "00000000";
        laser4_pwm_dither_cntr <= "00000000";
    elsif rising_edge(clk0) then
        if (dsp_addr((20 - 1)) = '1') then
            if False then
                null;
            elsif (dsp_addr((20 - 1)-1 downto 0) = 7) then
                if to_boolean(dsp_wr) then
                    laser4_pwm_cs <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser4_pwm <= resize(laser4_pwm_cs, 32);
            elsif (dsp_addr((20 - 1)-1 downto 0) = 8) then
                if to_boolean(dsp_wr) then
                    laser4_pwm_pulse_width <= resize(dsp_data_out, 16);
                end if;
                dsp_data_in_laser4_pwm <= resize(laser4_pwm_pulse_width, 32);
            else
                dsp_data_in_laser4_pwm <= "00000000000000000000000000000000";
            end if;
        else
            dsp_data_in_laser4_pwm <= "00000000000000000000000000000000";
        end if;
        if to_boolean(laser4_pwm_cs(0)) then
            if (not to_boolean(laser4_pwm_cs(1))) then
                laser4_pwm_cs(0) <= '0';
            end if;
            laser4_pwm_pwm <= '0';
            if (laser4_pwm_main_cntr < laser4_pwm_pulse_width(16-1 downto (16 - 8))) then
                laser4_pwm_pwm <= '1';
            elsif (laser4_pwm_main_cntr = laser4_pwm_pulse_width(16-1 downto 8)) then
                if (laser4_pwm_temp >= 256) then
                    laser4_pwm_pwm <= '1';
                    laser4_pwm_cs(2) <= '1';
                    laser4_pwm_dither_cntr <= resize(laser4_pwm_temp - 256, 8);
                else
                    laser4_pwm_dither_cntr <= resize(laser4_pwm_temp, 8);
                end if;
            end if;
            laser4_pwm_main_cntr <= ((laser4_pwm_main_cntr + 1) mod 256);
        end if;
        laser4_pwm_cs(2) <= laser4_pwm_pwm;
    end if;
end process MAIN_LASER4_PWM_LOGIC;

end architecture MyHDL;
