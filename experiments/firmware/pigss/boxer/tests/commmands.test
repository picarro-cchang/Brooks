# Hey Emacs, use -*- Tcl -*- mode

# tcltest::test name description ?constraints? body result

# Note that the body of a test is not like the body of a proc...all
# scripts are evaluated in the context of the caller of test.  So we
# can define variables outside of test bodies and use them inside.

# We need to test both the upper and lower case forms of each command.

# Firmware version code
set firmware_version "1.0.9"

############################### *idn? ################################

# Query the instrument's identity

set command "*idn?"
set description "Identification query"
set ok_result "Picarro,Boxer,SN.*,$firmware_version"
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command]"
    set return_string [boxer::readline $channel]
    # Command should return four comma separated fields:
    # Manufacturer name, Model number, Serial number, Revision code
    set return_list [split $return_string ","]
    set version_code [lindex $return_list 3]
    return $return_string
} -match regexp -result $ok_result

${log}::info "Found firmware version $version_code"

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

############################### sernum ###############################

# Set the instrument's serial number. First, just make sure the
# command returns properly.

set command "sernum"
set description "Set serial number"
set ok_result 0
set serial_number 8
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $serial_number"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $serial_number"
    set return_string [boxer::readline $channel]
} -match regexp -result $ok_result

# Now make sure the serial number was set.  The test will return some
# value if we get the right serial number.  We'll match this returned
# value for the test.
tcltest::test "sernum" "Check serial number" -body {
    boxer::sendcmd $channel "*idn?"
    set return_string [boxer::readline $channel]
    # The return string should be Picarro,Boxer,SN<serial number>,<revcode>
    set return_list [split $return_string ","]
    set return_sernum "[lindex $return_list 2]"
    if {[string equal $return_sernum "SN$serial_number"]} {
	return ok
    } else {
	return $return_sernum
    }
} -result ok

# Write a new serial number
set serial_number 65000

tcltest::test "sernum" "Check new serial number" -body {
    boxer::sendcmd $channel "sernum $serial_number"
    # Read the return (should just be 0)
    set return_string [boxer::readline $channel]
    boxer::sendcmd $channel "*idn?"
    set return_string [boxer::readline $channel]
    # The return string should be Picarro,Boxer,SN<serial number>,<revcode>
    set return_list [split $return_string ","]
    set return_sernum "[lindex $return_list 2]"
    if {[string equal $return_sernum "SN$serial_number"]} {
	return ok
    } else {
	return $return_sernum
    }
} -result ok

############################## chanena ###############################

set command "chanena"
set description "Enable channels 1-8"
set ok_result 0
set manifold_channel 1
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result


set command "chanena?"
set description "Query enable status of channels 1-8"
set ok_result 1
set manifold_channel 1
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

set command "chanoff"
set description "Disable channels 1-8"
set ok_result 0
set manifold_channel 1
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $manifold_channel"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

set command "chanset"
set description "Set channel enable status"
set ok_result 0
set channel_byte 170
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $channel_byte"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $channel_byte"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

set command "chanset?"
set description "Query channel enable status"
set ok_result 170
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

############################### slotid ###############################

# Set the instrument's slot ID. First, just make sure the
# command returns properly.

set command "slotid"
set description "Set slot ID"
set ok_result 0
set slot_id 8
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $slot_id"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $slot_id"
    set return_string [boxer::readline $channel]
} -match regexp -result $ok_result

# Now make sure the serial number was set.  The test will return some
# value if we get the right serial number.  We'll match this returned
# value for the test.
set command "slotid?"
set description "Query slot ID"
set ok_result $slot_id
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

# Write a new slot ID
set slot_id 2

tcltest::test "slotid" "Check new slot ID" -body {
    boxer::sendcmd $channel "slotid $slot_id"
    # Read the return (should just be 0)
    set return_string [boxer::readline $channel]
    boxer::sendcmd $channel "slotid?"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $slot_id

############################## opstate? ##############################

set command "opstate?"
set description "Query the operational state"

# The box should be in standby state after booting.  But it may be in
# control after the channel commands issued during testing.  For right
# now, this test result should just be standby.
set ok_result "standby"

tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

############################### tza.sn ###############################

# Set the instrument's Topaz A serial number.

# First, just make sure the command returns properly.

set command "tza.sn"
set description "Set the Topaz A serial number"
set ok_result 0
set topaz_sn 10
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command] $topaz_sn"
    set return_string [boxer::readline $channel]
    # Command should return 0 on successful completion
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command] $topaz_sn"
    set return_string [boxer::readline $channel]
} -match regexp -result $ok_result

# Now make sure the serial number was set.  The test will return some
# value if we get the right serial number.  We'll match this returned
# value for the test.
set command "tza.sn?"
set description "Query the Topaz A serial number"
set ok_result $topaz_sn
tcltest::test "[string tolower $command]" "$description" -body {
    boxer::sendcmd $channel "[string tolower $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

tcltest::test "[string toupper $command]" "$description" -body {
    boxer::sendcmd $channel "[string toupper $command]"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $ok_result

# Write a new slot ID
set topaz_sn 2

tcltest::test "tza.sn" "Check setting a new Topaz A serial number" -body {
    boxer::sendcmd $channel "tza.sn $topaz_sn"
    # Read the return (should just be 0)
    set return_string [boxer::readline $channel]
    boxer::sendcmd $channel "tza.sn?"
    set return_string [boxer::readline $channel]
    return $return_string
} -match regexp -result $topaz_sn


############################ prs.in.raw? #############################

set command "prs.in.raw?"
set description "Query raw inlet pressure readings"

# We'll check the return value and compare it against a range.  Return
# 0 if things are ok.
set ok_result 0

set channel_list "1 2 3 4 5 6 7 8"
foreach inlet_channel $channel_list {
    tcltest::test "[string tolower $command] $inlet_channel" "$description" -body {
	boxer::sendcmd $channel "[string tolower $command] $inlet_channel"
	set return_string [boxer::readline $channel]
	if {$return_string > 13319000 && $return_string < 16279000} {
	    return 0
	} else {
	    return -1
	}
    } -match regexp -result $ok_result
}

############################ chx.byp.dac #############################

# This will just test the set commands.  The correct return should be 0.
set ok_result 0
set dac_setting 100

foreach inlet_channel $channel_list {
    set command "ch${inlet_channel}.byp.dac"
    set description "Set proportional valve bypass DAC for channel $inlet_channel"
    tcltest::test "[string tolower $command] $dac_setting" "$description" -body {
	boxer::sendcmd $channel "[string tolower $command] $dac_setting"
	set return_string [boxer::readline $channel]
	return $return_string
    } -match regexp -result $ok_result
}

