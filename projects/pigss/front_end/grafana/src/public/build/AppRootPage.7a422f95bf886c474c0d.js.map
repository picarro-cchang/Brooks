{"version":3,"sources":["webpack:///./public/app/features/plugins/PluginDashboards.tsx","webpack:///./public/app/features/plugins/wrappers/AppConfigWrapper.tsx","webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///./public/app/features/plugins/AppRootPage.tsx","webpack:///./public/app/features/plugins/PluginPage.tsx","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["PluginDashboards","_super","props","_this","call","this","importAll","importNext","index","dashboards","state","import","then","length","Promise","resolve","setTimeout","dash","overwrite","_a","plugin","datasource","installCmd","pluginId","id","path","inputs","push","name","type","meta","value","Object","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_3__","post","res","app_core_core__WEBPACK_IMPORTED_MODULE_4__","emit","title","lodash_extend__WEBPACK_IMPORTED_MODULE_2___default","setState","tslib__WEBPACK_IMPORTED_MODULE_0__","remove","delete","importedUri","imported","loading","prototype","componentDidMount","get","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","app_features_datasources_DashboardsTable__WEBPACK_IMPORTED_MODULE_5__","onImport","onRemove","react__WEBPACK_IMPORTED_MODULE_1__","AppConfigCtrlWrapper","preUpdateHook","postUpdateHook","update","model","updateCmd","lodash_extend__WEBPACK_IMPORTED_MODULE_3___default","enabled","pinned","jsonData","secureJsonData","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_7__","window","location","href","setPreUpdateHook","callback","setPostUpdateHook","importDashboards","_grafana_data__WEBPACK_IMPORTED_MODULE_5__","enable","disable","angularCtrl","refresh","componentDidUpdate","prevProps","element","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_2___default","app","scopeProps","ctrl","_grafana_runtime__WEBPACK_IMPORTED_MODULE_6__","load","withRightMargin","emotion__WEBPACK_IMPORTED_MODULE_8__","marginRight","ref","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","variant","onClick","PluginHelp","apply","arguments","isError","isLoading","help","loadHelp","_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__","response","helpHtml","_grafana_data__WEBPACK_IMPORTED_MODULE_2__","constructPlaceholderInfo","catch","dangerouslySetInnerHTML","__html","getAppPluginPageError","_grafana_ui__WEBPACK_IMPORTED_MODULE_7__","AppRootPage","onNavChanged","nav","_PluginPage__WEBPACK_IMPORTED_MODULE_8__","_PluginSettingsCache__WEBPACK_IMPORTED_MODULE_5__","info","error","app_core_core__WEBPACK_IMPORTED_MODULE_10__","app_core_nav_model_srv__WEBPACK_IMPORTED_MODULE_9__","_plugin_loader__WEBPACK_IMPORTED_MODULE_6__","sent","query","_b","root","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","navModel","Contents","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","routeParams","slug","getLoadingNav","node","text","icon","main","loadPlugin","_PluginSettingsCache__WEBPACK_IMPORTED_MODULE_8__","_grafana_ui__WEBPACK_IMPORTED_MODULE_6__","_plugin_loader__WEBPACK_IMPORTED_MODULE_9__","panel","reject","PAGE_ID_README","PAGE_ID_DASHBOARDS","PAGE_ID_CONFIG_CTRL","PluginPage","showUpdateInfo","app_core_core__WEBPACK_IMPORTED_MODULE_14__","src","defaultPage","$contextSrv","appSubUrl","app_core_config__WEBPACK_IMPORTED_MODULE_15__","_c","isAdmin","pages","url","angularConfigCtrl","configPages","next","done","page","lodash_find__WEBPACK_IMPORTED_MODULE_4___default","includes","dashboard","img","logos","large","subTitle","author","breadcrumbs","children","setActivePage","getPluginTabsNav","hasRole","app_core_nav_model_srv__WEBPACK_IMPORTED_MODULE_10__","prevPage","renderBody","app_core_components_AlertBox_AlertBox__WEBPACK_IMPORTED_MODULE_16__","severity","app_types__WEBPACK_IMPORTED_MODULE_5__","Error","active","find","tab","_d","body","_PluginDashboards__WEBPACK_IMPORTED_MODULE_13__","_wrappers_AppConfigWrapper__WEBPACK_IMPORTED_MODULE_12__","app_core_components_PluginHelp_PluginHelp__WEBPACK_IMPORTED_MODULE_11__","renderVersionInfo","version","hasUpdate","content","latestVersion","theme","placement","renderSidebarIncludeBody","item","toLowerCase","replace","getPluginIcon","Fragment","renderSidebarIncludes","map","include","key","renderSidebarDependencies","dependencies","grafanaVersion","plugins","plug","renderSidebarLinks","links","link","target","rel","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_7__","loadError","pageId","defaultPageId","found","selected","changed","p","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","dashboardId","importedUrl","style","textAlign","revision","importedRevision","buttonText"],"mappings":"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","file":"AppRootPage.7a422f95bf886c474c0d.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport extend from 'lodash/extend';\n\nimport { PluginMeta, DataSourceApi } from '@grafana/ui';\nimport { PluginDashboard } from 'app/types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit('alert-success', ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/' + dash.importedUri)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport extend from 'lodash/extend';\n\nimport { PluginMeta, AppPlugin, Button } from '@grafana/ui';\nimport { deprecationWarning } from '@grafana/data';\n\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { css } from 'emotion';\n\ninterface Props {\n  app: AppPlugin;\n}\n\ninterface State {\n  angularCtrl: AngularComponent;\n  refresh: number;\n}\n\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\n  element: HTMLElement; // for angular ctrl\n\n  // Needed for angular scope\n  preUpdateHook = () => Promise.resolve();\n  postUpdateHook = () => Promise.resolve();\n  model: PluginMeta;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      angularCtrl: null,\n      refresh: 0,\n    };\n  }\n\n  componentDidMount() {\n    // Force a reload after the first mount -- is there a better way to do this?\n    setTimeout(() => {\n      this.setState({ refresh: this.state.refresh + 1 });\n    }, 5);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.element || this.state.angularCtrl) {\n      return;\n    }\n\n    // Set a copy of the meta\n    this.model = cloneDeep(this.props.app.meta);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\n    const scopeProps = { ctrl: this };\n    const angularCtrl = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularCtrl });\n  }\n\n  render() {\n    const model = this.model;\n\n    const withRightMargin = css({ marginRight: '8px' });\n\n    return (\n      <div>\n        <div ref={element => (this.element = element)} />\n        <br />\n        <br />\n        {model && (\n          <div className=\"gf-form\">\n            {!model.enabled && (\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\n                Enable\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\n                Update\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"danger\" onClick={this.disable} className={withRightMargin}>\n                Disable\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  //-----------------------------------------------------------\n  // Copied from plugin_edit_ctrl\n  //-----------------------------------------------------------\n\n  update = () => {\n    const pluginId = this.model.id;\n\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  };\n\n  setPreUpdateHook = (callback: () => any) => {\n    this.preUpdateHook = callback;\n  };\n\n  setPostUpdateHook = (callback: () => any) => {\n    this.postUpdateHook = callback;\n  };\n\n  // Stub to avoid unknown function in legacy code\n  importDashboards = (): Promise<void> => {\n    deprecationWarning('AppConfig', 'importDashboards()');\n    return Promise.resolve();\n  };\n\n  enable = () => {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  };\n\n  disable = () => {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface Props {\n  plugin: {\n    name: string;\n    id: string;\n  };\n  type: string;\n}\n\ninterface State {\n  isError: boolean;\n  isLoading: boolean;\n  help: string;\n}\n\nexport class PluginHelp extends PureComponent<Props, State> {\n  state = {\n    isError: false,\n    isLoading: false,\n    help: '',\n  };\n\n  componentDidMount(): void {\n    this.loadHelp();\n  }\n\n  constructPlaceholderInfo() {\n    return 'No plugin help or readme markdown file was found';\n  }\n\n  loadHelp = () => {\n    const { plugin, type } = this.props;\n    this.setState({ isLoading: true });\n\n    getBackendSrv()\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n      .then((response: string) => {\n        const helpHtml = renderMarkdown(response);\n\n        if (response === '' && type === 'help') {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: this.constructPlaceholderInfo(),\n          });\n        } else {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: helpHtml,\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          isError: true,\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { type } = this.props;\n    const { isError, isLoading, help } = this.state;\n\n    if (isLoading) {\n      return <h2>Loading help...</h2>;\n    }\n\n    if (isError) {\n      return <h3>'Error occurred when loading help'</h3>;\n    }\n\n    if (type === 'panel_help' && help === '') {\n    }\n\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n  }\n}\n","// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { UrlQueryMap } from '@grafana/runtime';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin } from './plugin_loader';\nimport { AppPlugin, AppPluginMeta, PluginType } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getLoadingNav } from './PluginPage';\nimport { getNotFoundNav, getWarningNav } from 'app/core/nav_model_srv';\nimport { appEvents } from 'app/core/core';\n\ninterface Props {\n  pluginId: string; // From the angular router\n  query: UrlQueryMap;\n  path: string;\n  slug?: string;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: AppPlugin;\n  nav: NavModel;\n}\n\nexport function getAppPluginPageError(meta: AppPluginMeta) {\n  if (!meta) {\n    return 'Unknown Plugin';\n  }\n  if (meta.type !== PluginType.app) {\n    return 'Plugin must be an app';\n  }\n  if (!meta.enabled) {\n    return 'Application Not Enabled';\n  }\n  return null;\n}\n\nclass AppRootPage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId } = this.props;\n\n    try {\n      const app = await getPluginSettings(pluginId).then(info => {\n        const error = getAppPluginPageError(info);\n        if (error) {\n          appEvents.emit('alert-error', [error]);\n          this.setState({ nav: getWarningNav(error) });\n          return null;\n        }\n        return importAppPlugin(info);\n      });\n      this.setState({ plugin: app, loading: false });\n    } catch (err) {\n      this.setState({ plugin: null, loading: false, nav: getNotFoundNav() });\n    }\n  }\n\n  onNavChanged = (nav: NavModel) => {\n    this.setState({ nav });\n  };\n\n  render() {\n    const { path, query } = this.props;\n    const { loading, plugin, nav } = this.state;\n\n    if (plugin && !plugin.root) {\n      // TODO? redirect to plugin page?\n      return <div>No Root App</div>;\n    }\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && plugin && (\n            <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  slug: state.location.routeParams.slug,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(AppRootPage));\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport find from 'lodash/find';\n\n// Types\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { StoreState, AppNotificationSeverity } from 'app/types';\nimport {\n  PluginType,\n  GrafanaPlugin,\n  PluginInclude,\n  PluginDependencies,\n  PluginMeta,\n  PluginMetaInfo,\n  Tooltip,\n  AppPlugin,\n  PluginIncludeType,\n} from '@grafana/ui';\nimport { NavModel, NavModelItem } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin, importDataSourcePlugin, importPanelPlugin } from './plugin_loader';\nimport { getNotFoundNav } from 'app/core/nav_model_srv';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { AppConfigCtrlWrapper } from './wrappers/AppConfigWrapper';\nimport { PluginDashboards } from './PluginDashboards';\nimport { appEvents } from 'app/core/core';\nimport { config } from 'app/core/config';\nimport { ContextSrv } from '../../core/services/context_srv';\nimport { AlertBox } from 'app/core/components/AlertBox/AlertBox';\n\nexport function getLoadingNav(): NavModel {\n  const node = {\n    text: 'Loading...',\n    icon: 'icon-gf icon-gf-panel',\n  };\n  return {\n    node: node,\n    main: node,\n  };\n}\n\nfunction loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\n  return getPluginSettings(pluginId).then(info => {\n    if (info.type === PluginType.app) {\n      return importAppPlugin(info);\n    }\n    if (info.type === PluginType.datasource) {\n      return importDataSourcePlugin(info);\n    }\n    if (info.type === PluginType.panel) {\n      return importPanelPlugin(pluginId).then(plugin => {\n        // Panel Meta does not have the *full* settings meta\n        return getPluginSettings(pluginId).then(meta => {\n          plugin.meta = {\n            ...meta, // Set any fields that do not exist\n            ...plugin.meta,\n          };\n          return plugin;\n        });\n      });\n    }\n    return Promise.reject('Unknown Plugin type: ' + info.type);\n  });\n}\n\ninterface Props {\n  pluginId: string;\n  query: UrlQueryMap;\n  path: string; // the URL path\n  $contextSrv: ContextSrv;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: GrafanaPlugin;\n  nav: NavModel;\n  defaultPage: string; // The first configured one or readme\n}\n\nconst PAGE_ID_README = 'readme';\nconst PAGE_ID_DASHBOARDS = 'dashboards';\nconst PAGE_ID_CONFIG_CTRL = 'config';\n\nclass PluginPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n      defaultPage: PAGE_ID_README,\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId, path, query, $contextSrv } = this.props;\n    const { appSubUrl } = config;\n\n    const plugin = await loadPlugin(pluginId);\n    if (!plugin) {\n      this.setState({\n        loading: false,\n        nav: getNotFoundNav(),\n      });\n      return; // 404\n    }\n\n    const { defaultPage, nav } = getPluginTabsNav(plugin, appSubUrl, path, query, $contextSrv.hasRole('Admin'));\n\n    this.setState({\n      loading: false,\n      plugin,\n      defaultPage,\n      nav,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevPage = prevProps.query.page as string;\n    const page = this.props.query.page as string;\n    if (prevPage !== page) {\n      const { nav, defaultPage } = this.state;\n      const node = {\n        ...nav.node,\n        children: setActivePage(page, nav.node.children, defaultPage),\n      };\n      this.setState({\n        nav: {\n          node: node,\n          main: node,\n        },\n      });\n    }\n  }\n\n  renderBody() {\n    const { query } = this.props;\n    const { plugin, nav } = this.state;\n\n    if (!plugin) {\n      return <AlertBox severity={AppNotificationSeverity.Error} title=\"Plugin Not Found\" />;\n    }\n\n    const active = nav.main.children.find(tab => tab.active);\n    if (active) {\n      // Find the current config tab\n      if (plugin.configPages) {\n        for (const tab of plugin.configPages) {\n          if (tab.id === active.id) {\n            return <tab.body plugin={plugin} query={query} />;\n          }\n        }\n      }\n\n      // Apps have some special behavior\n      if (plugin.meta.type === PluginType.app) {\n        if (active.id === PAGE_ID_DASHBOARDS) {\n          return <PluginDashboards plugin={plugin.meta} />;\n        }\n\n        if (active.id === PAGE_ID_CONFIG_CTRL && plugin.angularConfigCtrl) {\n          return <AppConfigCtrlWrapper app={plugin as AppPlugin} />;\n        }\n      }\n    }\n\n    return <PluginHelp plugin={plugin.meta} type=\"help\" />;\n  }\n\n  showUpdateInfo = () => {\n    appEvents.emit('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      model: this.state.plugin.meta,\n    });\n  };\n\n  renderVersionInfo(meta: PluginMeta) {\n    if (!meta.info.version) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Version</h4>\n        <span>{meta.info.version}</span>\n        {meta.hasUpdate && (\n          <div>\n            <Tooltip content={meta.latestVersion} theme=\"info\" placement=\"top\">\n              <a href=\"#\" onClick={this.showUpdateInfo}>\n                Update Available!\n              </a>\n            </Tooltip>\n          </div>\n        )}\n      </section>\n    );\n  }\n\n  renderSidebarIncludeBody(item: PluginInclude) {\n    if (item.type === PluginIncludeType.page) {\n      const pluginId = this.state.plugin.meta.id;\n      const page = item.name.toLowerCase().replace(' ', '-');\n      return (\n        <a href={`plugins/${pluginId}/page/${page}`}>\n          <i className={getPluginIcon(item.type)} />\n          {item.name}\n        </a>\n      );\n    }\n    return (\n      <>\n        <i className={getPluginIcon(item.type)} />\n        {item.name}\n      </>\n    );\n  }\n\n  renderSidebarIncludes(includes: PluginInclude[]) {\n    if (!includes || !includes.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Includes</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          {includes.map(include => {\n            return (\n              <li className=\"plugin-info-list-item\" key={include.name}>\n                {this.renderSidebarIncludeBody(include)}\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarDependencies(dependencies: PluginDependencies) {\n    if (!dependencies) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Dependencies</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          <li className=\"plugin-info-list-item\">\n            <img src=\"public/img/grafana_icon.svg\" />\n            Grafana {dependencies.grafanaVersion}\n          </li>\n          {dependencies.plugins &&\n            dependencies.plugins.map(plug => {\n              return (\n                <li className=\"plugin-info-list-item\" key={plug.name}>\n                  <i className={getPluginIcon(plug.type)} />\n                  {plug.name} {plug.version}\n                </li>\n              );\n            })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarLinks(info: PluginMetaInfo) {\n    if (!info.links || !info.links.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Links</h4>\n        <ul className=\"ui-list\">\n          {info.links.map(link => {\n            return (\n              <li key={link.url}>\n                <a href={link.url} className=\"external-link\" target=\"_blank\" rel=\"noopener\">\n                  {link.name}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  render() {\n    const { loading, nav, plugin } = this.state;\n    const { $contextSrv } = this.props;\n    const isAdmin = $contextSrv.hasRole('Admin');\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && (\n            <div className=\"sidebar-container\">\n              <div className=\"sidebar-content\">\n                {plugin.loadError && (\n                  <AlertBox\n                    severity={AppNotificationSeverity.Error}\n                    title=\"Error Loading Plugin\"\n                    body={\n                      <>\n                        Check the server startup logs for more information. <br />\n                        If this plugin was loaded from git, make sure it was compiled.\n                      </>\n                    }\n                  />\n                )}\n                {this.renderBody()}\n              </div>\n              <aside className=\"page-sidebar\">\n                {plugin && (\n                  <section className=\"page-sidebar-section\">\n                    {this.renderVersionInfo(plugin.meta)}\n                    {isAdmin && this.renderSidebarIncludes(plugin.meta.includes)}\n                    {this.renderSidebarDependencies(plugin.meta.dependencies)}\n                    {this.renderSidebarLinks(plugin.meta.info)}\n                  </section>\n                )}\n              </aside>\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction getPluginTabsNav(\n  plugin: GrafanaPlugin,\n  appSubUrl: string,\n  path: string,\n  query: UrlQueryMap,\n  isAdmin: boolean\n): { defaultPage: string; nav: NavModel } {\n  const { meta } = plugin;\n  let defaultPage: string;\n  const pages: NavModelItem[] = [];\n\n  if (true) {\n    pages.push({\n      text: 'Readme',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: `${appSubUrl}${path}?page=${PAGE_ID_README}`,\n      id: PAGE_ID_README,\n    });\n  }\n\n  // We allow non admins to see plugins but only their readme. Config is hidden even though the API needs to be\n  // public for plugins to work properly.\n  if (isAdmin) {\n    // Only show Config/Pages for app\n    if (meta.type === PluginType.app) {\n      // Legacy App Config\n      if (plugin.angularConfigCtrl) {\n        pages.push({\n          text: 'Config',\n          icon: 'gicon gicon-cog',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_CONFIG_CTRL}`,\n          id: PAGE_ID_CONFIG_CTRL,\n        });\n        defaultPage = PAGE_ID_CONFIG_CTRL;\n      }\n\n      if (plugin.configPages) {\n        for (const page of plugin.configPages) {\n          pages.push({\n            text: page.title,\n            icon: page.icon,\n            url: path + '?page=' + page.id,\n            id: page.id,\n          });\n          if (!defaultPage) {\n            defaultPage = page.id;\n          }\n        }\n      }\n\n      // Check for the dashboard pages\n      if (find(meta.includes, { type: PluginIncludeType.dashboard })) {\n        pages.push({\n          text: 'Dashboards',\n          icon: 'gicon gicon-dashboard',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_DASHBOARDS}`,\n          id: PAGE_ID_DASHBOARDS,\n        });\n      }\n    }\n  }\n\n  if (!defaultPage) {\n    defaultPage = pages[0].id; // the first tab\n  }\n\n  const node = {\n    text: meta.name,\n    img: meta.info.logos.large,\n    subTitle: meta.info.author.name,\n    breadcrumbs: [{ title: 'Plugins', url: '/plugins' }],\n    url: `${appSubUrl}${path}`,\n    children: setActivePage(query.page as string, pages, defaultPage),\n  };\n\n  return {\n    defaultPage,\n    nav: {\n      node: node,\n      main: node,\n    },\n  };\n}\n\nfunction setActivePage(pageId: string, pages: NavModelItem[], defaultPageId: string): NavModelItem[] {\n  let found = false;\n  const selected = pageId || defaultPageId;\n  const changed = pages.map(p => {\n    const active = !found && selected === p.id;\n    if (active) {\n      found = true;\n    }\n    return { ...p, active };\n  });\n  if (!found) {\n    changed[0].active = true;\n  }\n  return changed;\n}\n\nfunction getPluginIcon(type: string) {\n  switch (type) {\n    case 'datasource':\n      return 'gicon gicon-datasources';\n    case 'panel':\n      return 'icon-gf icon-gf-panel';\n    case 'app':\n      return 'icon-gf icon-gf-apps';\n    case 'page':\n      return 'icon-gf icon-gf-endpoint-tiny';\n    case 'dashboard':\n      return 'gicon gicon-dashboard';\n    default:\n      return 'icon-gf icon-gf-apps';\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(PluginPage));\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <i className=\"gicon gicon-dashboard\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <i className=\"fa fa-trash\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}