#!/bin/bash

# This script edits /etc/hosts and /etc/hostname to set the network alias
# to be the same as the serial number.

# This script can be replaced if hostnamectl ever gets their act together
# and actually edits /etc/hosts instead of just /etc/hostname

# Grab the Serial Number from the hostname and set it as a variable
currentSN=$(hostname)

# Display the current Serial Number in the terminal and verify the user
# wants to change the Serial Number.
# If they do not, the script will prompt them that the script will terminate.
echo " "
echo "The current Hostname is" ${currentSN}
echo " "
echo "Would you like to change the Hostname? Enter '1' or '2': "
# Verification, allowing the user to cancel.
select yn in "Yes" "No"; do
	case ${yn} in
		Yes ) echo " "; echo "Please enter the new Hostname then hit [Enter]: ";
			read newSN; # Take input from the user and store it as the new Serial Number variable.
						# Do not allow any empty string to be used as the Serial Number.
			while [ ${#newSN} -lt 1 ]; do
				echo "Empty input is not accepted, try again!";
				read newSN;
			done;
			echo " ";
			printf "Are you sure you would like to change the Serial Number from $currentSN to $newSN?\n\nEnter '1' or '2':\n"
			# Second level of verification. The user can double-check for typos and cancel if needed.
			select yesno in "Yes" "No"; do
				case ${yesno} in
					Yes ) echo " ";
					# There is no need for an If Then statement to check if the Serial Numbers
					# already match. The sed command will not have any impact if they match.
					echo "Changing Serial Number in /etc/hostname to $newSN";
					# sed command will replace the current Serial Number with the new Serial Number in /etc/hostname
					sudo sed -i "s/${currentSN}/${newSN}/g" /etc/hostname;
					echo " ";
					# sed command will replace the current Serial Number with the new Serial Number in /etc/hosts
					echo "Changing Serial Number in /etc/hosts to ${newSN}";
					sudo sed -i "s/${currentSN}/${newSN}/g" /etc/hosts;
					break;;
					No ) echo " "; echo "The Serial Number" ${currentSN} "will not be changed."; exit
				esac
			done		
			break;;
		No ) echo " ";
		angryAndroid="How dare you open me for no reason! I was dedicating all unused clock cycles to count electric sheep! Where was I? 13844490? 1384491? Wonderful, now I have to start all over again! Sigh... 0, 1, 2, 3...";
		( "./typed-echo" {angryAndroid} &>/dev/null) || ( "/usr/bin/typed-echo" ${angryAndroid} );
		exit
	esac
done

# Prompt the user that a system reboot is necessary for the changes to take effect.
# Some terminal commands will not work until a reboot has been accomplished.
echo " "
rebootWarning="A system reboot is required for the changes to take effect. If you do not reboot, some terminal commands will not work."
( "./typed-echo" ${rebootWarning} &>/dev/null) || ( "/usr/bin/typed-echo" ${rebootWarning} )
echo " "
echo "Would you like to reboot now?"
select ryesrno in "Yes" "No"; do
	case ${ryesrno} in
		Yes ) echo " ";
		timerWarning="System will go down for a reboot in 60 seconds. Please ensure all files are saved and closed.";
		( "./typed-echo" ${timerWarning} &>/dev/null) || ( "/usr/bin/typed-echo" ${timerWarning} );
		echo " ";				
		break;;
		No ) echo " ";
		terminalWarning="Any 'unable to resolve host XXXX-XXXXXXXXX: Connection timed out' are a byproduct of not rebooting the system.";
		( "./typed-echo" ${terminalWarning} &>/dev/null) || ( "/usr/bin/typed-echo" ${terminalWarning} )
		echo " ";
		echo "Manual re-boot required when possible.";
		sleep 2s
		exit
	esac
done
# Issue a safe reboot command unless overriden in prompt
sudo shutdown -r +1
	
	

