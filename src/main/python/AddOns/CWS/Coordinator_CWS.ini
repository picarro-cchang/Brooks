# Coordinator for CoWS (Continuous Water Samplers) using the HIDS analyzer

[UserEditableParams]
num_disp_params = 0
0 = "inlet_Calibration_1", "Inlet for Calibration Water 1:  Select 0-4", "1"
1 = "inlet_Calibration_2", "Inlet for Calibration Water 2:  Select 0-4", "2"
2 = "inlet_Sample_1", "Inlet for Sample Source 1:  Select 0-4", "3"
3 = "inlet_Sample_2", "Inlet for Sample Source 2:  Select 0-4", "0"
4 = "duration_Calibration", "Duration for each Calibration Water in Minutes:", "20"
5 = "calibration_Mode", "Calibrate when switching between Sample Sources: Y/N", "N"
6 = "duration_Source", "Duration for each Sample Water in Minutes:", "300"
7 = "averaging_Time" , "Time Duration for Averaging and Reporting Isotope Data in Seconds", "2"
8 = "warmup_Flag" , "Warmup Delay Necessay: Y/N", "Y"
9 = "warmup_Source", "Inlet for Water Source for System Warmup (15 Minutes): Select 1-4", "1"
10 = "total_duration", "Total length of time for operation in Minutes: Select 0 for Indefinite", "0"

[Mode]
inject_mode = automatic

[Archiver]
archiveGroupName = Coordinator

[Files]
output = "c:/IsotopeData/IsoWater_CoWS"
log = "c:/IsotopeData/Log/Log_CoWS"

[Output]
line_Num                     = "Line",%8s
startLocal                   = "Time", %22s
time_Start                   = "Start_Time", %10s
time_Stop                    = "End_Time", %10s
sample_Inlet_Port            = "Inlet_Port", %10s
sample_Type                  = "Sample_Type", %12s
Delta_18_16                  = "d(18_16)",%10.3f
Delta_D_H                    = "d(D_H)",%10.3f
H2O                          = "Water_ppm", %10.3f
water_Temperature            = "Water_Temp_C", %13s
ePTFE_Temperature            = "Membrane_Temp_C", %16s
trans_Temperature            = "Transfer_Line_Temp", %19s
air_FlowRate                 = "Air_Flow_Rate_sccm", %19s
PID_loops_locked             = "PID_loops_locked", %16s
CH4                          = "Methane_ppm", %12.3f
baseline_shift               = "baseline_shift",%14.3f
baseline_curvature           = "baseline_curvature",%19.3f
slope_shift                  = "slope_shift",%12.3f
residuals                    = "residuals", %10.3f

[Setup]
initial=StateSetupCoWS
final=StateDone
error=StateError

[StateSetupCoWS]
action = """
logFunc("Searching COM ports for Continuous Water Sampler...\n")
CoWS = None
CoWSFound = False
for p in range(2,100):
    if CoWS:
        CoWS.close()
        CoWS = None
    try:
        CoWS = SerIntrf(p, timeout=250, xonxoff=0)
        sleep(3)
    except:
        continue
    try:
        logFunc("Talking to COM%d...\n"%(p+1))
        CoWS.sendString("C7")
        status = CoWS.getLine()
        print status
        if "CoWS" in status:
            logFunc("CoWS found at COM%d...\n"%(p+1))
            CoWSFound = True
            break
    except:
        pass
        

if not CoWSFound:
    logFunc("Continuous Water Sampler not found.\n")
    if CoWS:
        CoWS.close()
        CoWS = None
    GUI.popWarning("Continuous Water Sampler not found", "CoWS not found")
    raise Exception, "CoWS not found"
else:
    # Turn on Temperature Control
    CoWS.sendString("T1")

    # Turn on Air Flow Control
    CoWS.sendString("A1")
    # Turn on Water Pump
    CoWS.sendString("W1")

NEXT = "StateSetup"
"""
[StateSetup]
action = """

inlet_Calibration_1 = int(editParamDict["inlet_Calibration_1"])
inlet_Calibration_2 = int(editParamDict["inlet_Calibration_2"])
inlet_Sample_1 = int(editParamDict["inlet_Sample_1"])
inlet_Sample_2 = int(editParamDict["inlet_Sample_2"])
duration_Calibration = float(editParamDict["duration_Calibration"])*60.0
calibration_Mode = str(editParamDict["calibration_Mode"])
duration_Source = float(editParamDict["duration_Source"])*60.0
averaging_Time = float(editParamDict["averaging_Time"])
warmup_Flag = str(editParamDict["warmup_Flag"])
warmup_Source = float(editParamDict["warmup_Source"])
total_duration = float(editParamDict["total_duration"])*60.0

inlet_Port = [0,1,2,3,4]
inlet_Source = [inlet_Calibration_1,inlet_Calibration_2,inlet_Sample_1,inlet_Sample_2]
port = []
for source in inlet_Source:
    if source not in inlet_Port:
        logFunc("Inlet assignment warning...inlet port out of range.\n")
        NEXT = "StateError"
    port.append(source)

if len(port) != len(set(port)):  #needs to include the possibility of 0,0,0...
    logFunc("Inlet assignment warning...inlet ports not unique.\n")
    NEXT = "StateError"

concNameList = ["Delta_18_16", "Delta_D_H", "H2O", "CH4", "baseline_shift", "baseline_curvature", "slope_shift", "residuals"]
setMeasBuffer("analyze_iH2O7200", concNameList, 2*averaging_Time)
clearMeasBuffer()

data_Buffer = {}
data_Buffer_Int = {}
calculated_Results = {}

line_Count = 0

def calculate_Average(dataList):
    average_Value = 0.0
    len_dataList = len(dataList)
    if len_dataList > 1:
        for i in range(len_dataList):
            average_Value += float(dataList[i])
    else:
        average_Value = dataList[0]
    average_Value = average_Value / len_dataList
    return average_Value

def get_CoWS_Data():
    try:
        CoWS.sendString("C8")
        status = CoWS.getLine()
        CoWS_Status = status.split()
        
        return CoWS_Status
    except: pass

def report_Common_Data():
    calculated_Results["H2O"] = calculate_Average(data_Buffer["H2O"])
    calculated_Results["Delta_D_H"] = calculate_Average(data_Buffer["Delta_D_H"])
    calculated_Results["Delta_18_16"] = calculate_Average(data_Buffer["Delta_18_16"])
    calculated_Results["CH4"] = calculate_Average(data_Buffer["CH4"])
    calculated_Results["line_Num"] = line_Count 
    calculated_Results["time_Start"] = round(((start_Ave_Time-start_Time_from_begining)/60.0),2)
    calculated_Results["time_Stop"] = round(((stop_Time-start_Time_from_begining)/60.0),2)
    calculated_Results["startLocal"] = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(startTime))
    calculated_Results["baseline_shift"] = calculate_Average(data_Buffer["baseline_shift"])
    calculated_Results["baseline_curvature"] = calculate_Average(data_Buffer["baseline_curvature"])
    calculated_Results["slope_shift"] = calculate_Average(data_Buffer["slope_shift"])
    calculated_Results["residuals"] = calculate_Average(data_Buffer["residuals"])
    
    data = get_CoWS_Data()
    calculated_Results["water_Temperature"] = data[0]
    calculated_Results["ePTFE_Temperature"] = data[1]
    calculated_Results["trans_Temperature"] = data[2]
    calculated_Results["air_FlowRate"] = data[3]
    calculated_Results["PID_loops_locked"] = data[5]
    
def report_Calibration_Data(i):
    calculated_Results["sample_Inlet_Port"] = "Port " + str(calibration_List[i])
    calculated_Results["sample_Type"] = "Calibration " + str(i)
    report_Common_Data()
    fileDataFunc(calculated_Results)
    clear_Buffer()


def report_Sample_Data(i):
    calculated_Results["sample_Inlet_Port"] = "Port " + str(sample_List[i])
    calculated_Results["sample_Type"] = "Sample " + str(i)
    report_Common_Data()
    fileDataFunc(calculated_Results)
    clear_Buffer()

def report_Warmup_Data(i):
    calculated_Results["sample_Inlet_Port"] = "Port " + str(warmup_List[i])
    calculated_Results["sample_Type"] = "Warm Up"
    data = get_CoWS_Data()
    report_Common_Data()
    fileDataFunc(calculated_Results)
    clear_Buffer()
    
def clear_Buffer():
    for key in data_Buffer:
        data_Buffer[key] = []
    
start_Time_from_begining = time.time()
last_Sample = 2
if warmup_Flag == 'Y':
    NEXT = "StateWarmUp"
else:
    NEXT = "StateCalibrate"
"""

[StateWarmUp]
action = """

warmup_List = [warmup_Source]

for i in range(len(warmup_List)):
    if warmup_List[i] != 0:
        Position = "P" + str(warmup_List[i])
        logFunc("CoWS inlet set to Position %d...\n" %warmup_List[i])
        CoWS.sendString(Position)
        start_Time_from_begining = time.time()
        start_Time = start_Time_from_begining
        while (time.time()-start_Time) < 15*60:
            start_Ave_Time = time.time()
            startTime = time.time()
            while (time.time()-start_Ave_Time) < averaging_Time:
                results = measGetBufferFirst()
                while not results:
                    sleep(0.2)
                    results = measGetBufferFirst()
                for variable in results:
                    if variable not in data_Buffer:
                        data_Buffer[variable] = [results[variable]]
                    else:
                        data_Buffer[variable].append(results[variable])
            stop_Time = time.time()

            line_Count += 1.0
            report_Warmup_Data(i)
        
        
NEXT = "StateCalibrate"
"""
[StateCalibrate]
action = """

calibration_List = [inlet_Calibration_1, inlet_Calibration_2]

for i in range(len(calibration_List)):
    if calibration_List[i] != 0:
        Position = "P" + str(calibration_List[i])
        logFunc("CoWS inlet set to Position %d...\n" %calibration_List[i])
        CoWS.sendString(Position)
        start_Time = time.time()
        while (time.time()-start_Time) < duration_Calibration:
            start_Ave_Time = time.time()
            startTime = time.time()
            while (time.time()-start_Ave_Time) < averaging_Time:
                results = measGetBufferFirst()
                while not results:
                    sleep(0.2)
                    results = measGetBufferFirst()
                for variable in results:
                    if variable not in data_Buffer:
                        data_Buffer[variable] = [results[variable]]
                    else:
                        data_Buffer[variable].append(results[variable])
            stop_Time = time.time()

            line_Count += 1.0
            report_Calibration_Data(i)
            

if calibration_Mode == 'N':
    NEXT = "StateSample"
elif calibration_Mode == 'Y' and last_Sample == 2:
    NEXT = "StateSample1"
elif calibration_Mode == 'Y' and last_Sample == 1:
    NEXT = "StateSample2"

if total_duration != 0 and (time.time()-start_Time_from_begining) > total_duration:
    NEXT = "StateDone"
"""
[StateSample]
action = """

sample_List = [inlet_Sample_1, inlet_Sample_2]

for i in range(len(sample_List)):
    if sample_List[i] != 0:
        Position = "P" + str(sample_List[i])
        logFunc("CoWS inlet set to Position %d...\n" %sample_List[i])
        CoWS.sendString(Position)
        start_Time = time.time()
        while (time.time()-start_Time) < duration_Source:
            if total_duration != 0 and (time.time()-start_Time_from_begining) > total_duration:
                NEXT = "StateDone"
                break
            else:
                start_Ave_Time = time.time()
                startTime = time.time()
                while (time.time()-start_Ave_Time) < averaging_Time:
                    results = measGetBufferFirst()
                    while not results:
                        sleep(0.2)
                        results = measGetBufferFirst()
                    for variable in results:
                        if variable not in data_Buffer:
                            data_Buffer[variable] = [results[variable]]
                        else:
                            data_Buffer[variable].append(results[variable])
                stop_Time = time.time()                

            line_Count += 1.0
            report_Sample_Data(i)
        
        
NEXT = "StateCalibrate"
"""

[StateSample1]
action = """

sample_List = [inlet_Sample_1]

for i in range(len(sample_List)):
    if sample_List[i] != 0:
        Position = "P" + str(sample_List[i])
        logFunc("CoWS inlet set to Position %d...\n" %sample_List[i])
        CoWS.sendString(Position)
        start_Time = time.time()
        while (time.time()-start_Time) < duration_Source:
            start_Ave_Time = time.time()
            startTime = time.time()
            while (time.time()-start_Ave_Time) < averaging_Time:
                results = measGetBufferFirst()
                while not results:
                    sleep(0.2)
                    results = measGetBufferFirst()
                for variable in results:
                    if variable not in data_Buffer:
                        data_Buffer[variable] = [results[variable]]
                    else:
                        data_Buffer[variable].append(results[variable])
            stop_Time = time.time()

            line_Count += 1.0
            report_Sample_Data(i)
        
        
last_Sample = 1
NEXT = "StateCalibrate"

if total_duration != 0 and (time.time()-start_Time) > total_duration:
    NEXT = "StateDone"
"""

[StateSample2]
action = """

sample_List = [inlet_Sample_2]

for i in range(len(sample_List)):
    if sample_List[i] != 0:
        Position = "P" + str(sample_List[i])
        logFunc("CoWS inlet set to Position %d...\n" %sample_List[i])
        CoWS.sendString(Position)
        start_Time = time.time()
        while (time.time()-start_Time) < duration_Source:
            start_Ave_Time = time.time()
            startTime = time.time()
            while (time.time()-start_Ave_Time) < averaging_Time:
                results = measGetBufferFirst()
                while not results:
                    sleep(0.2)
                    results = measGetBufferFirst()
                for variable in results:
                    if variable not in data_Buffer:
                        data_Buffer[variable] = [results[variable]]
                    else:
                        data_Buffer[variable].append(results[variable])
            stop_Time = time.time()

            line_Count += 1.0
            report_Sample_Data(i)
        
        
last_Sample = 2
NEXT = "StateCalibrate"

if total_duration != 0 and (time.time()-start_Time) > total_duration:
    NEXT = "StateDone"
"""

[StateDone]
action="""
CoWS.sendString("T0")
CoWS.sendString("W0")
CoWS.sendString("A0")
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""