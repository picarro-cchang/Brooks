#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.7.0 on Fri Aug 14 13:47:35 2015
#

import wx
import time
from Host.Common.SerIntrf import SerIntrf

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, CoWS, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.SYSTEM_MENU
        wx.Frame.__init__(self, *args, **kwds)
        self.radio_port1 = wx.RadioButton(self, wx.ID_ANY, _("Port 1"))
        self.radio_port2 = wx.RadioButton(self, wx.ID_ANY, _("Port 2"))
        self.radio_port3 = wx.RadioButton(self, wx.ID_ANY, _("Port 3"))
        self.radio_port4 = wx.RadioButton(self, wx.ID_ANY, _("Port 4"))
        self.btnPumpOn = wx.Button(self, wx.ID_ANY, _("Turn ON Water Pump "))
        self.btnPumpOff = wx.Button(self, wx.ID_ANY, _("Turn OFF Water Pump"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBUTTON, self.OnPort1Selected, self.radio_port1)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnPort2Selected, self.radio_port2)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnPort3Selected, self.radio_port3)
        self.Bind(wx.EVT_RADIOBUTTON, self.OnPort4Selected, self.radio_port4)
        self.Bind(wx.EVT_BUTTON, self.OnPumpOn, self.btnPumpOn)
        self.Bind(wx.EVT_BUTTON, self.OnPumpOff, self.btnPumpOff)
        # end wxGlade
        
        self.CoWS = CoWS
        self.CoWS.sendString("P1")

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("CWS Priming"))
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DLIGHT))
        self.btnPumpOff.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        grid_sizer_1.Add(self.radio_port1, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        grid_sizer_1.Add(self.radio_port2, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        grid_sizer_1.Add(self.radio_port3, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        grid_sizer_1.Add(self.radio_port4, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        sizer_2.Add(grid_sizer_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_3.Add(self.btnPumpOn, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        sizer_3.Add(self.btnPumpOff, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        sizer_2.Add(sizer_3, 1, 0, 0)
        sizer_1.Add(sizer_2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnPort1Selected(self, event):  # wxGlade: MyFrame.<event_handler>
        self.radio_port2.SetValue(False)
        self.radio_port3.SetValue(False)
        self.radio_port4.SetValue(False)
        self.CoWS.sendString("P1")

    def OnPort2Selected(self, event):  # wxGlade: MyFrame.<event_handler>
        self.radio_port1.SetValue(False)
        self.radio_port3.SetValue(False)
        self.radio_port4.SetValue(False)
        self.CoWS.sendString("P2")

    def OnPort3Selected(self, event):  # wxGlade: MyFrame.<event_handler>
        self.radio_port2.SetValue(False)
        self.radio_port1.SetValue(False)
        self.radio_port4.SetValue(False)
        self.CoWS.sendString("P3")

    def OnPort4Selected(self, event):  # wxGlade: MyFrame.<event_handler>
        self.radio_port2.SetValue(False)
        self.radio_port3.SetValue(False)
        self.radio_port1.SetValue(False)
        self.CoWS.sendString("P4")

    def OnPumpOn(self, event):  # wxGlade: MyFrame.<event_handler>
        self.CoWS.sendString("W1")
        self.btnPumpOn.Enable(False)
        self.btnPumpOff.Enable(True)

    def OnPumpOff(self, event):  # wxGlade: MyFrame.<event_handler>
        self.CoWS.sendString("W0")
        self.btnPumpOn.Enable(True)
        self.btnPumpOff.Enable(False)

# end of class MyFrame

class searchFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: searchFrame.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.STAY_ON_TOP | wx.SYSTEM_MENU
        wx.Frame.__init__(self, *args, **kwds)
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: searchFrame.__set_properties
        self.SetTitle(_("Searching..."))
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DLIGHT))
        self.text_ctrl_1.SetMinSize((300, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: searchFrame.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        self.SetSizer(sizer_4)
        sizer_4.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade
        
    def run(self):
        CoWS = None
        CoWSFound = False
        self.text_ctrl_1.AppendText(">>Searching COM ports for Continuous Water Sampler...\n")
        # Searching COM ports for Continuous Water Sampler...
        for p in range(2,100):
            if CoWS:
                CoWS.close()
                CoWS = None
            try:
                CoWS = SerIntrf(p, timeout=250, xonxoff=0)
                time.sleep(3)
            except Exception, e:
                continue
            try:
                self.text_ctrl_1.AppendText(">>Talking to COM%d...\n"%(p+1))
                CoWS.sendString("C7")
                status = CoWS.getLine()
                print status
                if "CoWS" in status:
                    self.text_ctrl_1.AppendText(">>CoWS found at COM%d...\n"%(p+1))
                    CoWSFound = True
                    break
            except:
                pass
        
        if not CoWSFound:
            dlg = wx.MessageBox( "Continuous Water Sampler not found!", "CoWS not found", wx.OK | wx.ICON_ERROR )
            if CoWS:
                CoWS.close()
                CoWS = None
        return CoWS

# end of class searchFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    searchFrame = searchFrame(None, wx.ID_ANY, "")
    searchFrame.Show()
    CoWS = searchFrame.run()
    if CoWS is not None:
        searchFrame.Close()
        mainFrame = MyFrame(CoWS, None, wx.ID_ANY, "")
        app.SetTopWindow(mainFrame)
        mainFrame.Show()
        app.MainLoop()