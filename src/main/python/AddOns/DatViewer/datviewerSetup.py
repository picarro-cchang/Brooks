"""
Dec 15, 2015 by Yuan Ren: this file tries to pack DatViewer into an executable.
Although it does generate an exe file, the resulting program doesn't function as expected.
Some files may conflict and some more files may need to be added.
"""


from __future__ import with_statement

from distutils.core import setup
import py2exe
import sys
import glob
import time
import subprocess
import os.path
import platform

#from Host.Common import OS

# version needs to come from the local dir
#from Host.Common import version as hostVersion
# prolly something like this
# import version as appVersion

version = sys.version_info
pyDirname = "Python%d%d" % (version[0],version[1])

sys.path.append("Common")

sys.stderr = sys.stdout

def _getPythonVersion():
    """
    Returns a string such as "2.5" or 2.7"
    """
    pythonVer = sys.version_info
    return str(pythonVer[0]) + "." + str(pythonVer[1])


def _getPythonSubVersion():
    """
    Returns a string such as "2.7.3"
    """
    pythonVer = sys.version_info
    return str(pythonVer[0]) + "." + str(pythonVer[1]) + "." + str(pythonVer[2])


def _getOsType():
    osType = platform.uname()[2]

    if osType == '7':
        osType = 'win7'
    elif osType == 'XP':
        osType = 'winxp'
    else:
        osType = 'unknown'
        print "Unexpected OS type!"

    return osType

def _getBuildVersion():
    try:
        # First look for release_version which is generated by
        # release.py
        import release_version as buildVersion
        verStr = buildVersion.versionNumString()
        print "Release version: %s" % verStr
    except Exception, e:
        # Next try setup_version which is generated by
        # buildDatViewer.py (command line script for internal builds)
        try:
            import setup_version as buildVersion
            verStr = buildVersion.versionNumString()
            print "Setup version: %s" % verStr
        except Exception, e:
            verStr = "1.0.0.0"
            print "Release or setup version not found, using: %s" % verStr

    return verStr


def _getBuildType():
    try:
        # First look for release_version which is generated by
        # release.py
        import release_version as buildVersion
        buildTypeStr = buildVersion.buildType()
        print "Release build type: %s" % buildTypeStr
    except Exception, e:
        # Next try setup_version which is generated by
        # buildDatViewer.py (command line script for internal builds)
        try:
            import setup_version as buildVersion
            buildTypeStr = buildVersion.buildType()
            print "Setup build type: %s" % buildTypeStr
        except Exception, e:
            buildTypeStr = "DEVELOPMENT"
            print "Release or setup version build type not found, using: %s" % buildTypeStr

    return buildTypeStr


################################################################
# Start of a pile of special setup with the sole purpose
# of making the wxPython apps look like Windows-native
#
class Target:
    def __init__(self, **kw):
        self.__dict__.update(kw)
# The manifest will be inserted as resource into test_wx.exe.  This
# gives the controls the Windows XP appearance (if run on XP ;-)
#
# Another option would be to store it in a file named
# test_wx.exe.manifest, and copy it with the data_files option into
# the dist-dir.
#

cDep = ""
if version[0] == 2 and version[1] > 5:
    cDep = """
<dependency>
    <dependentAssembly>
        <assemblyIdentity
            type="win32"
            name="Microsoft.VC90.CRT"
            version="9.0.21022.8"
            processorArchitecture="X86"
            publicKeyToken="1fc8b3b9a1e18e3b"
            language="*"
        />
    </dependentAssembly>
</dependency>
    """
manifest_template = '''
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
<assemblyIdentity
  version="5.0.0.0"
  processorArchitecture="x86"
  name="%%(prog)s"
  type="win32"
/>
<description>%%(prog)s Program</description>
<dependency>
  <dependentAssembly>
    <assemblyIdentity
      type="win32"
      name="Microsoft.Windows.Common-Controls"
      version="6.0.0.0"
      processorArchitecture="X86"
      publicKeyToken="6595b64144ccf1df"
      language="*"
    />
  </dependentAssembly>
</dependency>
%s
</assembly>
''' % (cDep,)
RT_MANIFEST = 24

DatViewer = Target(description = "DatViewer", # used for the versioninfo resource
                     script = "DatViewer.py", # what to build
                     other_resources = [(RT_MANIFEST,
                                        1,
                                        manifest_template % dict(prog="DatViewer")
                                        )],
                    ##    icon_resources = [(1, "cogwheel.ico")],
                    dest_base = "DatViewer"
                    )

################################################################

# simple check to save us from potential problems using paths in Picarro.pth
if "PYTHONPATH" not in os.environ:
    print "PYTHONPATH is not set in environment, potential exists for pulling local libs from wrong dir."
    print "Run 'python buildDatViewer.py' instead to build DatViewer from the command line."
    sys.exit(1)


pythonVer = _getPythonVersion()
pythonSubVer = _getPythonSubVersion()
osType = _getOsType()

versionStr = _getBuildVersion()
buildTypeStr = _getBuildType()

# And now to the main setup routine...
#
# The following lists and tuples are common to both Python 2.5 and 2.7 builds. If any
# require customization, they must be moved and maintained separately under the if statements below.
exclusionList = ["Tkconstants", "Tkinter", "tcl", '_gtkagg', '_tkagg', '_agg2', '_cairo', '_cocoaagg',
                '_fltkagg', '_gtk', '_gtkcairo', ]

inclusionList = ["email",
                 "email.iterators",
                 "email.generator",
                 "email.mime.audio",
                 "email.mime.multipart",
                 "email.mime.image",
                 "email.mime.text",
                 "email.mime.base",
                 "scipy.interpolate",
                 "scipy.misc",
                 "scipy.sparse.csgraph._validation",
                 "sip",
                 "matplotlib.backends",
                 "matplotlib.backends.backend_wxagg",
                 "matplotlib.backends.backend_qt4agg",
                 "matplotlib.figure",
                 "pylab",
                 "numpy",
                 "numexpr.*",
                 "configobj",
                 "encodings.*",
                 r'scipy.special._ufuncs_cxx',
                 "tables.*",
                 "traits.api",
                 "traitsui.api",
                 "traitsui.wx.editor",
                 "traitsui.basic_editor_factory",
                 "traitsui.menu",
                 'wx',
                 'wx.*',
                 'wx.py.path',
                 'pyface',
                 'pyface.*',
                 'pyface.wx', 
                 'pyface.ui.wx',
                 'pyface.ui.wx.init',
                 'pyface.ui.wx.*',
                 'pyface.ui.wx.grid.*',
                 'pyface.ui.wx.action.*',
                 'pyface.ui.wx.timer.*',
                 'pyface.ui.wx.wizard.*',
                 'pyface.ui.wx.workbench.*',
                 'enable',
                 'enable.drawing',
                 'enable.tools',
                 'enable.wx',
                 'enable.wx.*',
                 'enable.savage',
                 'enable.savage.*',
                 'enable.savage.svg',
                 'enable.savage.svg.*',
                 'enable.savage.svg.backends',
                 'enable.savage.svg.backends.wx',
                 'enable.savage.svg.backends.wx.*',
                 'enable.savage.svg.css',
                 'enable.savage.compliance',
                 'enable.savage.trait_defs',
                 'enable.savage.trait_defs.*',
                 'enable.savage.trait_defs.ui',
                 'enable.savage.trait_defs.ui.*',
                 'enable.savage.trait_defs.ui.wx',
                 'enable.savage.trait_defs.ui.wx.*']

dllexclusionList = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', "mswsock.dll", "powrprof.dll" ]

data_files = [(".", ["../../Assets/icons/Diagnostics_icon.ico"]),
              (r'Scripts', glob.glob(r'Scripts\*.*')),
              (r'Manual', glob.glob(r'Manual\*.*')),
              (r'Manual\_images', glob.glob(r'Manual\_images\*.*')),
              (r'Manual\_static', glob.glob(r'Manual\_static\*.*')),
              (r'Manual\_sources', glob.glob(r'Manual\_sources\*.*'))
              # (r'mpl-data', glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\*.*' % pyDirname)),
              # # Because matplotlibrc does not have an extension, glob does not find it (at least I think that's why)
              # # So add it manually here:
              # (r'mpl-data', [r'C:\%s\Lib\site-packages\matplotlib\mpl-data\matplotlibrc' % pyDirname]),
              # (r'mpl-data\images',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\images\*.*' % pyDirname)),
              # (r'mpl-data\fonts',glob.glob(r'C:\%s\Lib\site-packages\matplotlib\mpl-data\fonts\*.*' % pyDirname))
              ]
import matplotlib as mpl
Python_folder = r'C:\Python27\Lib\site-packages'
data_files +=  mpl.get_py2exe_datafiles()

data_folders = []
data_folders.append( ( os.path.join(Python_folder,r'traitsui\wx\images')    , r'traitsui\wx\images') )
data_folders.append( ( os.path.join(Python_folder,r'traitsui\image\library')      , r'traitsui\image\library') )
data_folders.append( ( os.path.join(Python_folder,r'pyface\images')    , r'pyface\images') )
data_folders.append( ( os.path.join(Python_folder,r'pyface\ui\wx\images')    , r'pyface\ui\wx\images') )
data_folders.append( ( os.path.join(Python_folder,r'pyface\ui\wx\grid\images')    , r'pyface\ui\wx\grid\images') )
data_folders.append( ( os.path.join(Python_folder,r'enable\images'), r'enable/images') )
data_folders.append( ( os.path.join(Python_folder,r'enable\savage\trait_defs\ui\wx\data'), r'enable\savage\trait_defs\ui\wx\data') )
data_folders.append( ( os.path.join(Python_folder,r'pytz\zoneinfo'), r'pytz\zoneinfo') )

# Parsing folders and building the data_files table
for folder, relative_path in data_folders:
    for file in os.listdir(folder):
        f1 = os.path.join(folder,file)
        if os.path.isfile(f1): # skip directories
            f2 = relative_path, [f1]
            data_files.append(f2)
        
# pytz
for root, dirs, files in os.walk(os.path.join(Python_folder,r'pytz\zoneinfo')):
    for f in files:
        f2 = root[30:], [os.path.join(root, f)]
        data_files.append(f2)
            
# Python2.5 (WinXP) needs to include MSVCR71.dll
if pythonVer == "2.5":
    data_files.append("../../Vendor/Microsoft/Python25/MSVCR71.dll")

windowsList = [
    DatViewer
]

productName = "Picarro DatViewer"
if buildTypeStr != "":
    productName = "Picarro DatViewer (%s)" % buildTypeStr

if pythonVer == "2.5":
    # only packageList differs for Python 2.5 and 2.7
    packageList = ["simplejson", "werkzeug","flask","jinja2","email"]

    setup(version = versionStr,
      description = "Picarro DatViewer Software",
      name = productName,
      options = dict(py2exe = dict(compressed = 1,
                                   optimize = 1,
                                   bundle_files = 1,
                                   excludes = exclusionList,
                                   includes = inclusionList,
                                   dll_excludes = dllexclusionList,
                                   packages = packageList)
                     ),
      # targets to build...
      #console = consoleList,
      windows = windowsList,
      data_files = data_files
)

elif pythonVer == "2.7":
    if pythonSubVer == "2.7.6":
        import zmq
        os.environ["PATH"] += os.path.pathsep + os.path.split(zmq.__file__)[0]

    packageList = ["werkzeug","jinja2","email"]

    # no bundle_files, specify zipfile
    setup(version = versionStr,
          description = "Picarro DatViewer Software",
          name = productName,
          options = dict(py2exe = dict(optimize = 0,
                                       dist_dir = 'dist',
                                       bundle_files = 2,
                                       xref = False,
                                       skip_archive = True,
                                       ascii = False,
                                       custom_boot_script = '',
                                       compressed = False,
                                       excludes = exclusionList,
                                       includes = inclusionList,
                                       dll_excludes = dllexclusionList,
                                       packages = packageList)
                         ),
          # targets to build...
          #console = consoleList,
          windows = windowsList,
          data_files = data_files
          #zipfile = "lib/share"
    )

else:
    print "Unsupported Python version %s" % pythonVer
    sys.exit(1)
