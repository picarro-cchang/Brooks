"""
File name: CentrisPumpPriming.py

File History:
   2014-03-31 tw    Extracted from WinXP release, serial port open/close fix for Win7
"""

from ctypes import windll, c_int
import serial
import time
import wx
import sys
import os

# use latest version unless running from source code
if hasattr(sys, "frozen"):
    # running from compiled py2exe
    from Host.Common.CustomConfigObj import CustomConfigObj
else:
    # running from source, use from Common if available
    try:
        print "using Host.Common.CustomConfigObj"
        from Host.Common.CustomConfigObj import CustomConfigObj
    except:
        from CustomConfigObj import CustomConfigObj

# get version number and build type
def _getVersionFromJsonFile():
    # use version.json to get the last release build version
    import simplejson as json

    versionConfig = "../version.json"
    VERSION = {}
    verStr = "0.0.0-0"      # default

    try:
        with open(versionConfig, 'r') as ver:
            VERSION.update(json.load(ver))
            verStr = "%(major)s.%(minor)s.%(revision)s-%(build)s" % VERSION
    finally:
        pass

    return verStr


def _getAppVersion():
    if hasattr(sys, "frozen"):
        # running from compiled py2exe
        try:
            # First look for release_version which is generated by release.py
            # This file is only generated in the sandbox
            import release_version as buildVersion
            verStr = buildVersion.versionNumStringUI()
            buildTypeStr = buildVersion.buildType()

            print "Release version: %s" % verStr
            print "Release build type: '%s'" % buildTypeStr

        except Exception, e:
            # Next try setup_version which is generated by
            # buildAutosampler.py (command line script for internal builds)
            # This file is generated in the local folder
            try:
                import setup_version as buildVersion
                verStr = buildVersion.versionNumStringUI()
                buildTypeStr = buildVersion.buildType()

                print "Setup version: %s" % verStr
                print "Setup build type: '%s'" % buildTypeStr

            except Exception, e:
                # use version.json to get the last release build version
                verStr = _getVersionFromJsonFile()

                print "Release or setup version not found, using: %s" % verStr
                buildTypeStr = "UNKNOWN"

    else:
        # running from source code
        verStr = _getVersionFromJsonFile()
        buildTypeStr = "DEVEL"

        print "Running from source code"
        print "Last build version: %s" % verStr
        print "Build type: '%s'" % buildTypeStr

    # construct the version string
    if buildTypeStr == "":
        return verStr
    else:
        return "%s (%s)" % (verStr, buildTypeStr)


class TimeoutError(Exception):
    pass


class SerIntrf(object):

    def __init__(self, port, baudrate = 9600, timeout = 5, xonxoff = 0):
        # port = 0 means port = "COM1"
        self.ser = serial.Serial(port=port, baudrate=baudrate, timeout=timeout, xonxoff=xonxoff)
        #print self.ser

    def open(self):
        # Win7 throws an exception if try to open port that is already open
        # or close an already closed port, so must check the state first.
        # Same logic also works on WinXP.
        if not self.ser.isOpen():
            self.ser.open()

    def close(self):
        if self.ser.isOpen():
            self.ser.close()

    def flush(self):
        self.ser.flushInput()

    def sendString(self, str):
        self.ser.write(str + '\r')

    def getLine(self):
        # line = []
        # while True:
            # ch = self.ser.read()
            # if not ch:
                # raise TimeoutError
            # if ch != '\n':
                # line.append(ch)
            # else:
                # return ''.join(line)
        return self.ser.readline()


def waitForComplete(ser, pumpAddr, timeout = None):
    startTime = time.time()
    cont = False
    while not cont:
        if timeout != None:
            if time.time() - startTime > timeout:
                print 'Time out after %.2f seconds - pump %d is still busy.' % (timeout, pumpAddr)
                break
        ser.sendString('/%dQ\r\n' % pumpAddr)
        try:
            status = ser.getLine()
            if '@' not in status:
                print 'Pump %d is ready for next command' % pumpAddr
                cont = True
            else:
                time.sleep(0.5)
        except:
            time.sleep(0.5)

    return


if __name__ == '__main__':
    HELP_STRING = 'CentrisPumpPriming.py [-c<FILENAME>] [-h|--help]\n\n    Where the options can be a combination of the following:\n    -h, --help           print this help.\n    -c                   Specify a config file.  Default = "./CentrisPumpPriming.ini"\n    '

    def PrintUsage():
        print HELP_STRING


    def HandleCommandSwitches():
        import getopt
        shortOpts = 'hc:'
        longOpts = ['help']
        try:
            switches, args = getopt.getopt(sys.argv[1:], shortOpts, longOpts)
        except getopt.GetoptError as E:
            print '%s %r' % (E, E)
            sys.exit(1)

        options = {}
        for o, a in switches:
            options.setdefault(o, a)

        if '/?' in args or '/h' in args:
            options.setdefault('-h', '')
        configFile = './CentrisPumpPriming.ini'
        if '-h' in options:
            PrintUsage()
            sys.exit()
        if '-c' in options:
            configFile = options['-c']
            print 'Config file specified at command line: %s' % configFile
        return configFile


    config = CustomConfigObj(HandleCommandSwitches())
    numCommands = config.getint('General', 'numCommands', '3')
    serialPort = config.getint('Communication', 'serialPort', '1')
    app = wx.App()
    app.MainLoop()

    title = 'Syringe Pump Priming ' + _getAppVersion()
    dlg = wx.MultiChoiceDialog(None,
                               'Please ensure needle probes are NOT inserted into the vaporizer.\n\nPlease select the syringe pump(s) to be primed:',
                               title,
                               ['Syringe pump 1', 'Syringe pump 2'])

    dlg.SetSelections([0, 1])
    startPump = dlg.ShowModal() == wx.ID_OK
    portList = dlg.GetSelections()
    numPumps = len(portList)
    if startPump:
        dlg.Destroy()
        pump = SerIntrf(port=serialPort, baudrate=9600, timeout=3, xonxoff=0)
        pump.open()
        for id in range(numPumps):
            pumpAddr = portList[id] + 1
            print '\nPriming pump %d...\n' % pumpAddr
            for comNum in range(numCommands):
                command, timeOut = config.get('General', str(comNum)).split(';')
                command = command.strip()
                timeOut = float(timeOut)
                pump.sendString('/%d%s\r\n' % (pumpAddr, command))
                print 'Command = %s, response = %s' % (command, pump.getLine())
                waitForComplete(pump, pumpAddr, timeOut)

        print '\nWait until both pumps are ready...\n'
        waitForComplete(pump, 1, 300)
        waitForComplete(pump, 2, 300)
        pump.close()
        print '\nPriming completed...\n'
        time.sleep(30)
    else:
        print 'Priming canceled'
        dlg.Destroy()