#Toggle Test Simulates a Direct Tank Connection with CAL.
#Toggle Test will continue until necessary parameters are reached or after the 15 minute time out.

[UserEditableParams]
num_disp_params = 0
0 = "maxTestDuration", "Maximum test duration (minutes)", "10.0"

[Mode]
inject_mode=automatic

[Files]
output = "C:\IsotopicData\SSIM"

[Output]
resultTime          = "Date/Time"                  , %15s
meanDelta           = "Delta Mean"                 , %17.3f
stdDelta            = "Delta Std"                  , %16.3f
mean12CO2           = "12CO2 Mean"                 , %17.3f
std12CO2            = "12CO2 Std"                  , %16.3f
meanc12pzt          = "c12_pzt_stdev Mean"         , %17.3f
meanc13pzt          = "c13_pzt_stdev Mean"         , %17.3f
meanadjust87        = "adjust_87 Mean"             , %0.4e
meanadjust88        = "adjust_88 Mean"             , %0.4e
meancavPress        = "Cavity Pressure Mean"       , %17.3f
meancavTemp         = "Cavity Temperature Mean"    , %17.3f
meanWBTemp          = "Warm Box Temperature Mean"  , %17.3f

[PostProcessing]
type = deltaCorr
output = C:\IsotopicData\Corrected\

[Setup]
initial = StateInitConfig
final = StateDone
error = StateError

[StateInitConfig]
action = """

maxTestDuration = float(editParamDict["maxTestDuration"])

# Set some initial flags
t = 0
initialMeet = False

timeFormat = "%m/%d/%y %H:%M:%S"

# Define pressure setpoints
flushPressure = 140
regularPressure = 140
evacuatePressure = 140
# Lowest pressure = 10.33

setMeasBuffer("analyze_iCO2", ["Delta_Raw", "12CO2", "c12_pzt_stdev", "c13_pzt_stdev", "adjust_87",
"adjust_88", "CavityPressure", "CavityTemp", "WarmBoxTemp"], 50)
clearMeasBuffer()

GUI.setStatusText("")

skipPressureCheck()

disableInstMgrAutoRestartFlow()
# Definte the pressure and inlet valve characteristics
setMaxCavityPressureRate(10)
setInletValveMaxChange(500)
setInletValveGains(80, 1)
setValveMinDac("outlet", 0)
setValveMinDac("inlet", 0)
# Get inlet and outlet max DAC
inletValveMaxDac = getValveMinMaxDac("inlet")["max"]
outletValveMaxDac = getValveMinMaxDac("outlet")["max"]

# Close all the solenoid valves at the start-up

setValveMask(0)
logFunc("\nState Clean starts...\n")
NEXT = "StateClean"
"""

[StateClean]
action = """
# Alternate flow ZA through cavity & sample loop and pumping down sample loop
# Total time: 3 mins
setValveMask(8)
sleep(10)
setValveMask(5)
sleep(20)
setValveMask(8)
sleep(10)
setValveMask(5)
sleep(30)

logFunc("\nState Toggle starts...\n")
NEXT = "StateToggle"
"""

[StateToggle]
action = """
# Toggle valves 2 and 3 while valve 5 is open to imitate a direct tank CAL connection to analyzer
sleep(2)

sumsBuffer = {"Delta":[], "12CO2":[], "c12_pzt_stdev":[], "c13_pzt_stdev":[], "adjust_87":[], "adjust_88":[],
"CavityPressure":[], "CavityTemp":[], "WarmBoxTemp":[], "Time":[]}

clearMeasBuffer()

start = time.time()
dt = time.time()-start
while dt < (60.0 * maxTestDuration):
    setValveMask(22)
    sleep(.5)
    setValveMask(20)
    sleep(.5)
    results = measGetBufferFirst()
    if results:
        sumsBuffer["Delta"].append(results["Delta_Raw"])
        sumsBuffer["12CO2"].append(results["12CO2"])
        sumsBuffer["c12_pzt_stdev"].append(results["c12_pzt_stdev"])
        sumsBuffer["c13_pzt_stdev"].append(results["c13_pzt_stdev"])
        sumsBuffer["adjust_87"].append(results["adjust_87"])
        sumsBuffer["adjust_88"].append(results["adjust_88"])
        sumsBuffer["CavityPressure"].append(results["CavityPressure"])
        sumsBuffer["CavityTemp"].append(results["CavityTemp"])
        sumsBuffer["WarmBoxTemp"].append(results["WarmBoxTemp"])

        if int(dt) % 30 == 0:
            logFunc("\n30 second update...\n")
            row = {}
            row["resultTime"] = strftime(timeFormat, localtime())
            row["meanDelta"] = mean(sumsBuffer["Delta"])
            row["stdDelta"] = std(sumsBuffer["Delta"])
            row["mean12CO2"] = mean(sumsBuffer["12CO2"])
            row["std12CO2"] = std(sumsBuffer["12CO2"])
            row["meanc12pzt"] = mean(sumsBuffer["c12_pzt_stdev"])
            row["meanc13pzt"] = mean(sumsBuffer["c13_pzt_stdev"])
            row["meanadjust87"] = mean(sumsBuffer["adjust_87"])
            row["meanadjust88"] = mean(sumsBuffer["adjust_88"])
            row["meancavPress"] = mean(sumsBuffer["CavityPressure"])
            row["meancavTemp"] = mean(sumsBuffer["CavityTemp"])
            row["meanWBTemp"] = mean(sumsBuffer["WarmBoxTemp"])
            sumsBuffer["Delta"] = []
            sumsBuffer["12CO2"] = []
            sumsBuffer["c12_pzt_stdev"] = []
            sumsBuffer["c13_pzt_stdev"] = []
            sumsBuffer["adjust_87"] = []
            sumsBuffer["adjust_88"] = []
            sumsBuffer["CavityPressure"] = []
            sumsBuffer["CavityTemp"] = []
            sumsBuffer["WarmBoxTemp"] = []
            sumsBuffer["Time"] = []
            fileDataFunc(row)
            import math
            conditionsMet = (dt > 240 and row["meanc12pzt"] < 400 and row["meanc13pzt"] < 400 and
            math.fabs(row["meanadjust87"]) < 0.001 and math.fabs(row["meanadjust88"]) < 0.001 and
            (row["meancavPress"] >= 139.8 and row["meancavPress"] <= 140.2) and (row["meancavTemp"] >= 44.9
            and row["meancavTemp"] <= 45.1) and (row["meanWBTemp"] >= 44.9 and row["meanWBTemp"] <= 45.1))
            if conditionsMet and not initialMeet:
                initialMeet = True
            elif conditionsMet and initialMeet:
                NEXT = "StateEvacuateAtTheEnd"
                break
        dt = time.time() - start

NEXT = "StateEvacuateAtTheEnd"
"""

[StateEvacuateAtTheEnd]
action = """

# Evacuate the cavity
logFunc("\nEvacuating the cavity...\n")

currOutletDac = getValveDacValues()["outletDacValue"]
sleep(5)
NEXT = "StateDone"
"""

[StateDone]
action="""
setValveMask(0)
resumePressureCheck()
enableInstMgrAutoRestartFlow()
logFunc("Done!")
"""

[StateError]
action="""
logFunc("Error %s in state %s\n" % (ERROR_MSG,ERROR_STATE))
NEXT = "StateDone"
"""
