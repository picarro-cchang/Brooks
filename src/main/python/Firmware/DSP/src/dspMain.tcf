utils.loadPlatform("ti.platforms.dsk6713");

/* The following DSP/BIOS Features are enabled.  */
bios.enableMemoryHeaps(prog);
bios.enableRealTimeAnalysis(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

bios.GBL.BOARDNAME = "c6713";
bios.GBL.CLKIN = 50000;
bios.MEM.USERCOMMANDFILE = 0;
bios.MEM.USERCOMMANDFILE = 1;
bios.MEM.instance("SDRAM").len = 0x01000000;
bios.MEM.instance("SDRAM").createHeap = 1;
bios.MEM.BIOSOBJSEG = prog.get("SDRAM");
bios.MEM.MALLOCSEG = prog.get("SDRAM");
bios.LOG.create("trace");
bios.MEM.create("DSP_DATA");
bios.MEM.instance("DSP_DATA").comment = "DSP Data memory";
bios.MEM.instance("DSP_DATA").base = 0x80800000;
bios.MEM.instance("DSP_DATA").len = 0x00800000;
bios.MEM.instance("DSP_DATA").heapSize = 0x00800000;
bios.MEM.instance("DSP_DATA").createHeap = 0;
bios.MEM.instance("SDRAM").len = 0x00800000;
bios.MEM.instance("IRAM").comment = "Gen purpose L2 memory";
bios.MEM.create("IINT");
bios.MEM.instance("IINT").comment = "Interface region in L2 memory";
bios.MEM.instance("IINT").base = 0x00010000;
bios.MEM.instance("IINT").len = 0x00020000;
bios.MEM.instance("IINT").createHeap = 0;
bios.MEM.instance("IRAM").len = 0x00010000;
bios.HWI.instance("HWI_INT13").interruptSource = prog.get("DSPINT");
bios.HWI.instance("HWI_INT13").fxn = prog.extern("hwiHpiInterrupt");
bios.HWI.instance("HWI_INT13").interruptSelectNumber = 0;
bios.HWI.instance("HWI_INT13").useDispatcher = 1;
bios.TSK.CALLSWITCHFXN = 0;
bios.TSK.instance("TSK_idle").order = 1;
bios.TSK.create("TSK_scheduler");
bios.TSK.instance("TSK_scheduler").order = 3;
bios.TSK.instance("TSK_scheduler").comment = "Schedules operations";
bios.TSK.instance("TSK_scheduler").fxn = prog.extern("scheduler");
bios.SEM.create("SEM_scheduler");
bios.SEM.instance("SEM_scheduler").comment = "Controls periodic running of scheduler";
bios.PRD.create("PRD_scheduler");
bios.PRD.instance("PRD_scheduler").order = 3;
bios.PRD.instance("PRD_scheduler").period = 100;
bios.PRD.instance("PRD_scheduler").fxn = prog.extern("schedulerPrdFunc");
bios.PRD.instance("PRD_scheduler").comment = "Scheduler";
bios.PRD.create("PRD_timestamp");
bios.PRD.instance("PRD_timestamp").order = 1;
bios.PRD.instance("PRD_timestamp").period = 1;
bios.PRD.instance("PRD_timestamp").fxn = prog.extern("timestampPrdFunction");
bios.PRD.instance("PRD_timestamp").fxn = prog.extern("timestampPrdFunc");
bios.HWI.instance("HWI_INT4").fxn = prog.extern("ringdownInterrupt");
bios.HWI.instance("HWI_INT4").useDispatcher = 1;
bios.HWI.instance("HWI_INT5").fxn = prog.extern("acqDoneInterrupt");
bios.HWI.instance("HWI_INT5").useDispatcher = 1;
bios.MEM.instance("IINT").base = 0x00020000;
bios.MEM.instance("IINT").len = 0x00010000;
bios.HWI.instance("HWI_INT8").fxn = prog.extern("EDMA_intDispatcher");
bios.HWI.instance("HWI_INT8").useDispatcher = 1;
bios.MEM.instance("IINT").base = 0x00010000;
bios.MEM.instance("IINT").len = 0x00020000;
bios.MEM.instance("IRAM").len = 0x00018000;
bios.MEM.instance("IINT").base = 0x00018000;
bios.MEM.instance("IINT").len = 0x00018000;
bios.MEM.instance("IRAM").len = 0x00010000;
bios.MEM.instance("IINT").base = 0x00010000;
bios.MEM.instance("IINT").len = 0x00020000;
bios.SEM.create("SEM_rdFitting");
bios.SEM.instance("SEM_rdFitting").comment = "Semaphore which controls execution of the ringdown fitting task";
bios.TSK.create("TSK_rdFitting");
bios.TSK.instance("TSK_rdFitting").order = 4;
bios.TSK.instance("TSK_rdFitting").fxn = prog.extern("rdFitting");
bios.TSK.instance("TSK_rdFitting").comment = "Performs ringdown fitting on waveforms enqueued  in ringdown buffers";
bios.TSK.create("TSK_rdDataMoving");
bios.TSK.instance("TSK_rdDataMoving").order = 5;
bios.TSK.instance("TSK_rdDataMoving").comment = "Task which starts QDMA to transfer ringdowns from FPGA to DSP";
bios.TSK.instance("TSK_rdDataMoving").fxn = prog.extern("rdDataMoving");
bios.TSK.instance("TSK_rdDataMoving").stackSize = 128;
bios.TSK.instance("TSK_rdFitting").stackSize = 512;
bios.SEM.create("SEM_rdDataMoving");
bios.SEM.instance("SEM_rdDataMoving").comment = "Binary Semaphore which controls QDMA of ringdown data from FPGA to DSP";
bios.SEM.create("SEM_rdBuffer0Available");
bios.SEM.instance("SEM_rdBuffer0Available").count = 1;
bios.SEM.instance("SEM_rdBuffer0Available").comment = "Indicates that rdBuffer0 can accept a ringdown waveform";
bios.SEM.create("SEM_rdBuffer1Available");
bios.SEM.instance("SEM_rdBuffer1Available").count = 1;
bios.SEM.instance("SEM_rdBuffer1Available").comment = "Indicates rdBuffer1 is available";
bios.SEM.instance("SEM_rdBuffer1Available").comment = "Indicates that rdBuffer1 can accept a ringdown waveform";
bios.SEM.create("SEM_startRdCycle");
bios.TSK.instance("TSK_rdFitting").stackSize = 128;
bios.TSK.instance("TSK_rdFitting").stackSize = 256;
bios.SEM.instance("SEM_startRdCycle").comment = "Binary semaphore indicating that the next ringdown may be started";
bios.TSK.instance("TSK_scheduler").order = 2;
bios.TSK.instance("TSK_rdFitting").order = 3;
bios.TSK.instance("TSK_rdDataMoving").order = 4;
bios.SEM.instance("SEM_startRdCycle").count = 1;
bios.SEM.create("SEM_waitForRdMan");
bios.SEM.instance("SEM_waitForRdMan").comment = "Binary Semaphore which is posted regularly to check the ringdown manager status";
bios.TSK.instance("TSK_rdDataMoving").stackSize = 1024;
bios.TSK.instance("TSK_rdFitting").stackSize = 1024;
bios.TSK.create("TSK_spectCntrl");
bios.TSK.instance("TSK_spectCntrl").order = 6;
bios.TSK.instance("TSK_spectCntrl").comment = "Spectrum controller";
bios.TSK.instance("TSK_spectCntrl").fxn = prog.extern("spectCntrl");
bios.SEM.instance("SEM_startRdCycle").count = 0;
bios.GBL.SPECIFYRTSLIB = 0;
bios.PRD.create("PRD_sentryHandler");
bios.PRD.instance("PRD_sentryHandler").order = 4;
bios.PRD.instance("PRD_scheduler").order = 1;
bios.PRD.instance("PRD_sentryHandler").order = 2;
bios.PRD.instance("PRD_timestamp").destroy();
bios.PRD.create("PRD_timeStamp");
bios.PRD.instance("PRD_timeStamp").order = 4;
bios.PRD.instance("PRD_timeStamp").fxn = prog.extern("timestampPrdFunc");
bios.PRD.instance("PRD_timeStamp").period = 1;
bios.PRD.instance("PRD_timeStamp").comment = "Update timestamp and check for ringdown readiness";
bios.PRD.instance("PRD_sentryHandler").comment = "Sentry handler";
bios.PRD.instance("PRD_sentryHandler").period = 1000;
bios.PRD.instance("PRD_sentryHandler").fxn = prog.extern("sentryHandlerPrdFunc");
bios.SEM.create("SEM_sentryHandler");
bios.SEM.instance("SEM_sentryHandler").comment = "Posted every second for checking system health";
bios.TSK.create("TSK_sentryHandler");
bios.TSK.instance("TSK_sentryHandler").order = 7;
bios.TSK.instance("TSK_sentryHandler").comment = "Checks for system health";
bios.TSK.instance("TSK_sentryHandler").priority = 2;
bios.TSK.instance("TSK_sentryHandler").fxn = prog.extern("sentryHandler");
bios.TSK.instance("TSK_spectCntrl").priority = 3;
bios.TSK.instance("TSK_rdDataMoving").priority = 3;
bios.PRD.instance("PRD_sentryHandler").period = 50;
bios.TSK.instance("TSK_scheduler").stackSize = 1536;
bios.SEM.create("SEM_hpiIntBackend");
bios.SEM.instance("SEM_hpiIntBackend").comment = "Indicates that an HPI action is pending";
bios.LCK.create("LCK_scopeBuffer");
bios.LCK.instance("LCK_scopeBuffer").comment = "Controls access to scope buffer";
bios.SEM.create("SEM_wfmAvailable");
bios.SEM.instance("SEM_wfmAvailable").comment = "Semaphore which controls execution of the scopeHandler task";
bios.TSK.create("TSK_scopeHandler");
bios.TSK.instance("TSK_scopeHandler").order = 8;
bios.TSK.instance("TSK_scopeHandler").fxn = prog.extern("scopeHandler");
bios.TSK.instance("TSK_scopeHandler").comment = "Controls access to the rdBuffers when they are used for oscilloscope mode";
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

prog.gen();
