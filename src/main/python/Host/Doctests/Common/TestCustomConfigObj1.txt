This tests CustomConfigObj, a replacement for SortedConfigParser which is based on ConfigObj

>>> from Host.Common.CustomConfigObj import CustomConfigObj

First check that the class will work with a list of lines as the input file

>>> myInit = ["[SEC1]","opt1=val1","OPT2=val2","[SEC2]","OPT3=1,2,3","opt4=val4","opt5=yes","opt6=","opt7='Hi'"]
>>> config = CustomConfigObj(myInit,ignore_option_case=False)

Check that we can list sections and options with case sensitivity
>>> config.list_sections()
['SEC1', 'SEC2']
>>> config.list_options('SEC1')
['opt1', 'OPT2']
>>> config.has_section('SEC1')
True
>>> config.has_section('sec1')
False
>>> config.get('SEC1','OPT2')
'val2'
>>> config.get('SEC1','OPT1') # doctest: +ELLIPSIS
Traceback (most recent call last):
...
KeyError: 'OPT1'
>>> config.list_items('SEC2')
[('OPT3', '1,2,3'), ('opt4', 'val4'), ('opt5', 'yes'), ('opt6', ''), ('opt7', "'Hi'")]
>>> config.has_option('SEC2','opt3')
False
>>> config.has_option('SEC2','OPT3')
True

If we specify a default value for get, this adds the key if it does not currently exist
>>> config.get('SEC1','OPT1','42')
'42'
>>> config.list_options('SEC1')
['opt1', 'OPT2', 'OPT1']

The utility functions cast the value to the specified type before returning them
>>> config.getint('SEC1','OPT1')
42
>>> config.getfloat('SEC1','OPT1')
42.0
>>> config.getboolean('SEC2','opt5')
True
>>> config.getboolean('SEC2','opt4') # doctest: +ELLIPSIS
Traceback (most recent call last):
...
ValueError: Not a boolean: val4

Check removal of an option. The return value indicates success.
>>> config.remove_option('SEC1','opt1')
True
>>> config.remove_option('SEC1','opt1')
False
>>> config.list_options('SEC1')
['OPT2', 'OPT1']
>>> config.remove_option('SEC1','OPT1')
True
>>> config.list_options('SEC1')
['OPT2']

Check removal of a section. The return value indicates success.
>>> config.remove_section('SEC3')
False
>>> config.remove_section('SEC2')
True
>>> config.list_sections()
['SEC1']
